
HackIRRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800100  00800100  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002368  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000917  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001381  00000000  00000000  0000323b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000678  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002639  00000000  00000000  000053b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000079e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c1       	rjmp	.+810    	; 0x348 <__vector_7>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	64 c1       	rjmp	.+712    	; 0x302 <__vector_14>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 3c       	cpi	r26, 0xCE	; 206
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	2f d1       	rcall	.+606    	; 0x2e4 <main>
  86:	72 c1       	rjmp	.+740    	; 0x36c <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <ir_timerRst>:
}

// enable/disable blinking of pin 13 on IR processing
void ir_blink13(int blinkflag)
{
  irparams.blinkflag = blinkflag;
  8a:	16 bc       	out	0x26, r1	; 38
  8c:	08 95       	ret

0000008e <ir_timerCfgKhz>:
  8e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  92:	82 ed       	ldi	r24, 0xD2	; 210
  94:	87 bd       	out	0x27, r24	; 39
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	84 bd       	out	0x24, r24	; 36
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	85 bd       	out	0x25, r24	; 37
  9e:	08 95       	ret

000000a0 <ir_delayMicroseconds>:
  a0:	e1 e8       	ldi	r30, 0x81	; 129
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
  a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ae:	26 b3       	in	r18, 0x16	; 22
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	26 bb       	out	0x16, r18	; 22
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	80 83       	st	Z, r24
  c8:	b1 9b       	sbis	0x16, 1	; 22
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ir_delayMicroseconds+0x28>
  cc:	08 95       	ret

000000ce <ir_mark>:
  ce:	24 b5       	in	r18, 0x24	; 36
  d0:	20 64       	ori	r18, 0x40	; 64
  d2:	24 bd       	out	0x24, r18	; 36
  d4:	24 b5       	in	r18, 0x24	; 36
  d6:	20 64       	ori	r18, 0x40	; 64
  d8:	24 bd       	out	0x24, r18	; 36
  da:	24 b5       	in	r18, 0x24	; 36
  dc:	20 64       	ori	r18, 0x40	; 64
  de:	24 bd       	out	0x24, r18	; 36
  e0:	24 b5       	in	r18, 0x24	; 36
  e2:	20 64       	ori	r18, 0x40	; 64
  e4:	24 bd       	out	0x24, r18	; 36
  e6:	dc cf       	rjmp	.-72     	; 0xa0 <ir_delayMicroseconds>
  e8:	08 95       	ret

000000ea <ir_space>:
  ea:	24 b5       	in	r18, 0x24	; 36
  ec:	2f 7b       	andi	r18, 0xBF	; 191
  ee:	24 bd       	out	0x24, r18	; 36
  f0:	d7 cf       	rjmp	.-82     	; 0xa0 <ir_delayMicroseconds>
  f2:	08 95       	ret

000000f4 <ir_enableIROut>:
  f4:	9a b1       	in	r25, 0x0a	; 10
  f6:	90 64       	ori	r25, 0x40	; 64
  f8:	9a b9       	out	0x0a, r25	; 10
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	9f 7b       	andi	r25, 0xBF	; 191
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	c6 cf       	rjmp	.-116    	; 0x8e <ir_timerCfgKhz>
 102:	08 95       	ret

00000104 <ir_sendNEC>:
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	6b 01       	movw	r12, r22
 116:	7c 01       	movw	r14, r24
 118:	8a 01       	movw	r16, r20
 11a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 11e:	86 e2       	ldi	r24, 0x26	; 38
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	e8 df       	rcall	.-48     	; 0xf4 <ir_enableIROut>
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	93 e2       	ldi	r25, 0x23	; 35
 128:	d2 df       	rcall	.-92     	; 0xce <ir_mark>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	91 e1       	ldi	r25, 0x11	; 17
 12e:	dd df       	rcall	.-70     	; 0xea <ir_space>
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	14 c0       	rjmp	.+40     	; 0x15e <ir_sendNEC+0x5a>
 136:	ff 20       	and	r15, r15
 138:	3c f4       	brge	.+14     	; 0x148 <ir_sendNEC+0x44>
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	c7 df       	rcall	.-114    	; 0xce <ir_mark>
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	96 e0       	ldi	r25, 0x06	; 6
 144:	d2 df       	rcall	.-92     	; 0xea <ir_space>
 146:	06 c0       	rjmp	.+12     	; 0x154 <ir_sendNEC+0x50>
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	c0 df       	rcall	.-128    	; 0xce <ir_mark>
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	cb df       	rcall	.-106    	; 0xea <ir_space>
 154:	cc 0c       	add	r12, r12
 156:	dd 1c       	adc	r13, r13
 158:	ee 1c       	adc	r14, r14
 15a:	ff 1c       	adc	r15, r15
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	c0 17       	cp	r28, r16
 160:	d1 07       	cpc	r29, r17
 162:	4c f3       	brlt	.-46     	; 0x136 <ir_sendNEC+0x32>
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	b2 df       	rcall	.-156    	; 0xce <ir_mark>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	bd df       	rcall	.-134    	; 0xea <ir_space>
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	df 90       	pop	r13
 184:	cf 90       	pop	r12
 186:	08 95       	ret

00000188 <ir_interruptService>:
{
  unsigned char irdata = 0;

  // timer is used for sampling IR signal

    ir_timerRst();
 188:	80 df       	rcall	.-256    	; 0x8a <ir_timerRst>

    //irdata = (unsigned char)ir_digitalRead(irparams.recvpin);
	irdata = (IR_RECEIVE_PINx & (1<<IR_RECEIVE_PIN))>>IR_RECEIVE_PIN;
 18a:	83 b1       	in	r24, 0x03	; 3
 18c:	80 71       	andi	r24, 0x10	; 16
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24

    irparams.timer++; // One more 50us tick
 1a0:	e0 e0       	ldi	r30, 0x00	; 0
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
 1a4:	22 81       	ldd	r18, Z+2	; 0x02
 1a6:	33 81       	ldd	r19, Z+3	; 0x03
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	33 83       	std	Z+3, r19	; 0x03
 1ae:	22 83       	std	Z+2, r18	; 0x02
    if (irparams.rawlen >= RAWBUF) {
 1b0:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
 1b4:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
 1b8:	24 36       	cpi	r18, 0x64	; 100
 1ba:	31 05       	cpc	r19, r1
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <ir_interruptService+0x3c>
        // Buffer overflow
        irparams.rcvstate = STATE_STOP;
 1be:	95 e0       	ldi	r25, 0x05	; 5
 1c0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
    }
    switch(irparams.rcvstate) {
 1c4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1c8:	93 30       	cpi	r25, 0x03	; 3
 1ca:	d1 f1       	breq	.+116    	; 0x240 <ir_interruptService+0xb8>
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <ir_interruptService+0x4c>
 1ce:	92 30       	cpi	r25, 0x02	; 2
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <ir_interruptService+0x5a>
 1d2:	08 95       	ret
 1d4:	94 30       	cpi	r25, 0x04	; 4
 1d6:	09 f4       	brne	.+2      	; 0x1da <ir_interruptService+0x52>
 1d8:	53 c0       	rjmp	.+166    	; 0x280 <ir_interruptService+0xf8>
 1da:	95 30       	cpi	r25, 0x05	; 5
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <ir_interruptService+0x58>
 1de:	7b c0       	rjmp	.+246    	; 0x2d6 <ir_interruptService+0x14e>
 1e0:	08 95       	ret
      case STATE_IDLE: // In the middle of a gap
        if (irdata == MARK) {
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <ir_interruptService+0x60>
 1e6:	7d c0       	rjmp	.+250    	; 0x2e2 <ir_interruptService+0x15a>
        if (irparams.timer < GAP_TICKS) {
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 1ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 1f0:	84 36       	cpi	r24, 0x64	; 100
 1f2:	91 05       	cpc	r25, r1
 1f4:	28 f4       	brcc	.+10     	; 0x200 <ir_interruptService+0x78>
            // Not big enough to be a gap.
            irparams.timer = 0;
 1f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 1fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 1fe:	08 95       	ret
        } 
        else {
            // gap just ended, record duration and start recording transmission
            irparams.rawlen = 0;
 200:	a0 e0       	ldi	r26, 0x00	; 0
 202:	b1 e0       	ldi	r27, 0x01	; 1
 204:	ec ec       	ldi	r30, 0xCC	; 204
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	11 82       	std	Z+1, r1	; 0x01
 20a:	10 82       	st	Z, r1
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	9c 01       	movw	r18, r24
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	31 83       	std	Z+1, r19	; 0x01
 218:	20 83       	st	Z, r18
 21a:	12 96       	adiw	r26, 0x02	; 2
 21c:	2d 91       	ld	r18, X+
 21e:	3c 91       	ld	r19, X
 220:	13 97       	sbiw	r26, 0x03	; 3
 222:	fc 01       	movw	r30, r24
 224:	32 96       	adiw	r30, 0x02	; 2
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e0 50       	subi	r30, 0x00	; 0
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	31 83       	std	Z+1, r19	; 0x01
 230:	20 83       	st	Z, r18
            irparams.timer = 0;
 232:	13 96       	adiw	r26, 0x03	; 3
 234:	1c 92       	st	X, r1
 236:	1e 92       	st	-X, r1
 238:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	8c 93       	st	X, r24
 23e:	08 95       	ret
        }
        }
        break;
      case STATE_MARK: // timing MARK
        if (irdata == SPACE) {   // MARK ended, record time
 240:	81 11       	cpse	r24, r1
 242:	4f c0       	rjmp	.+158    	; 0x2e2 <ir_interruptService+0x15a>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	b1 e0       	ldi	r27, 0x01	; 1
 248:	ec ec       	ldi	r30, 0xCC	; 204
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	9c 01       	movw	r18, r24
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	31 83       	std	Z+1, r19	; 0x01
 258:	20 83       	st	Z, r18
 25a:	12 96       	adiw	r26, 0x02	; 2
 25c:	2d 91       	ld	r18, X+
 25e:	3c 91       	ld	r19, X
 260:	13 97       	sbiw	r26, 0x03	; 3
 262:	fc 01       	movw	r30, r24
 264:	32 96       	adiw	r30, 0x02	; 2
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	e0 50       	subi	r30, 0x00	; 0
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	31 83       	std	Z+1, r19	; 0x01
 270:	20 83       	st	Z, r18
            irparams.timer = 0;
 272:	13 96       	adiw	r26, 0x03	; 3
 274:	1c 92       	st	X, r1
 276:	1e 92       	st	-X, r1
 278:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_SPACE;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	8c 93       	st	X, r24
 27e:	08 95       	ret
        }
        break;
      case STATE_SPACE: // timing SPACE
        if (irdata == MARK) { // SPACE just ended, record it
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	f1 f4       	brne	.+60     	; 0x2c0 <ir_interruptService+0x138>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	ec ec       	ldi	r30, 0xCC	; 204
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	80 81       	ld	r24, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	9c 01       	movw	r18, r24
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	20 83       	st	Z, r18
 29a:	12 96       	adiw	r26, 0x02	; 2
 29c:	2d 91       	ld	r18, X+
 29e:	3c 91       	ld	r19, X
 2a0:	13 97       	sbiw	r26, 0x03	; 3
 2a2:	fc 01       	movw	r30, r24
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e0 50       	subi	r30, 0x00	; 0
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	31 83       	std	Z+1, r19	; 0x01
 2b0:	20 83       	st	Z, r18
            irparams.timer = 0;
 2b2:	13 96       	adiw	r26, 0x03	; 3
 2b4:	1c 92       	st	X, r1
 2b6:	1e 92       	st	-X, r1
 2b8:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	8c 93       	st	X, r24
 2be:	08 95       	ret
        } 
        else { // SPACE
          if (irparams.timer > GAP_TICKS) {
 2c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 2c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 2c8:	85 36       	cpi	r24, 0x65	; 101
 2ca:	91 05       	cpc	r25, r1
 2cc:	50 f0       	brcs	.+20     	; 0x2e2 <ir_interruptService+0x15a>
            // big SPACE, indicates gap between codes
            // Mark current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting space width
            irparams.rcvstate = STATE_STOP;
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2d4:	08 95       	ret
          } 
        }
        break;
     case STATE_STOP: // waiting, measuring gap
        if (irdata == MARK) { // reset gap timer
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <ir_interruptService+0x15a>
           irparams.timer = 0;
 2da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 2de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 2e2:	08 95       	ret

000002e4 <main>:
    //ir_blink13(0);
	
	//OCR2B = pwmval / 3;
	//TIMSK2=0x02;
	
	ir_sendNEC(0x00FF20DF, 32);
 2e4:	40 e2       	ldi	r20, 0x20	; 32
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	6f ed       	ldi	r22, 0xDF	; 223
 2ea:	70 e2       	ldi	r23, 0x20	; 32
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	09 df       	rcall	.-494    	; 0x104 <ir_sendNEC>
	
	while (1)
	{
		ir_sendNEC(0x00FF20DF, 32);
 2f2:	40 e2       	ldi	r20, 0x20	; 32
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	6f ed       	ldi	r22, 0xDF	; 223
 2f8:	70 e2       	ldi	r23, 0x20	; 32
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 df       	rcall	.-508    	; 0x104 <ir_sendNEC>
 300:	f8 cf       	rjmp	.-16     	; 0x2f2 <main+0xe>

00000302 <__vector_14>:
	}

}

ISR(TIMER0_COMPA_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	ir_interruptService();
 324:	31 df       	rcall	.-414    	; 0x188 <ir_interruptService>
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 PORTB ^= 0x21;
 356:	95 b1       	in	r25, 0x05	; 5
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	89 27       	eor	r24, r25
 35c:	85 b9       	out	0x05, r24	; 5
}
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
