
HackIRRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000021d6  0000226a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800138  00800138  000022a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c3b  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e4  00000000  00000000  00006317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027c4  00000000  00000000  000075fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  00009dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5b  00000000  00000000  0000a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000377b  00000000  00000000  0000b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000ec76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6f c0       	rjmp	.+222    	; 0xe0 <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__vector_14>
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
      42:	00 00       	nop
      44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
      46:	00 00       	nop
      48:	68 c0       	rjmp	.+208    	; 0x11a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	c5 00       	.word	0x00c5	; ????
      6a:	c5 00       	.word	0x00c5	; ????
      6c:	cc 00       	.word	0x00cc	; ????
      6e:	c5 00       	.word	0x00c5	; ????
      70:	cc 00       	.word	0x00cc	; ????
      72:	cc 00       	.word	0x00cc	; ????
      74:	cc 00       	.word	0x00cc	; ????
      76:	cc 00       	.word	0x00cc	; ????
      78:	c5 00       	.word	0x00c5	; ????
      7a:	c5 00       	.word	0x00c5	; ????
      7c:	cc 00       	.word	0x00cc	; ????
      7e:	c5 00       	.word	0x00c5	; ????
      80:	cc 00       	.word	0x00cc	; ????
      82:	cc 00       	.word	0x00cc	; ????
      84:	cc 00       	.word	0x00cc	; ????
      86:	cc 00       	.word	0x00cc	; ????
      88:	cc 00       	.word	0x00cc	; ????
      8a:	cc 00       	.word	0x00cc	; ????
      8c:	cc 00       	.word	0x00cc	; ????
      8e:	cc 00       	.word	0x00cc	; ????
      90:	cc 00       	.word	0x00cc	; ????
      92:	cc 00       	.word	0x00cc	; ????
      94:	cc 00       	.word	0x00cc	; ????
      96:	cc 00       	.word	0x00cc	; ????
      98:	c5 00       	.word	0x00c5	; ????
      9a:	c5 00       	.word	0x00c5	; ????
      9c:	cc 00       	.word	0x00cc	; ????
      9e:	c5 00       	.word	0x00c5	; ????
      a0:	cc 00       	.word	0x00cc	; ????
      a2:	cc 00       	.word	0x00cc	; ????
      a4:	cc 00       	.word	0x00cc	; ????
      a6:	cc 00       	.word	0x00cc	; ????
      a8:	cc 00       	.word	0x00cc	; ????
      aa:	cc 00       	.word	0x00cc	; ????
      ac:	cc 00       	.word	0x00cc	; ????
      ae:	cc 00       	.word	0x00cc	; ????
      b0:	cc 00       	.word	0x00cc	; ????
      b2:	cc 00       	.word	0x00cc	; ????
      b4:	cc 00       	.word	0x00cc	; ????
      b6:	cc 00       	.word	0x00cc	; ????
      b8:	cc 00       	.word	0x00cc	; ????
      ba:	cc 00       	.word	0x00cc	; ????
      bc:	cc 00       	.word	0x00cc	; ????
      be:	cc 00       	.word	0x00cc	; ????
      c0:	cc 00       	.word	0x00cc	; ????
      c2:	cc 00       	.word	0x00cc	; ????
      c4:	cc 00       	.word	0x00cc	; ????
      c6:	cc 00       	.word	0x00cc	; ????
      c8:	cc 00       	.word	0x00cc	; ????
      ca:	cc 00       	.word	0x00cc	; ????
      cc:	cc 00       	.word	0x00cc	; ????
      ce:	cc 00       	.word	0x00cc	; ????
      d0:	cc 00       	.word	0x00cc	; ????
      d2:	cc 00       	.word	0x00cc	; ????
      d4:	cc 00       	.word	0x00cc	; ????
      d6:	cc 00       	.word	0x00cc	; ????
      d8:	c5 00       	.word	0x00c5	; ????
      da:	c5 00       	.word	0x00c5	; ????
      dc:	cc 00       	.word	0x00cc	; ????
      de:	c5 00       	.word	0x00c5	; ????

000000e0 <__ctors_end>:
      e0:	11 24       	eor	r1, r1
      e2:	1f be       	out	0x3f, r1	; 63
      e4:	cf ef       	ldi	r28, 0xFF	; 255
      e6:	d8 e0       	ldi	r29, 0x08	; 8
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
      ec:	11 e0       	ldi	r17, 0x01	; 1
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	e6 ed       	ldi	r30, 0xD6	; 214
      f4:	f1 e2       	ldi	r31, 0x21	; 33
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
      f8:	05 90       	lpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	a8 33       	cpi	r26, 0x38	; 56
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
     102:	22 e0       	ldi	r18, 0x02	; 2
     104:	a8 e3       	ldi	r26, 0x38	; 56
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	ab 33       	cpi	r26, 0x3B	; 59
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <main>
     116:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <clearKeys>:
	PrevKeyCode=keyCode;
	
}
void clearKeys()
{
	PressedKeyCode=KEY_NONE;
     11c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PressedKeyCode>
	ReleasedKeyCode=KEY_NONE;
     120:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ReleasedKeyCode>
     124:	08 95       	ret

00000126 <setKeyboardPhase1>:
}

void setKeyboardPhase1()
{
	keyboardPORTx &= ~(1<<X1 | 1<<X2 | 1<<X3); //désactive les sorties des colonnes
     126:	85 b1       	in	r24, 0x05	; 5
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 b9       	out	0x05, r24	; 5
	keyboardDDRx &= ~(1<<X1 | 1<<X2 | 1<<X3); //bascule les colonnes en entrées
     12c:	84 b1       	in	r24, 0x04	; 4
     12e:	88 7f       	andi	r24, 0xF8	; 248
     130:	84 b9       	out	0x04, r24	; 4
	keyboardDDRx |= (1<<Y1 | 1<<Y2 | 1<<Y3 | 1<<Y4); //bascule les lignes en sorties
     132:	84 b1       	in	r24, 0x04	; 4
     134:	88 67       	ori	r24, 0x78	; 120
     136:	84 b9       	out	0x04, r24	; 4
	keyboardPORTx |= (1<<Y1 | 1<<Y2 | 1<<Y3 | 1<<Y4); //active les sorties des lignes
     138:	85 b1       	in	r24, 0x05	; 5
     13a:	88 67       	ori	r24, 0x78	; 120
     13c:	85 b9       	out	0x05, r24	; 5
     13e:	08 95       	ret

00000140 <setKeyboardPhase2>:
}
void setKeyboardPhase2()
{
	keyboardPORTx &= ~(1<<Y1 | 1<<Y2 | 1<<Y3 | 1<<Y4); //désactive les sorties des lignes
     140:	85 b1       	in	r24, 0x05	; 5
     142:	87 78       	andi	r24, 0x87	; 135
     144:	85 b9       	out	0x05, r24	; 5
	keyboardDDRx &= ~(1<<Y1 | 1<<Y2 | 1<<Y3 | 1<<Y4); //bascule les lignes en entrées
     146:	84 b1       	in	r24, 0x04	; 4
     148:	87 78       	andi	r24, 0x87	; 135
     14a:	84 b9       	out	0x04, r24	; 4
	keyboardDDRx |= (1<<X1 | 1<<X2 | 1<<X3); //bascule les colonnes en sorties
     14c:	84 b1       	in	r24, 0x04	; 4
     14e:	87 60       	ori	r24, 0x07	; 7
     150:	84 b9       	out	0x04, r24	; 4
	keyboardPORTx |= (1<<X1 | 1<<X2 | 1<<X3); //active les sorties des colonnes
     152:	85 b1       	in	r24, 0x05	; 5
     154:	87 60       	ori	r24, 0x07	; 7
     156:	85 b9       	out	0x05, r24	; 5
     158:	08 95       	ret

0000015a <readKeyboardPhase1>:
}
uint8_t readKeyboardPhase1()
{
	return keyboardPINx & (1<<X1 | 1<<X2 | 1<<X3);
     15a:	83 b1       	in	r24, 0x03	; 3
}
     15c:	87 70       	andi	r24, 0x07	; 7
     15e:	08 95       	ret

00000160 <readKeyboardPhase2>:
uint8_t readKeyboardPhase2()
{
	return keyboardPINx & (1<<Y1 | 1<<Y2 | 1<<Y3 | 1<<Y4);
     160:	83 b1       	in	r24, 0x03	; 3
     162:	88 77       	andi	r24, 0x78	; 120
     164:	08 95       	ret

00000166 <processKeyboard>:

uint8_t PressedKeyCode=KEY_NONE;
uint8_t ReleasedKeyCode=KEY_NONE;

void processKeyboard()
{
     166:	cf 93       	push	r28
	static uint8_t PrevKeyCode = KEY_NONE;
	uint8_t colCode, lineCode, keyCode;
	
	setKeyboardPhase1();
     168:	de df       	rcall	.-68     	; 0x126 <setKeyboardPhase1>
	colCode=readKeyboardPhase1();
     16a:	f7 df       	rcall	.-18     	; 0x15a <readKeyboardPhase1>
     16c:	c8 2f       	mov	r28, r24
	setKeyboardPhase2();
     16e:	e8 df       	rcall	.-48     	; 0x140 <setKeyboardPhase2>
     170:	f7 df       	rcall	.-18     	; 0x160 <readKeyboardPhase2>
	lineCode=readKeyboardPhase2();
     172:	8c 2b       	or	r24, r28
     174:	48 2f       	mov	r20, r24
	
	keyCode = colCode | lineCode;
     176:	50 e0       	ldi	r21, 0x00	; 0
	
	switch(keyCode)
     178:	fa 01       	movw	r30, r20
     17a:	39 97       	sbiw	r30, 0x09	; 9
     17c:	ec 33       	cpi	r30, 0x3C	; 60
     17e:	f1 05       	cpc	r31, r1
     180:	58 f4       	brcc	.+22     	; 0x198 <processKeyboard+0x32>
     182:	ec 5c       	subi	r30, 0xCC	; 204
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__tablejump2__>
     18a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__data_end>
		case KEY_8:
		case KEY_9:
		case KEY_ASTERISK:
		case KEY_0:
		case KEY_HASH:
			if(PrevKeyCode!=keyCode)
     18e:	89 17       	cp	r24, r25
     190:	61 f0       	breq	.+24     	; 0x1aa <processKeyboard+0x44>
     192:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PressedKeyCode>
				PressedKeyCode=keyCode;
     196:	09 c0       	rjmp	.+18     	; 0x1aa <processKeyboard+0x44>
     198:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
			break;
		default:
			keyCode=KEY_NONE;
			if(PrevKeyCode!=keyCode)
     19c:	88 23       	and	r24, r24
     19e:	21 f0       	breq	.+8      	; 0x1a8 <processKeyboard+0x42>
     1a0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ReleasedKeyCode>
				ReleasedKeyCode=PrevKeyCode;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <processKeyboard+0x44>
		case KEY_HASH:
			if(PrevKeyCode!=keyCode)
				PressedKeyCode=keyCode;
			break;
		default:
			keyCode=KEY_NONE;
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <PressedKeyCode>
			if(PrevKeyCode!=keyCode)
				ReleasedKeyCode=PrevKeyCode;
	}
	if(PressedKeyCode==ReleasedKeyCode)
     1ae:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ReleasedKeyCode>
     1b2:	29 13       	cpse	r18, r25
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <processKeyboard+0x54>
     1b6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PressedKeyCode>
		PressedKeyCode=0;
     1ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
		
	PrevKeyCode=keyCode;
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <updateMain>:
	
}
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
	
	char *playStr = "Play";
	char *spyRecStr = "Spy & Record";
	char *customStr = "Custom";
	
	Refresh|=updateIndex(&index, NB_ITEM_MAINMENU);
     1c6:	63 e0       	ldi	r22, 0x03	; 3
     1c8:	8b e3       	ldi	r24, 0x3B	; 59
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	c2 d0       	rcall	.+388    	; 0x352 <updateIndex>
     1ce:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Refresh>
     1d2:	89 2b       	or	r24, r25
     1d4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Refresh>
	switch(index)
     1d8:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <index.2097>
     1dc:	21 30       	cpi	r18, 0x01	; 1
     1de:	e9 f0       	breq	.+58     	; 0x21a <updateMain+0x58>
     1e0:	18 f0       	brcs	.+6      	; 0x1e8 <updateMain+0x26>
     1e2:	22 30       	cpi	r18, 0x02	; 2
     1e4:	99 f1       	breq	.+102    	; 0x24c <updateMain+0x8a>
     1e6:	49 c0       	rjmp	.+146    	; 0x27a <updateMain+0xb8>
	{
		case 0:
			ScreenBuf[0][0] = '>';
     1e8:	cd e3       	ldi	r28, 0x3D	; 61
     1ea:	d1 e0       	ldi	r29, 0x01	; 1
     1ec:	8e e3       	ldi	r24, 0x3E	; 62
     1ee:	88 83       	st	Y, r24
			strcpy(ScreenBuf[0]+1, playStr);
     1f0:	85 e0       	ldi	r24, 0x05	; 5
     1f2:	e1 e0       	ldi	r30, 0x01	; 1
     1f4:	f1 e0       	ldi	r31, 0x01	; 1
     1f6:	ae e3       	ldi	r26, 0x3E	; 62
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <updateMain+0x38>
			
			ScreenBuf[1][0] = ' ';
     202:	80 e2       	ldi	r24, 0x20	; 32
     204:	89 8b       	std	Y+17, r24	; 0x11
			strcpy(ScreenBuf[1]+1, spyRecStr);
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	e6 e0       	ldi	r30, 0x06	; 6
     20a:	f1 e0       	ldi	r31, 0x01	; 1
     20c:	af e4       	ldi	r26, 0x4F	; 79
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	8a 95       	dec	r24
     216:	e1 f7       	brne	.-8      	; 0x210 <updateMain+0x4e>
			break;
     218:	30 c0       	rjmp	.+96     	; 0x27a <updateMain+0xb8>
		case 1:
			ScreenBuf[0][0] = ' ';
     21a:	cd e3       	ldi	r28, 0x3D	; 61
     21c:	d1 e0       	ldi	r29, 0x01	; 1
     21e:	80 e2       	ldi	r24, 0x20	; 32
     220:	88 83       	st	Y, r24
			strcpy(ScreenBuf[0]+1, playStr);
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	e1 e0       	ldi	r30, 0x01	; 1
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	ae e3       	ldi	r26, 0x3E	; 62
     22a:	b1 e0       	ldi	r27, 0x01	; 1
     22c:	01 90       	ld	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	8a 95       	dec	r24
     232:	e1 f7       	brne	.-8      	; 0x22c <updateMain+0x6a>
			
			ScreenBuf[1][0] = '>';
     234:	8e e3       	ldi	r24, 0x3E	; 62
     236:	89 8b       	std	Y+17, r24	; 0x11
			strcpy(ScreenBuf[1]+1, spyRecStr);
     238:	8d e0       	ldi	r24, 0x0D	; 13
     23a:	e6 e0       	ldi	r30, 0x06	; 6
     23c:	f1 e0       	ldi	r31, 0x01	; 1
     23e:	af e4       	ldi	r26, 0x4F	; 79
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	01 90       	ld	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	8a 95       	dec	r24
     248:	e1 f7       	brne	.-8      	; 0x242 <updateMain+0x80>
			break;
     24a:	17 c0       	rjmp	.+46     	; 0x27a <updateMain+0xb8>
		case 2:
			ScreenBuf[0][0] = '>';
     24c:	8e e3       	ldi	r24, 0x3E	; 62
     24e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ScreenBuf>
			strcpy(ScreenBuf[0]+1, customStr);
     252:	87 e0       	ldi	r24, 0x07	; 7
     254:	e3 e1       	ldi	r30, 0x13	; 19
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	ae e3       	ldi	r26, 0x3E	; 62
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	01 90       	ld	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	8a 95       	dec	r24
     262:	e1 f7       	brne	.-8      	; 0x25c <updateMain+0x9a>
			
			for(uint8_t i=0; i<16; i++)
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	07 c0       	rjmp	.+14     	; 0x276 <updateMain+0xb4>
				ScreenBuf[1][i]=' ';
     268:	e8 2f       	mov	r30, r24
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	e3 5c       	subi	r30, 0xC3	; 195
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	90 e2       	ldi	r25, 0x20	; 32
     272:	91 8b       	std	Z+17, r25	; 0x11
			break;
		case 2:
			ScreenBuf[0][0] = '>';
			strcpy(ScreenBuf[0]+1, customStr);
			
			for(uint8_t i=0; i<16; i++)
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	80 31       	cpi	r24, 0x10	; 16
     278:	b8 f3       	brcs	.-18     	; 0x268 <updateMain+0xa6>
			break;
		default:
			break;
	}
	
	if(PressedKeyCode==KEY_5)
     27a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PressedKeyCode>
     27e:	82 31       	cpi	r24, 0x12	; 18
     280:	59 f4       	brne	.+22     	; 0x298 <updateMain+0xd6>
	{
		switch(index)
     282:	21 30       	cpi	r18, 0x01	; 1
     284:	31 f4       	brne	.+12     	; 0x292 <updateMain+0xd0>
		{
			case 1:
				updatePtr=updateSpyRec;
     286:	83 e8       	ldi	r24, 0x83	; 131
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <updatePtr+0x1>
     28e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <updatePtr>
				break;
			default:
				break;
		}
		ChangedScreen=1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ChangedScreen>
	}
				
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <spy>:
		updatePtr=updateMain;
		ChangedScreen=1;
	}
}
void spy()
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	2e 97       	sbiw	r28, 0x0e	; 14
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	decode_results dec_results;
	
	if (ir_decode(&dec_results)) {
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 87 0b 	call	0x170e	; 0x170e <ir_decode>
     2ba:	89 2b       	or	r24, r25
     2bc:	d9 f0       	breq	.+54     	; 0x2f4 <spy+0x56>
		    switch(dec_results.decode_type)
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	91 05       	cpc	r25, r1
     2c6:	69 f0       	breq	.+26     	; 0x2e2 <spy+0x44>
     2c8:	83 30       	cpi	r24, 0x03	; 3
     2ca:	91 05       	cpc	r25, r1
     2cc:	31 f0       	breq	.+12     	; 0x2da <spy+0x3c>
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	61 f4       	brne	.+24     	; 0x2ea <spy+0x4c>
			{
				case NEC:
				PORTB |= 0x01;
     2d2:	85 b1       	in	r24, 0x05	; 5
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	85 b9       	out	0x05, r24	; 5
				break;
     2d8:	0b c0       	rjmp	.+22     	; 0x2f0 <spy+0x52>
				case RC5:
				PORTB |= 0x01;
     2da:	85 b1       	in	r24, 0x05	; 5
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	85 b9       	out	0x05, r24	; 5
				break;
     2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <spy+0x52>
				case SONY:
				PORTB |= 0x01;
     2e2:	85 b1       	in	r24, 0x05	; 5
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	85 b9       	out	0x05, r24	; 5
				break;
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <spy+0x52>
				default:
				PORTB |= 0x01;
     2ea:	85 b1       	in	r24, 0x05	; 5
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	85 b9       	out	0x05, r24	; 5
				break;
			}
		    //do something here
		    ir_resume(); // Receive the next value
     2f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ir_resume>
	    }
     2f4:	2e 96       	adiw	r28, 0x0e	; 14
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <updateSpyRec>:

void updateSpyRec()
{
	char *l1Str = "Spying... Press";
	char *l2Str = "0-9 to save !";
	strcpy(ScreenBuf[0], l1Str);
     306:	80 e1       	ldi	r24, 0x10	; 16
     308:	ea e1       	ldi	r30, 0x1A	; 26
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	ad e3       	ldi	r26, 0x3D	; 61
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	8a 95       	dec	r24
     316:	e1 f7       	brne	.-8      	; 0x310 <updateSpyRec+0xa>
	strcpy(ScreenBuf[1], l2Str);
     318:	8e e0       	ldi	r24, 0x0E	; 14
     31a:	ea e2       	ldi	r30, 0x2A	; 42
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	ae e4       	ldi	r26, 0x4E	; 78
     320:	b1 e0       	ldi	r27, 0x01	; 1
     322:	01 90       	ld	r0, Z+
     324:	0d 92       	st	X+, r0
     326:	8a 95       	dec	r24
     328:	e1 f7       	brne	.-8      	; 0x322 <updateSpyRec+0x1c>
	
	if(ChangedScreen)
     32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ChangedScreen>
     32e:	81 11       	cpse	r24, r1
		ir_enableIRIn();
     330:	0e 94 c4 0a 	call	0x1588	; 0x1588 <ir_enableIRIn>
	spy();
     334:	b4 df       	rcall	.-152    	; 0x29e <spy>
	
	if(PressedKeyCode==KEY_ASTERISK)
     336:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PressedKeyCode>
     33a:	81 34       	cpi	r24, 0x41	; 65
     33c:	49 f4       	brne	.+18     	; 0x350 <updateSpyRec+0x4a>
	{
		updatePtr=updateMain;
     33e:	81 ee       	ldi	r24, 0xE1	; 225
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <updatePtr+0x1>
     346:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <updatePtr>
		ChangedScreen=1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ChangedScreen>
     350:	08 95       	ret

00000352 <updateIndex>:
char ScreenBuf[2][17] = {0}; //17 pour '\0' 
uint8_t Refresh = 0;
uint8_t ChangedScreen = 1;
	
uint8_t updateIndex(uint8_t *index, uint8_t maxItem)
{
     352:	fc 01       	movw	r30, r24
	switch(PressedKeyCode)
     354:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <PressedKeyCode>
     358:	9a 30       	cpi	r25, 0x0A	; 10
     35a:	19 f0       	breq	.+6      	; 0x362 <updateIndex+0x10>
     35c:	92 32       	cpi	r25, 0x22	; 34
     35e:	61 f0       	breq	.+24     	; 0x378 <updateIndex+0x26>
     360:	1b c0       	rjmp	.+54     	; 0x398 <updateIndex+0x46>
	{
		case KEY_2:
			if(*index == 0)
     362:	80 81       	ld	r24, Z
     364:	81 11       	cpse	r24, r1
     366:	04 c0       	rjmp	.+8      	; 0x370 <updateIndex+0x1e>
				*index=maxItem-1;
     368:	61 50       	subi	r22, 0x01	; 1
     36a:	60 83       	st	Z, r22
			break;
		default:
			return 0;
			break;
	}
	return 1;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	08 95       	ret
	{
		case KEY_2:
			if(*index == 0)
				*index=maxItem-1;
			else
				(*index)--;
     370:	81 50       	subi	r24, 0x01	; 1
     372:	80 83       	st	Z, r24
			break;
		default:
			return 0;
			break;
	}
	return 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	08 95       	ret
				*index=maxItem-1;
			else
				(*index)--;
			break;
		case KEY_8:
			if(*index == maxItem-1)
     378:	80 81       	ld	r24, Z
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	61 50       	subi	r22, 0x01	; 1
     382:	71 09       	sbc	r23, r1
     384:	26 17       	cp	r18, r22
     386:	37 07       	cpc	r19, r23
     388:	19 f4       	brne	.+6      	; 0x390 <updateIndex+0x3e>
				*index=0;
     38a:	10 82       	st	Z, r1
			break;
		default:
			return 0;
			break;
	}
	return 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	08 95       	ret
			break;
		case KEY_8:
			if(*index == maxItem-1)
				*index=0;
			else
				(*index)++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 83       	st	Z, r24
			break;
		default:
			return 0;
			break;
	}
	return 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	08 95       	ret
				*index=0;
			else
				(*index)++;
			break;
		default:
			return 0;
     398:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return 1;
}
     39a:	08 95       	ret

0000039c <render>:
	
void render()
{
	if(Refresh)
     39c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Refresh>
     3a0:	88 23       	and	r24, r24
     3a2:	91 f0       	breq	.+36     	; 0x3c8 <render+0x2c>
	{
		lcd_clrscr();
     3a4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <lcd_clrscr>
		lcd_home();
     3a8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <lcd_home>
		lcd_puts(ScreenBuf[0]);
     3ac:	8d e3       	ldi	r24, 0x3D	; 61
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <lcd_puts>
		lcd_gotoxy(0, 1);
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <lcd_gotoxy>
		lcd_puts(ScreenBuf[1]);
     3bc:	8e e4       	ldi	r24, 0x4E	; 78
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <lcd_puts>
		Refresh=0;
     3c4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Refresh>
     3c8:	08 95       	ret

000003ca <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     3ca:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3ce:	8c e5       	ldi	r24, 0x5C	; 92
     3d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     3d4:	08 95       	ret

000003d6 <i2c_start>:
     3d6:	94 ea       	ldi	r25, 0xA4	; 164
     3d8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3dc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3e0:	99 23       	and	r25, r25
     3e2:	e4 f7       	brge	.-8      	; 0x3dc <i2c_start+0x6>
     3e4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3e8:	98 7f       	andi	r25, 0xF8	; 248
     3ea:	98 30       	cpi	r25, 0x08	; 8
     3ec:	11 f0       	breq	.+4      	; 0x3f2 <i2c_start+0x1c>
     3ee:	90 31       	cpi	r25, 0x10	; 16
     3f0:	91 f4       	brne	.+36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3f6:	84 e8       	ldi	r24, 0x84	; 132
     3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     400:	88 23       	and	r24, r24
     402:	e4 f7       	brge	.-8      	; 0x3fc <i2c_start+0x26>
     404:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     408:	88 7f       	andi	r24, 0xF8	; 248
     40a:	88 31       	cpi	r24, 0x18	; 24
     40c:	31 f0       	breq	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	31 f4       	brne	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	08 95       	ret
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	08 95       	ret
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret

00000422 <i2c_stop>:
     422:	84 e9       	ldi	r24, 0x94	; 148
     424:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     428:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     42c:	84 fd       	sbrc	r24, 4
     42e:	fc cf       	rjmp	.-8      	; 0x428 <i2c_stop+0x6>
     430:	08 95       	ret

00000432 <i2c_write>:
     432:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     436:	84 e8       	ldi	r24, 0x84	; 132
     438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     43c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     440:	88 23       	and	r24, r24
     442:	e4 f7       	brge	.-8      	; 0x43c <i2c_write+0xa>
     444:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     448:	88 7f       	andi	r24, 0xF8	; 248
     44a:	88 32       	cpi	r24, 0x28	; 40
     44c:	11 f0       	breq	.+4      	; 0x452 <i2c_write+0x20>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	08 95       	ret
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret

00000456 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     456:	84 e8       	ldi	r24, 0x84	; 132
     458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     45c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     460:	88 23       	and	r24, r24
     462:	e4 f7       	brge	.-8      	; 0x45c <i2c_readNak+0x6>
	
    return TWDR;
     464:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     468:	08 95       	ret

0000046a <ir_timerRst>:
}

// enable/disable blinking of pin 13 on IR processing
void ir_blink13(int blinkflag)
{
  irparams.blinkflag = blinkflag;
     46a:	16 bc       	out	0x26, r1	; 38
     46c:	08 95       	ret

0000046e <ir_timerCfgNorm>:
     46e:	ee e6       	ldi	r30, 0x6E	; 110
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	10 82       	st	Z, r1
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <Timer0Mode>
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	87 bd       	out	0x27, r24	; 39
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	84 bd       	out	0x24, r24	; 36
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	95 bd       	out	0x25, r25	; 37
     486:	80 83       	st	Z, r24
     488:	08 95       	ret

0000048a <ir_compare>:
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
     4a8:	4b 01       	movw	r8, r22
     4aa:	5c 01       	movw	r10, r24
     4ac:	be 01       	movw	r22, r28
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
     4b6:	6b 01       	movw	r12, r22
     4b8:	7c 01       	movw	r14, r24
     4ba:	2d ec       	ldi	r18, 0xCD	; 205
     4bc:	3c ec       	ldi	r19, 0xCC	; 204
     4be:	4c e4       	ldi	r20, 0x4C	; 76
     4c0:	5f e3       	ldi	r21, 0x3F	; 63
     4c2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__mulsf3>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c5 01       	movw	r24, r10
     4cc:	b4 01       	movw	r22, r8
     4ce:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__cmpsf2>
     4d2:	88 23       	and	r24, r24
     4d4:	9c f0       	brlt	.+38     	; 0x4fc <ir_compare+0x72>
     4d6:	2d ec       	ldi	r18, 0xCD	; 205
     4d8:	3c ec       	ldi	r19, 0xCC	; 204
     4da:	4c e4       	ldi	r20, 0x4C	; 76
     4dc:	5f e3       	ldi	r21, 0x3F	; 63
     4de:	c5 01       	movw	r24, r10
     4e0:	b4 01       	movw	r22, r8
     4e2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__mulsf3>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__cmpsf2>
     4f2:	88 23       	and	r24, r24
     4f4:	34 f4       	brge	.+12     	; 0x502 <ir_compare+0x78>
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <ir_compare+0x7c>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	02 c0       	rjmp	.+4      	; 0x506 <ir_compare+0x7c>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	08 95       	ret

0000051c <ir_decodeHash>:
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	fc 01       	movw	r30, r24
     532:	a4 84       	ldd	r10, Z+12	; 0x0c
     534:	b5 84       	ldd	r11, Z+13	; 0x0d
     536:	f6 e0       	ldi	r31, 0x06	; 6
     538:	af 16       	cp	r10, r31
     53a:	b1 04       	cpc	r11, r1
     53c:	0c f4       	brge	.+2      	; 0x540 <ir_decodeHash+0x24>
     53e:	49 c0       	rjmp	.+146    	; 0x5d2 <ir_decodeHash+0xb6>
     540:	ec 01       	movw	r28, r24
     542:	01 e0       	ldi	r16, 0x01	; 1
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	0f 2e       	mov	r0, r31
     548:	f5 ec       	ldi	r31, 0xC5	; 197
     54a:	cf 2e       	mov	r12, r31
     54c:	fd e9       	ldi	r31, 0x9D	; 157
     54e:	df 2e       	mov	r13, r31
     550:	fc e1       	ldi	r31, 0x1C	; 28
     552:	ef 2e       	mov	r14, r31
     554:	f1 e8       	ldi	r31, 0x81	; 129
     556:	ff 2e       	mov	r15, r31
     558:	f0 2d       	mov	r31, r0
     55a:	25 c0       	rjmp	.+74     	; 0x5a6 <ir_decodeHash+0x8a>
     55c:	8a 85       	ldd	r24, Y+10	; 0x0a
     55e:	9b 85       	ldd	r25, Y+11	; 0x0b
     560:	f8 01       	movw	r30, r16
     562:	32 96       	adiw	r30, 0x02	; 2
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e8 0f       	add	r30, r24
     56a:	f9 1f       	adc	r31, r25
     56c:	60 81       	ld	r22, Z
     56e:	71 81       	ldd	r23, Z+1	; 0x01
     570:	f8 01       	movw	r30, r16
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e8 0f       	add	r30, r24
     578:	f9 1f       	adc	r31, r25
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	85 df       	rcall	.-246    	; 0x48a <ir_compare>
     580:	fc 01       	movw	r30, r24
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	63 e9       	ldi	r22, 0x93	; 147
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsi3>
     592:	6f 01       	movw	r12, r30
     594:	ff 0f       	add	r31, r31
     596:	ee 08       	sbc	r14, r14
     598:	ff 08       	sbc	r15, r15
     59a:	c6 26       	eor	r12, r22
     59c:	d7 26       	eor	r13, r23
     59e:	e8 26       	eor	r14, r24
     5a0:	f9 26       	eor	r15, r25
     5a2:	0f 5f       	subi	r16, 0xFF	; 255
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	c8 01       	movw	r24, r16
     5a8:	02 96       	adiw	r24, 0x02	; 2
     5aa:	8a 15       	cp	r24, r10
     5ac:	9b 05       	cpc	r25, r11
     5ae:	b4 f2       	brlt	.-84     	; 0x55c <ir_decodeHash+0x40>
     5b0:	cc 82       	std	Y+4, r12	; 0x04
     5b2:	dd 82       	std	Y+5, r13	; 0x05
     5b4:	ee 82       	std	Y+6, r14	; 0x06
     5b6:	ff 82       	std	Y+7, r15	; 0x07
     5b8:	80 e2       	ldi	r24, 0x20	; 32
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	99 87       	std	Y+9, r25	; 0x09
     5be:	88 87       	std	Y+8, r24	; 0x08
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	99 83       	std	Y+1, r25	; 0x01
     5c6:	88 83       	st	Y, r24
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <ir_decodeHash+0xbc>
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	cb 01       	movw	r24, r22
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	08 95       	ret

000005ee <MATCH>:
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	07 2e       	mov	r0, r23
     5fe:	00 0c       	add	r0, r0
     600:	88 0b       	sbc	r24, r24
     602:	99 0b       	sbc	r25, r25
     604:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__floatsisf>
     608:	6b 01       	movw	r12, r22
     60a:	7c 01       	movw	r14, r24
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e4       	ldi	r20, 0x40	; 64
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__mulsf3>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	48 e4       	ldi	r20, 0x48	; 72
     61e:	52 e4       	ldi	r21, 0x42	; 66
     620:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
     624:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixsfsi>
     628:	c6 17       	cp	r28, r22
     62a:	d7 07       	cpc	r29, r23
     62c:	e4 f0       	brlt	.+56     	; 0x666 <MATCH+0x78>
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 ea       	ldi	r20, 0xA0	; 160
     634:	5f e3       	ldi	r21, 0x3F	; 63
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__mulsf3>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	48 e4       	ldi	r20, 0x48	; 72
     644:	52 e4       	ldi	r21, 0x42	; 66
     646:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e8       	ldi	r20, 0x80	; 128
     650:	5f e3       	ldi	r21, 0x3F	; 63
     652:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__addsf3>
     656:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixsfsi>
     65a:	6c 17       	cp	r22, r28
     65c:	7d 07       	cpc	r23, r29
     65e:	34 f4       	brge	.+12     	; 0x66c <MATCH+0x7e>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	05 c0       	rjmp	.+10     	; 0x670 <MATCH+0x82>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	02 c0       	rjmp	.+4      	; 0x670 <MATCH+0x82>
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	08 95       	ret

0000067e <ir_getRClevel>:
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	db 01       	movw	r26, r22
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	ec 01       	movw	r28, r24
     69a:	ac 85       	ldd	r26, Y+12	; 0x0c
     69c:	bd 85       	ldd	r27, Y+13	; 0x0d
     69e:	ea 17       	cp	r30, r26
     6a0:	fb 07       	cpc	r31, r27
     6a2:	0c f0       	brlt	.+2      	; 0x6a6 <ir_getRClevel+0x28>
     6a4:	41 c0       	rjmp	.+130    	; 0x728 <ir_getRClevel+0xaa>
     6a6:	aa 85       	ldd	r26, Y+10	; 0x0a
     6a8:	bb 85       	ldd	r27, Y+11	; 0x0b
     6aa:	cf 01       	movw	r24, r30
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	a8 0f       	add	r26, r24
     6b2:	b9 1f       	adc	r27, r25
     6b4:	ad 90       	ld	r10, X+
     6b6:	bc 90       	ld	r11, X
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	e0 ff       	sbrs	r30, 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	79 01       	movw	r14, r18
     6c0:	8a 01       	movw	r16, r20
     6c2:	eb 01       	movw	r28, r22
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	b9 01       	movw	r22, r18
     6ca:	c5 01       	movw	r24, r10
     6cc:	90 df       	rcall	.-224    	; 0x5ee <MATCH>
     6ce:	89 2b       	or	r24, r25
     6d0:	99 f4       	brne	.+38     	; 0x6f8 <ir_getRClevel+0x7a>
     6d2:	b7 01       	movw	r22, r14
     6d4:	66 0f       	add	r22, r22
     6d6:	77 1f       	adc	r23, r23
     6d8:	c5 01       	movw	r24, r10
     6da:	89 df       	rcall	.-238    	; 0x5ee <MATCH>
     6dc:	89 2b       	or	r24, r25
     6de:	79 f4       	brne	.+30     	; 0x6fe <ir_getRClevel+0x80>
     6e0:	b7 01       	movw	r22, r14
     6e2:	66 0f       	add	r22, r22
     6e4:	77 1f       	adc	r23, r23
     6e6:	6e 0d       	add	r22, r14
     6e8:	7f 1d       	adc	r23, r15
     6ea:	c5 01       	movw	r24, r10
     6ec:	80 df       	rcall	.-256    	; 0x5ee <MATCH>
     6ee:	89 2b       	or	r24, r25
     6f0:	f1 f0       	breq	.+60     	; 0x72e <ir_getRClevel+0xb0>
     6f2:	23 e0       	ldi	r18, 0x03	; 3
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <ir_getRClevel+0x84>
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <ir_getRClevel+0x84>
     6fe:	22 e0       	ldi	r18, 0x02	; 2
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f8 01       	movw	r30, r16
     704:	80 81       	ld	r24, Z
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
     70e:	82 17       	cp	r24, r18
     710:	93 07       	cpc	r25, r19
     712:	84 f0       	brlt	.+32     	; 0x734 <ir_getRClevel+0xb6>
     714:	11 82       	std	Z+1, r1	; 0x01
     716:	10 82       	st	Z, r1
     718:	88 81       	ld	r24, Y
     71a:	99 81       	ldd	r25, Y+1	; 0x01
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	99 83       	std	Y+1, r25	; 0x01
     720:	88 83       	st	Y, r24
     722:	8c 2d       	mov	r24, r12
     724:	9d 2d       	mov	r25, r13
     726:	08 c0       	rjmp	.+16     	; 0x738 <ir_getRClevel+0xba>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	05 c0       	rjmp	.+10     	; 0x738 <ir_getRClevel+0xba>
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	9f ef       	ldi	r25, 0xFF	; 255
     732:	02 c0       	rjmp	.+4      	; 0x738 <ir_getRClevel+0xba>
     734:	8c 2d       	mov	r24, r12
     736:	9d 2d       	mov	r25, r13
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	08 95       	ret

0000074e <ir_decodeRC5>:
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <ir_decodeRC5+0x1a>
     768:	00 d0       	rcall	.+0      	; 0x76a <ir_decodeRC5+0x1c>
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	3a 83       	std	Y+2, r19	; 0x02
     774:	29 83       	std	Y+1, r18	; 0x01
     776:	1c 82       	std	Y+4, r1	; 0x04
     778:	1b 82       	std	Y+3, r1	; 0x03
     77a:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
     77e:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
     782:	2d 30       	cpi	r18, 0x0D	; 13
     784:	31 05       	cpc	r19, r1
     786:	08 f4       	brcc	.+2      	; 0x78a <ir_decodeRC5+0x3c>
     788:	74 c0       	rjmp	.+232    	; 0x872 <ir_decodeRC5+0x124>
     78a:	8c 01       	movw	r16, r24
     78c:	29 e7       	ldi	r18, 0x79	; 121
     78e:	33 e0       	ldi	r19, 0x03	; 3
     790:	ae 01       	movw	r20, r28
     792:	4d 5f       	subi	r20, 0xFD	; 253
     794:	5f 4f       	sbci	r21, 0xFF	; 255
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	70 df       	rcall	.-288    	; 0x67e <ir_getRClevel>
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <ir_decodeRC5+0x56>
     7a2:	6b c0       	rjmp	.+214    	; 0x87a <ir_decodeRC5+0x12c>
     7a4:	29 e7       	ldi	r18, 0x79	; 121
     7a6:	33 e0       	ldi	r19, 0x03	; 3
     7a8:	ae 01       	movw	r20, r28
     7aa:	4d 5f       	subi	r20, 0xFD	; 253
     7ac:	5f 4f       	sbci	r21, 0xFF	; 255
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	c8 01       	movw	r24, r16
     7b6:	63 df       	rcall	.-314    	; 0x67e <ir_getRClevel>
     7b8:	89 2b       	or	r24, r25
     7ba:	09 f0       	breq	.+2      	; 0x7be <ir_decodeRC5+0x70>
     7bc:	62 c0       	rjmp	.+196    	; 0x882 <ir_decodeRC5+0x134>
     7be:	29 e7       	ldi	r18, 0x79	; 121
     7c0:	33 e0       	ldi	r19, 0x03	; 3
     7c2:	ae 01       	movw	r20, r28
     7c4:	4d 5f       	subi	r20, 0xFD	; 253
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	c8 01       	movw	r24, r16
     7d0:	56 df       	rcall	.-340    	; 0x67e <ir_getRClevel>
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <ir_decodeRC5+0x8a>
     7d6:	59 c0       	rjmp	.+178    	; 0x88a <ir_decodeRC5+0x13c>
     7d8:	c1 2c       	mov	r12, r1
     7da:	d1 2c       	mov	r13, r1
     7dc:	81 2c       	mov	r8, r1
     7de:	91 2c       	mov	r9, r1
     7e0:	54 01       	movw	r10, r8
     7e2:	2e c0       	rjmp	.+92     	; 0x840 <ir_decodeRC5+0xf2>
     7e4:	29 e7       	ldi	r18, 0x79	; 121
     7e6:	33 e0       	ldi	r19, 0x03	; 3
     7e8:	ae 01       	movw	r20, r28
     7ea:	4d 5f       	subi	r20, 0xFD	; 253
     7ec:	5f 4f       	sbci	r21, 0xFF	; 255
     7ee:	be 01       	movw	r22, r28
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	c8 01       	movw	r24, r16
     7f6:	43 df       	rcall	.-378    	; 0x67e <ir_getRClevel>
     7f8:	7c 01       	movw	r14, r24
     7fa:	29 e7       	ldi	r18, 0x79	; 121
     7fc:	33 e0       	ldi	r19, 0x03	; 3
     7fe:	ae 01       	movw	r20, r28
     800:	4d 5f       	subi	r20, 0xFD	; 253
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	be 01       	movw	r22, r28
     806:	6f 5f       	subi	r22, 0xFF	; 255
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	c8 01       	movw	r24, r16
     80c:	38 df       	rcall	.-400    	; 0x67e <ir_getRClevel>
     80e:	e1 14       	cp	r14, r1
     810:	f1 04       	cpc	r15, r1
     812:	51 f4       	brne	.+20     	; 0x828 <ir_decodeRC5+0xda>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	91 05       	cpc	r25, r1
     818:	39 f4       	brne	.+14     	; 0x828 <ir_decodeRC5+0xda>
     81a:	88 0c       	add	r8, r8
     81c:	99 1c       	adc	r9, r9
     81e:	aa 1c       	adc	r10, r10
     820:	bb 1c       	adc	r11, r11
     822:	68 94       	set
     824:	80 f8       	bld	r8, 0
     826:	09 c0       	rjmp	.+18     	; 0x83a <ir_decodeRC5+0xec>
     828:	ea 94       	dec	r14
     82a:	ef 28       	or	r14, r15
     82c:	91 f5       	brne	.+100    	; 0x892 <ir_decodeRC5+0x144>
     82e:	89 2b       	or	r24, r25
     830:	a1 f5       	brne	.+104    	; 0x89a <ir_decodeRC5+0x14c>
     832:	88 0c       	add	r8, r8
     834:	99 1c       	adc	r9, r9
     836:	aa 1c       	adc	r10, r10
     838:	bb 1c       	adc	r11, r11
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	c8 1a       	sub	r12, r24
     83e:	d8 0a       	sbc	r13, r24
     840:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
     844:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	82 17       	cp	r24, r18
     84e:	93 07       	cpc	r25, r19
     850:	48 f2       	brcs	.-110    	; 0x7e4 <ir_decodeRC5+0x96>
     852:	f8 01       	movw	r30, r16
     854:	d1 86       	std	Z+9, r13	; 0x09
     856:	c0 86       	std	Z+8, r12	; 0x08
     858:	84 82       	std	Z+4, r8	; 0x04
     85a:	95 82       	std	Z+5, r9	; 0x05
     85c:	a6 82       	std	Z+6, r10	; 0x06
     85e:	b7 82       	std	Z+7, r11	; 0x07
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	17 c0       	rjmp	.+46     	; 0x8a0 <ir_decodeRC5+0x152>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	cb 01       	movw	r24, r22
     878:	13 c0       	rjmp	.+38     	; 0x8a0 <ir_decodeRC5+0x152>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	cb 01       	movw	r24, r22
     880:	0f c0       	rjmp	.+30     	; 0x8a0 <ir_decodeRC5+0x152>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	cb 01       	movw	r24, r22
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <ir_decodeRC5+0x152>
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	cb 01       	movw	r24, r22
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <ir_decodeRC5+0x152>
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	cb 01       	movw	r24, r22
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <ir_decodeRC5+0x152>
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	cb 01       	movw	r24, r22
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	08 95       	ret

000008c2 <MATCH_MARK>:
     8c2:	95 ce       	rjmp	.-726    	; 0x5ee <MATCH>
     8c4:	08 95       	ret

000008c6 <MATCH_SPACE>:
     8c6:	93 ce       	rjmp	.-730    	; 0x5ee <MATCH>
     8c8:	08 95       	ret

000008ca <ir_decodeSigma>:
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	3c 01       	movw	r6, r24
     8e8:	fc 01       	movw	r30, r24
     8ea:	c2 84       	ldd	r12, Z+10	; 0x0a
     8ec:	d3 84       	ldd	r13, Z+11	; 0x0b
     8ee:	f6 01       	movw	r30, r12
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	68 ef       	ldi	r22, 0xF8	; 248
     8f6:	70 e2       	ldi	r23, 0x20	; 32
     8f8:	e4 df       	rcall	.-56     	; 0x8c2 <MATCH_MARK>
     8fa:	89 2b       	or	r24, r25
     8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
     8fe:	8f c0       	rjmp	.+286    	; 0xa1e <__stack+0x11f>
     900:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     904:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     908:	86 97       	sbiw	r24, 0x26	; 38
     90a:	08 f4       	brcc	.+2      	; 0x90e <__stack+0xf>
     90c:	8c c0       	rjmp	.+280    	; 0xa26 <__stack+0x127>
     90e:	f6 01       	movw	r30, r12
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	95 81       	ldd	r25, Z+5	; 0x05
     914:	60 e9       	ldi	r22, 0x90	; 144
     916:	70 e1       	ldi	r23, 0x10	; 16
     918:	d6 df       	rcall	.-84     	; 0x8c6 <MATCH_SPACE>
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	87 c0       	rjmp	.+270    	; 0xa2e <__stack+0x12f>
     920:	03 e0       	ldi	r16, 0x03	; 3
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	81 2c       	mov	r8, r1
     926:	91 2c       	mov	r9, r1
     928:	54 01       	movw	r10, r8
     92a:	e1 2c       	mov	r14, r1
     92c:	f1 2c       	mov	r15, r1
     92e:	54 c0       	rjmp	.+168    	; 0x9d8 <__stack+0xd9>
     930:	f8 01       	movw	r30, r16
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ec 0d       	add	r30, r12
     938:	fd 1d       	adc	r31, r13
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	68 e0       	ldi	r22, 0x08	; 8
     940:	72 e0       	ldi	r23, 0x02	; 2
     942:	bf df       	rcall	.-130    	; 0x8c2 <MATCH_MARK>
     944:	89 2b       	or	r24, r25
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0x4b>
     948:	76 c0       	rjmp	.+236    	; 0xa36 <__stack+0x137>
     94a:	e8 01       	movw	r28, r16
     94c:	21 96       	adiw	r28, 0x01	; 1
     94e:	cc 0f       	add	r28, r28
     950:	dd 1f       	adc	r29, r29
     952:	cc 0d       	add	r28, r12
     954:	dd 1d       	adc	r29, r13
     956:	88 81       	ld	r24, Y
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	60 e4       	ldi	r22, 0x40	; 64
     95c:	76 e0       	ldi	r23, 0x06	; 6
     95e:	b3 df       	rcall	.-154    	; 0x8c6 <MATCH_SPACE>
     960:	89 2b       	or	r24, r25
     962:	39 f0       	breq	.+14     	; 0x972 <__stack+0x73>
     964:	88 0c       	add	r8, r8
     966:	99 1c       	adc	r9, r9
     968:	aa 1c       	adc	r10, r10
     96a:	bb 1c       	adc	r11, r11
     96c:	68 94       	set
     96e:	80 f8       	bld	r8, 0
     970:	0c c0       	rjmp	.+24     	; 0x98a <__stack+0x8b>
     972:	88 81       	ld	r24, Y
     974:	99 81       	ldd	r25, Y+1	; 0x01
     976:	68 e0       	ldi	r22, 0x08	; 8
     978:	72 e0       	ldi	r23, 0x02	; 2
     97a:	a5 df       	rcall	.-182    	; 0x8c6 <MATCH_SPACE>
     97c:	89 2b       	or	r24, r25
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x83>
     980:	5e c0       	rjmp	.+188    	; 0xa3e <__stack+0x13f>
     982:	88 0c       	add	r8, r8
     984:	99 1c       	adc	r9, r9
     986:	aa 1c       	adc	r10, r10
     988:	bb 1c       	adc	r11, r11
     98a:	c8 01       	movw	r24, r16
     98c:	02 96       	adiw	r24, 0x02	; 2
     98e:	f7 e0       	ldi	r31, 0x07	; 7
     990:	ef 16       	cp	r14, r31
     992:	f1 04       	cpc	r15, r1
     994:	e9 f4       	brne	.+58     	; 0x9d0 <__stack+0xd1>
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	f6 01       	movw	r30, r12
     99c:	e8 0f       	add	r30, r24
     99e:	f9 1f       	adc	r31, r25
     9a0:	80 81       	ld	r24, Z
     9a2:	91 81       	ldd	r25, Z+1	; 0x01
     9a4:	68 e0       	ldi	r22, 0x08	; 8
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	8c df       	rcall	.-232    	; 0x8c2 <MATCH_MARK>
     9aa:	89 2b       	or	r24, r25
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	4b c0       	rjmp	.+150    	; 0xa46 <__stack+0x147>
     9b0:	f8 01       	movw	r30, r16
     9b2:	33 96       	adiw	r30, 0x03	; 3
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ec 0d       	add	r30, r12
     9ba:	fd 1d       	adc	r31, r13
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	60 e9       	ldi	r22, 0x90	; 144
     9c2:	70 e1       	ldi	r23, 0x10	; 16
     9c4:	80 df       	rcall	.-256    	; 0x8c6 <MATCH_SPACE>
     9c6:	89 2b       	or	r24, r25
     9c8:	09 f4       	brne	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	41 c0       	rjmp	.+130    	; 0xa4e <__stack+0x14f>
     9cc:	c8 01       	movw	r24, r16
     9ce:	04 96       	adiw	r24, 0x04	; 4
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	e2 1a       	sub	r14, r18
     9d4:	f2 0a       	sbc	r15, r18
     9d6:	8c 01       	movw	r16, r24
     9d8:	80 e1       	ldi	r24, 0x10	; 16
     9da:	e8 16       	cp	r14, r24
     9dc:	f1 04       	cpc	r15, r1
     9de:	0c f4       	brge	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	a7 cf       	rjmp	.-178    	; 0x930 <__stack+0x31>
     9e2:	00 0f       	add	r16, r16
     9e4:	11 1f       	adc	r17, r17
     9e6:	f6 01       	movw	r30, r12
     9e8:	e0 0f       	add	r30, r16
     9ea:	f1 1f       	adc	r31, r17
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	68 e0       	ldi	r22, 0x08	; 8
     9f2:	72 e0       	ldi	r23, 0x02	; 2
     9f4:	66 df       	rcall	.-308    	; 0x8c2 <MATCH_MARK>
     9f6:	89 2b       	or	r24, r25
     9f8:	71 f1       	breq	.+92     	; 0xa56 <__stack+0x157>
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	f3 01       	movw	r30, r6
     a00:	91 87       	std	Z+9, r25	; 0x09
     a02:	80 87       	std	Z+8, r24	; 0x08
     a04:	84 82       	std	Z+4, r8	; 0x04
     a06:	95 82       	std	Z+5, r9	; 0x05
     a08:	a6 82       	std	Z+6, r10	; 0x06
     a0a:	b7 82       	std	Z+7, r11	; 0x07
     a0c:	8b e0       	ldi	r24, 0x0B	; 11
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	80 83       	st	Z, r24
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	1f c0       	rjmp	.+62     	; 0xa5c <__stack+0x15d>
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	cb 01       	movw	r24, r22
     a24:	1b c0       	rjmp	.+54     	; 0xa5c <__stack+0x15d>
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	cb 01       	movw	r24, r22
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__stack+0x15d>
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	cb 01       	movw	r24, r22
     a34:	13 c0       	rjmp	.+38     	; 0xa5c <__stack+0x15d>
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	cb 01       	movw	r24, r22
     a3c:	0f c0       	rjmp	.+30     	; 0xa5c <__stack+0x15d>
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	cb 01       	movw	r24, r22
     a44:	0b c0       	rjmp	.+22     	; 0xa5c <__stack+0x15d>
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	cb 01       	movw	r24, r22
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__stack+0x15d>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	cb 01       	movw	r24, r22
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <__stack+0x15d>
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	cb 01       	movw	r24, r22
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	7f 90       	pop	r7
     a76:	6f 90       	pop	r6
     a78:	08 95       	ret

00000a7a <ir_decodeNEC>:
     a7a:	6f 92       	push	r6
     a7c:	7f 92       	push	r7
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	3c 01       	movw	r6, r24
     a98:	fc 01       	movw	r30, r24
     a9a:	c2 84       	ldd	r12, Z+10	; 0x0a
     a9c:	d3 84       	ldd	r13, Z+11	; 0x0b
     a9e:	f6 01       	movw	r30, r12
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	93 81       	ldd	r25, Z+3	; 0x03
     aa4:	68 e2       	ldi	r22, 0x28	; 40
     aa6:	73 e2       	ldi	r23, 0x23	; 35
     aa8:	0c df       	rcall	.-488    	; 0x8c2 <MATCH_MARK>
     aaa:	89 2b       	or	r24, r25
     aac:	09 f4       	brne	.+2      	; 0xab0 <ir_decodeNEC+0x36>
     aae:	89 c0       	rjmp	.+274    	; 0xbc2 <ir_decodeNEC+0x148>
     ab0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     ab4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     ab8:	04 97       	sbiw	r24, 0x04	; 4
     aba:	19 f5       	brne	.+70     	; 0xb02 <ir_decodeNEC+0x88>
     abc:	f6 01       	movw	r30, r12
     abe:	84 81       	ldd	r24, Z+4	; 0x04
     ac0:	95 81       	ldd	r25, Z+5	; 0x05
     ac2:	6a ec       	ldi	r22, 0xCA	; 202
     ac4:	78 e0       	ldi	r23, 0x08	; 8
     ac6:	ff de       	rcall	.-514    	; 0x8c6 <MATCH_SPACE>
     ac8:	89 2b       	or	r24, r25
     aca:	d9 f0       	breq	.+54     	; 0xb02 <ir_decodeNEC+0x88>
     acc:	f6 01       	movw	r30, r12
     ace:	86 81       	ldd	r24, Z+6	; 0x06
     ad0:	97 81       	ldd	r25, Z+7	; 0x07
     ad2:	60 e3       	ldi	r22, 0x30	; 48
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	f5 de       	rcall	.-534    	; 0x8c2 <MATCH_MARK>
     ad8:	89 2b       	or	r24, r25
     ada:	99 f0       	breq	.+38     	; 0xb02 <ir_decodeNEC+0x88>
     adc:	f3 01       	movw	r30, r6
     ade:	11 86       	std	Z+9, r1	; 0x09
     ae0:	10 86       	std	Z+8, r1	; 0x08
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	dc 01       	movw	r26, r24
     ae8:	84 83       	std	Z+4, r24	; 0x04
     aea:	95 83       	std	Z+5, r25	; 0x05
     aec:	a6 83       	std	Z+6, r26	; 0x06
     aee:	b7 83       	std	Z+7, r27	; 0x07
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	73 c0       	rjmp	.+230    	; 0xbe8 <ir_decodeNEC+0x16e>
     b02:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     b06:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     b0a:	84 34       	cpi	r24, 0x44	; 68
     b0c:	91 05       	cpc	r25, r1
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <ir_decodeNEC+0x98>
     b10:	5c c0       	rjmp	.+184    	; 0xbca <ir_decodeNEC+0x150>
     b12:	f6 01       	movw	r30, r12
     b14:	84 81       	ldd	r24, Z+4	; 0x04
     b16:	95 81       	ldd	r25, Z+5	; 0x05
     b18:	64 e9       	ldi	r22, 0x94	; 148
     b1a:	71 e1       	ldi	r23, 0x11	; 17
     b1c:	d4 de       	rcall	.-600    	; 0x8c6 <MATCH_SPACE>
     b1e:	89 2b       	or	r24, r25
     b20:	09 f4       	brne	.+2      	; 0xb24 <ir_decodeNEC+0xaa>
     b22:	57 c0       	rjmp	.+174    	; 0xbd2 <ir_decodeNEC+0x158>
     b24:	03 e0       	ldi	r16, 0x03	; 3
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	81 2c       	mov	r8, r1
     b2a:	91 2c       	mov	r9, r1
     b2c:	54 01       	movw	r10, r8
     b2e:	e1 2c       	mov	r14, r1
     b30:	f1 2c       	mov	r15, r1
     b32:	31 c0       	rjmp	.+98     	; 0xb96 <ir_decodeNEC+0x11c>
     b34:	f8 01       	movw	r30, r16
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	ec 0d       	add	r30, r12
     b3c:	fd 1d       	adc	r31, r13
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	60 e3       	ldi	r22, 0x30	; 48
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	bd de       	rcall	.-646    	; 0x8c2 <MATCH_MARK>
     b48:	89 2b       	or	r24, r25
     b4a:	09 f4       	brne	.+2      	; 0xb4e <ir_decodeNEC+0xd4>
     b4c:	46 c0       	rjmp	.+140    	; 0xbda <ir_decodeNEC+0x160>
     b4e:	e8 01       	movw	r28, r16
     b50:	21 96       	adiw	r28, 0x01	; 1
     b52:	cc 0f       	add	r28, r28
     b54:	dd 1f       	adc	r29, r29
     b56:	cc 0d       	add	r28, r12
     b58:	dd 1d       	adc	r29, r13
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	60 e4       	ldi	r22, 0x40	; 64
     b60:	76 e0       	ldi	r23, 0x06	; 6
     b62:	b1 de       	rcall	.-670    	; 0x8c6 <MATCH_SPACE>
     b64:	89 2b       	or	r24, r25
     b66:	39 f0       	breq	.+14     	; 0xb76 <ir_decodeNEC+0xfc>
     b68:	88 0c       	add	r8, r8
     b6a:	99 1c       	adc	r9, r9
     b6c:	aa 1c       	adc	r10, r10
     b6e:	bb 1c       	adc	r11, r11
     b70:	68 94       	set
     b72:	80 f8       	bld	r8, 0
     b74:	0b c0       	rjmp	.+22     	; 0xb8c <ir_decodeNEC+0x112>
     b76:	88 81       	ld	r24, Y
     b78:	99 81       	ldd	r25, Y+1	; 0x01
     b7a:	60 e3       	ldi	r22, 0x30	; 48
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	a3 de       	rcall	.-698    	; 0x8c6 <MATCH_SPACE>
     b80:	89 2b       	or	r24, r25
     b82:	79 f1       	breq	.+94     	; 0xbe2 <ir_decodeNEC+0x168>
     b84:	88 0c       	add	r8, r8
     b86:	99 1c       	adc	r9, r9
     b88:	aa 1c       	adc	r10, r10
     b8a:	bb 1c       	adc	r11, r11
     b8c:	0e 5f       	subi	r16, 0xFE	; 254
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	ff ef       	ldi	r31, 0xFF	; 255
     b92:	ef 1a       	sub	r14, r31
     b94:	ff 0a       	sbc	r15, r31
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	e8 16       	cp	r14, r24
     b9a:	f1 04       	cpc	r15, r1
     b9c:	5c f2       	brlt	.-106    	; 0xb34 <ir_decodeNEC+0xba>
     b9e:	80 e2       	ldi	r24, 0x20	; 32
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	f3 01       	movw	r30, r6
     ba4:	91 87       	std	Z+9, r25	; 0x09
     ba6:	80 87       	std	Z+8, r24	; 0x08
     ba8:	84 82       	std	Z+4, r8	; 0x04
     baa:	95 82       	std	Z+5, r9	; 0x05
     bac:	a6 82       	std	Z+6, r10	; 0x06
     bae:	b7 82       	std	Z+7, r11	; 0x07
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	91 83       	std	Z+1, r25	; 0x01
     bb6:	80 83       	st	Z, r24
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <ir_decodeNEC+0x16e>
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	cb 01       	movw	r24, r22
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <ir_decodeNEC+0x16e>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	cb 01       	movw	r24, r22
     bd0:	0b c0       	rjmp	.+22     	; 0xbe8 <ir_decodeNEC+0x16e>
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	cb 01       	movw	r24, r22
     bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <ir_decodeNEC+0x16e>
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	cb 01       	movw	r24, r22
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <ir_decodeNEC+0x16e>
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	cb 01       	movw	r24, r22
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	9f 90       	pop	r9
     bfe:	8f 90       	pop	r8
     c00:	7f 90       	pop	r7
     c02:	6f 90       	pop	r6
     c04:	08 95       	ret

00000c06 <ir_decodeSony>:
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
     c22:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
     c26:	2a 31       	cpi	r18, 0x1A	; 26
     c28:	31 05       	cpc	r19, r1
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <ir_decodeSony+0x28>
     c2c:	81 c0       	rjmp	.+258    	; 0xd30 <ir_decodeSony+0x12a>
     c2e:	fc 01       	movw	r30, r24
     c30:	e2 84       	ldd	r14, Z+10	; 0x0a
     c32:	f3 84       	ldd	r15, Z+11	; 0x0b
     c34:	f7 01       	movw	r30, r14
     c36:	20 81       	ld	r18, Z
     c38:	31 81       	ldd	r19, Z+1	; 0x01
     c3a:	24 3f       	cpi	r18, 0xF4	; 244
     c3c:	31 40       	sbci	r19, 0x01	; 1
     c3e:	98 f4       	brcc	.+38     	; 0xc66 <ir_decodeSony+0x60>
     c40:	fc 01       	movw	r30, r24
     c42:	11 86       	std	Z+9, r1	; 0x09
     c44:	10 86       	std	Z+8, r1	; 0x08
     c46:	4f ef       	ldi	r20, 0xFF	; 255
     c48:	5f ef       	ldi	r21, 0xFF	; 255
     c4a:	ba 01       	movw	r22, r20
     c4c:	44 83       	std	Z+4, r20	; 0x04
     c4e:	55 83       	std	Z+5, r21	; 0x05
     c50:	66 83       	std	Z+6, r22	; 0x06
     c52:	77 83       	std	Z+7, r23	; 0x07
     c54:	29 e0       	ldi	r18, 0x09	; 9
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	31 83       	std	Z+1, r19	; 0x01
     c5a:	20 83       	st	Z, r18
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	70 c0       	rjmp	.+224    	; 0xd46 <ir_decodeSony+0x140>
     c66:	6c 01       	movw	r12, r24
     c68:	f7 01       	movw	r30, r14
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	60 e6       	ldi	r22, 0x60	; 96
     c70:	79 e0       	ldi	r23, 0x09	; 9
     c72:	27 de       	rcall	.-946    	; 0x8c2 <MATCH_MARK>
     c74:	89 2b       	or	r24, r25
     c76:	09 f4       	brne	.+2      	; 0xc7a <ir_decodeSony+0x74>
     c78:	5f c0       	rjmp	.+190    	; 0xd38 <ir_decodeSony+0x132>
     c7a:	02 e0       	ldi	r16, 0x02	; 2
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	81 2c       	mov	r8, r1
     c80:	91 2c       	mov	r9, r1
     c82:	54 01       	movw	r10, r8
     c84:	2b c0       	rjmp	.+86     	; 0xcdc <ir_decodeSony+0xd6>
     c86:	f8 01       	movw	r30, r16
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	ee 0d       	add	r30, r14
     c8e:	ff 1d       	adc	r31, r15
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	68 e5       	ldi	r22, 0x58	; 88
     c96:	72 e0       	ldi	r23, 0x02	; 2
     c98:	16 de       	rcall	.-980    	; 0x8c6 <MATCH_SPACE>
     c9a:	89 2b       	or	r24, r25
     c9c:	41 f1       	breq	.+80     	; 0xcee <ir_decodeSony+0xe8>
     c9e:	cc 0f       	add	r28, r28
     ca0:	dd 1f       	adc	r29, r29
     ca2:	ce 0d       	add	r28, r14
     ca4:	df 1d       	adc	r29, r15
     ca6:	88 81       	ld	r24, Y
     ca8:	99 81       	ldd	r25, Y+1	; 0x01
     caa:	60 eb       	ldi	r22, 0xB0	; 176
     cac:	74 e0       	ldi	r23, 0x04	; 4
     cae:	09 de       	rcall	.-1006   	; 0x8c2 <MATCH_MARK>
     cb0:	89 2b       	or	r24, r25
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <ir_decodeSony+0xbc>
     cb4:	88 0c       	add	r8, r8
     cb6:	99 1c       	adc	r9, r9
     cb8:	aa 1c       	adc	r10, r10
     cba:	bb 1c       	adc	r11, r11
     cbc:	68 94       	set
     cbe:	80 f8       	bld	r8, 0
     cc0:	0b c0       	rjmp	.+22     	; 0xcd8 <ir_decodeSony+0xd2>
     cc2:	88 81       	ld	r24, Y
     cc4:	99 81       	ldd	r25, Y+1	; 0x01
     cc6:	68 e5       	ldi	r22, 0x58	; 88
     cc8:	72 e0       	ldi	r23, 0x02	; 2
     cca:	fb dd       	rcall	.-1034   	; 0x8c2 <MATCH_MARK>
     ccc:	89 2b       	or	r24, r25
     cce:	c1 f1       	breq	.+112    	; 0xd40 <ir_decodeSony+0x13a>
     cd0:	88 0c       	add	r8, r8
     cd2:	99 1c       	adc	r9, r9
     cd4:	aa 1c       	adc	r10, r10
     cd6:	bb 1c       	adc	r11, r11
     cd8:	0e 5f       	subi	r16, 0xFE	; 254
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
     cdc:	e8 01       	movw	r28, r16
     cde:	21 96       	adiw	r28, 0x01	; 1
     ce0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     ce4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     ce8:	c8 17       	cp	r28, r24
     cea:	d9 07       	cpc	r29, r25
     cec:	60 f2       	brcs	.-104    	; 0xc86 <ir_decodeSony+0x80>
     cee:	01 50       	subi	r16, 0x01	; 1
     cf0:	11 09       	sbc	r17, r1
     cf2:	c8 01       	movw	r24, r16
     cf4:	99 23       	and	r25, r25
     cf6:	0c f4       	brge	.+2      	; 0xcfa <ir_decodeSony+0xf4>
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	95 95       	asr	r25
     cfc:	87 95       	ror	r24
     cfe:	f6 01       	movw	r30, r12
     d00:	91 87       	std	Z+9, r25	; 0x09
     d02:	80 87       	std	Z+8, r24	; 0x08
     d04:	0c 97       	sbiw	r24, 0x0c	; 12
     d06:	34 f4       	brge	.+12     	; 0xd14 <ir_decodeSony+0x10e>
     d08:	11 86       	std	Z+9, r1	; 0x09
     d0a:	10 86       	std	Z+8, r1	; 0x08
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	cb 01       	movw	r24, r22
     d12:	19 c0       	rjmp	.+50     	; 0xd46 <ir_decodeSony+0x140>
     d14:	f6 01       	movw	r30, r12
     d16:	84 82       	std	Z+4, r8	; 0x04
     d18:	95 82       	std	Z+5, r9	; 0x05
     d1a:	a6 82       	std	Z+6, r10	; 0x06
     d1c:	b7 82       	std	Z+7, r11	; 0x07
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	80 83       	st	Z, r24
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <ir_decodeSony+0x140>
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	cb 01       	movw	r24, r22
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <ir_decodeSony+0x140>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	cb 01       	movw	r24, r22
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <ir_decodeSony+0x140>
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	cb 01       	movw	r24, r22
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	08 95       	ret

00000d60 <ir_decodeSanyo>:
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
     d7c:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
     d80:	2a 31       	cpi	r18, 0x1A	; 26
     d82:	31 05       	cpc	r19, r1
     d84:	08 f4       	brcc	.+2      	; 0xd88 <ir_decodeSanyo+0x28>
     d86:	8a c0       	rjmp	.+276    	; 0xe9c <ir_decodeSanyo+0x13c>
     d88:	fc 01       	movw	r30, r24
     d8a:	e2 84       	ldd	r14, Z+10	; 0x0a
     d8c:	f3 84       	ldd	r15, Z+11	; 0x0b
     d8e:	f7 01       	movw	r30, r14
     d90:	20 81       	ld	r18, Z
     d92:	31 81       	ldd	r19, Z+1	; 0x01
     d94:	20 32       	cpi	r18, 0x20	; 32
     d96:	33 40       	sbci	r19, 0x03	; 3
     d98:	98 f4       	brcc	.+38     	; 0xdc0 <ir_decodeSanyo+0x60>
     d9a:	fc 01       	movw	r30, r24
     d9c:	11 86       	std	Z+9, r1	; 0x09
     d9e:	10 86       	std	Z+8, r1	; 0x08
     da0:	4f ef       	ldi	r20, 0xFF	; 255
     da2:	5f ef       	ldi	r21, 0xFF	; 255
     da4:	ba 01       	movw	r22, r20
     da6:	44 83       	std	Z+4, r20	; 0x04
     da8:	55 83       	std	Z+5, r21	; 0x05
     daa:	66 83       	std	Z+6, r22	; 0x06
     dac:	77 83       	std	Z+7, r23	; 0x07
     dae:	29 e0       	ldi	r18, 0x09	; 9
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	31 83       	std	Z+1, r19	; 0x01
     db4:	20 83       	st	Z, r18
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	7d c0       	rjmp	.+250    	; 0xeba <ir_decodeSanyo+0x15a>
     dc0:	6c 01       	movw	r12, r24
     dc2:	f7 01       	movw	r30, r14
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	6c ea       	ldi	r22, 0xAC	; 172
     dca:	7d e0       	ldi	r23, 0x0D	; 13
     dcc:	7a dd       	rcall	.-1292   	; 0x8c2 <MATCH_MARK>
     dce:	89 2b       	or	r24, r25
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <ir_decodeSanyo+0x74>
     dd2:	68 c0       	rjmp	.+208    	; 0xea4 <ir_decodeSanyo+0x144>
     dd4:	f7 01       	movw	r30, r14
     dd6:	84 81       	ldd	r24, Z+4	; 0x04
     dd8:	95 81       	ldd	r25, Z+5	; 0x05
     dda:	6c ea       	ldi	r22, 0xAC	; 172
     ddc:	7d e0       	ldi	r23, 0x0D	; 13
     dde:	71 dd       	rcall	.-1310   	; 0x8c2 <MATCH_MARK>
     de0:	89 2b       	or	r24, r25
     de2:	09 f4       	brne	.+2      	; 0xde6 <ir_decodeSanyo+0x86>
     de4:	63 c0       	rjmp	.+198    	; 0xeac <ir_decodeSanyo+0x14c>
     de6:	03 e0       	ldi	r16, 0x03	; 3
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	81 2c       	mov	r8, r1
     dec:	91 2c       	mov	r9, r1
     dee:	54 01       	movw	r10, r8
     df0:	2b c0       	rjmp	.+86     	; 0xe48 <ir_decodeSanyo+0xe8>
     df2:	f8 01       	movw	r30, r16
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0d       	add	r30, r14
     dfa:	ff 1d       	adc	r31, r15
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	66 eb       	ldi	r22, 0xB6	; 182
     e02:	73 e0       	ldi	r23, 0x03	; 3
     e04:	60 dd       	rcall	.-1344   	; 0x8c6 <MATCH_SPACE>
     e06:	89 2b       	or	r24, r25
     e08:	41 f1       	breq	.+80     	; 0xe5a <ir_decodeSanyo+0xfa>
     e0a:	cc 0f       	add	r28, r28
     e0c:	dd 1f       	adc	r29, r29
     e0e:	ce 0d       	add	r28, r14
     e10:	df 1d       	adc	r29, r15
     e12:	88 81       	ld	r24, Y
     e14:	99 81       	ldd	r25, Y+1	; 0x01
     e16:	60 e6       	ldi	r22, 0x60	; 96
     e18:	79 e0       	ldi	r23, 0x09	; 9
     e1a:	53 dd       	rcall	.-1370   	; 0x8c2 <MATCH_MARK>
     e1c:	89 2b       	or	r24, r25
     e1e:	39 f0       	breq	.+14     	; 0xe2e <ir_decodeSanyo+0xce>
     e20:	88 0c       	add	r8, r8
     e22:	99 1c       	adc	r9, r9
     e24:	aa 1c       	adc	r10, r10
     e26:	bb 1c       	adc	r11, r11
     e28:	68 94       	set
     e2a:	80 f8       	bld	r8, 0
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <ir_decodeSanyo+0xe4>
     e2e:	88 81       	ld	r24, Y
     e30:	99 81       	ldd	r25, Y+1	; 0x01
     e32:	6c eb       	ldi	r22, 0xBC	; 188
     e34:	72 e0       	ldi	r23, 0x02	; 2
     e36:	45 dd       	rcall	.-1398   	; 0x8c2 <MATCH_MARK>
     e38:	89 2b       	or	r24, r25
     e3a:	e1 f1       	breq	.+120    	; 0xeb4 <ir_decodeSanyo+0x154>
     e3c:	88 0c       	add	r8, r8
     e3e:	99 1c       	adc	r9, r9
     e40:	aa 1c       	adc	r10, r10
     e42:	bb 1c       	adc	r11, r11
     e44:	0e 5f       	subi	r16, 0xFE	; 254
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	e8 01       	movw	r28, r16
     e4a:	21 96       	adiw	r28, 0x01	; 1
     e4c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     e50:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     e54:	c8 17       	cp	r28, r24
     e56:	d9 07       	cpc	r29, r25
     e58:	60 f2       	brcs	.-104    	; 0xdf2 <ir_decodeSanyo+0x92>
     e5a:	01 50       	subi	r16, 0x01	; 1
     e5c:	11 09       	sbc	r17, r1
     e5e:	c8 01       	movw	r24, r16
     e60:	99 23       	and	r25, r25
     e62:	0c f4       	brge	.+2      	; 0xe66 <ir_decodeSanyo+0x106>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	95 95       	asr	r25
     e68:	87 95       	ror	r24
     e6a:	f6 01       	movw	r30, r12
     e6c:	91 87       	std	Z+9, r25	; 0x09
     e6e:	80 87       	std	Z+8, r24	; 0x08
     e70:	0c 97       	sbiw	r24, 0x0c	; 12
     e72:	34 f4       	brge	.+12     	; 0xe80 <ir_decodeSanyo+0x120>
     e74:	11 86       	std	Z+9, r1	; 0x09
     e76:	10 86       	std	Z+8, r1	; 0x08
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	cb 01       	movw	r24, r22
     e7e:	1d c0       	rjmp	.+58     	; 0xeba <ir_decodeSanyo+0x15a>
     e80:	f6 01       	movw	r30, r12
     e82:	84 82       	std	Z+4, r8	; 0x04
     e84:	95 82       	std	Z+5, r9	; 0x05
     e86:	a6 82       	std	Z+6, r10	; 0x06
     e88:	b7 82       	std	Z+7, r11	; 0x07
     e8a:	89 e0       	ldi	r24, 0x09	; 9
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <ir_decodeSanyo+0x15a>
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	cb 01       	movw	r24, r22
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <ir_decodeSanyo+0x15a>
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	cb 01       	movw	r24, r22
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <ir_decodeSanyo+0x15a>
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	cb 01       	movw	r24, r22
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <ir_decodeSanyo+0x15a>
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	cb 01       	movw	r24, r22
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	08 95       	ret

00000ed4 <ir_decodeMitsubishi>:
     ed4:	6f 92       	push	r6
     ed6:	7f 92       	push	r7
     ed8:	8f 92       	push	r8
     eda:	9f 92       	push	r9
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
     ef4:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
     ef8:	22 32       	cpi	r18, 0x22	; 34
     efa:	31 05       	cpc	r19, r1
     efc:	08 f4       	brcc	.+2      	; 0xf00 <ir_decodeMitsubishi+0x2c>
     efe:	6e c0       	rjmp	.+220    	; 0xfdc <ir_decodeMitsubishi+0x108>
     f00:	3c 01       	movw	r6, r24
     f02:	fc 01       	movw	r30, r24
     f04:	c2 84       	ldd	r12, Z+10	; 0x0a
     f06:	d3 84       	ldd	r13, Z+11	; 0x0b
     f08:	f6 01       	movw	r30, r12
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	6e e5       	ldi	r22, 0x5E	; 94
     f10:	71 e0       	ldi	r23, 0x01	; 1
     f12:	d7 dc       	rcall	.-1618   	; 0x8c2 <MATCH_MARK>
     f14:	89 2b       	or	r24, r25
     f16:	09 f4       	brne	.+2      	; 0xf1a <ir_decodeMitsubishi+0x46>
     f18:	65 c0       	rjmp	.+202    	; 0xfe4 <ir_decodeMitsubishi+0x110>
     f1a:	02 e0       	ldi	r16, 0x02	; 2
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	81 2c       	mov	r8, r1
     f20:	91 2c       	mov	r9, r1
     f22:	54 01       	movw	r10, r8
     f24:	2d c0       	rjmp	.+90     	; 0xf80 <ir_decodeMitsubishi+0xac>
     f26:	e8 01       	movw	r28, r16
     f28:	cc 0f       	add	r28, r28
     f2a:	dd 1f       	adc	r29, r29
     f2c:	cc 0d       	add	r28, r12
     f2e:	dd 1d       	adc	r29, r13
     f30:	88 81       	ld	r24, Y
     f32:	99 81       	ldd	r25, Y+1	; 0x01
     f34:	6e e9       	ldi	r22, 0x9E	; 158
     f36:	77 e0       	ldi	r23, 0x07	; 7
     f38:	c4 dc       	rcall	.-1656   	; 0x8c2 <MATCH_MARK>
     f3a:	89 2b       	or	r24, r25
     f3c:	39 f0       	breq	.+14     	; 0xf4c <ir_decodeMitsubishi+0x78>
     f3e:	88 0c       	add	r8, r8
     f40:	99 1c       	adc	r9, r9
     f42:	aa 1c       	adc	r10, r10
     f44:	bb 1c       	adc	r11, r11
     f46:	68 94       	set
     f48:	80 f8       	bld	r8, 0
     f4a:	0c c0       	rjmp	.+24     	; 0xf64 <ir_decodeMitsubishi+0x90>
     f4c:	88 81       	ld	r24, Y
     f4e:	99 81       	ldd	r25, Y+1	; 0x01
     f50:	6e ee       	ldi	r22, 0xEE	; 238
     f52:	72 e0       	ldi	r23, 0x02	; 2
     f54:	b6 dc       	rcall	.-1684   	; 0x8c2 <MATCH_MARK>
     f56:	89 2b       	or	r24, r25
     f58:	09 f4       	brne	.+2      	; 0xf5c <ir_decodeMitsubishi+0x88>
     f5a:	48 c0       	rjmp	.+144    	; 0xfec <ir_decodeMitsubishi+0x118>
     f5c:	88 0c       	add	r8, r8
     f5e:	99 1c       	adc	r9, r9
     f60:	aa 1c       	adc	r10, r10
     f62:	bb 1c       	adc	r11, r11
     f64:	f7 01       	movw	r30, r14
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	ec 0d       	add	r30, r12
     f6c:	fd 1d       	adc	r31, r13
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	6e e5       	ldi	r22, 0x5E	; 94
     f74:	71 e0       	ldi	r23, 0x01	; 1
     f76:	a7 dc       	rcall	.-1714   	; 0x8c6 <MATCH_SPACE>
     f78:	89 2b       	or	r24, r25
     f7a:	71 f0       	breq	.+28     	; 0xf98 <ir_decodeMitsubishi+0xc4>
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	78 01       	movw	r14, r16
     f82:	ff ef       	ldi	r31, 0xFF	; 255
     f84:	ef 1a       	sub	r14, r31
     f86:	ff 0a       	sbc	r15, r31
     f88:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
     f8c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
     f90:	e8 16       	cp	r14, r24
     f92:	f9 06       	cpc	r15, r25
     f94:	40 f2       	brcs	.-112    	; 0xf26 <ir_decodeMitsubishi+0x52>
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <ir_decodeMitsubishi+0xc6>
     f98:	87 01       	movw	r16, r14
     f9a:	01 50       	subi	r16, 0x01	; 1
     f9c:	11 09       	sbc	r17, r1
     f9e:	c8 01       	movw	r24, r16
     fa0:	99 23       	and	r25, r25
     fa2:	0c f4       	brge	.+2      	; 0xfa6 <ir_decodeMitsubishi+0xd2>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	f3 01       	movw	r30, r6
     fac:	91 87       	std	Z+9, r25	; 0x09
     fae:	80 87       	std	Z+8, r24	; 0x08
     fb0:	40 97       	sbiw	r24, 0x10	; 16
     fb2:	34 f4       	brge	.+12     	; 0xfc0 <ir_decodeMitsubishi+0xec>
     fb4:	11 86       	std	Z+9, r1	; 0x09
     fb6:	10 86       	std	Z+8, r1	; 0x08
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	cb 01       	movw	r24, r22
     fbe:	19 c0       	rjmp	.+50     	; 0xff2 <ir_decodeMitsubishi+0x11e>
     fc0:	f3 01       	movw	r30, r6
     fc2:	84 82       	std	Z+4, r8	; 0x04
     fc4:	95 82       	std	Z+5, r9	; 0x05
     fc6:	a6 82       	std	Z+6, r10	; 0x06
     fc8:	b7 82       	std	Z+7, r11	; 0x07
     fca:	8a e0       	ldi	r24, 0x0A	; 10
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <ir_decodeMitsubishi+0x11e>
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	cb 01       	movw	r24, r22
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <ir_decodeMitsubishi+0x11e>
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	cb 01       	movw	r24, r22
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <ir_decodeMitsubishi+0x11e>
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	cb 01       	movw	r24, r22
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	7f 90       	pop	r7
    100c:	6f 90       	pop	r6
    100e:	08 95       	ret

00001010 <ir_decodeRC6>:
    1010:	4f 92       	push	r4
    1012:	5f 92       	push	r5
    1014:	6f 92       	push	r6
    1016:	7f 92       	push	r7
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	00 d0       	rcall	.+0      	; 0x102e <ir_decodeRC6+0x1e>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <ir_decodeRC6+0x20>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3a 83       	std	Y+2, r19	; 0x02
    103a:	29 83       	std	Y+1, r18	; 0x01
    103c:	1c 82       	std	Y+4, r1	; 0x04
    103e:	1b 82       	std	Y+3, r1	; 0x03
    1040:	fc 01       	movw	r30, r24
    1042:	24 85       	ldd	r18, Z+12	; 0x0c
    1044:	35 85       	ldd	r19, Z+13	; 0x0d
    1046:	12 16       	cp	r1, r18
    1048:	13 06       	cpc	r1, r19
    104a:	0c f0       	brlt	.+2      	; 0x104e <ir_decodeRC6+0x3e>
    104c:	aa c0       	rjmp	.+340    	; 0x11a2 <ir_decodeRC6+0x192>
    104e:	8c 01       	movw	r16, r24
    1050:	e2 84       	ldd	r14, Z+10	; 0x0a
    1052:	f3 84       	ldd	r15, Z+11	; 0x0b
    1054:	f7 01       	movw	r30, r14
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	6a e6       	ldi	r22, 0x6A	; 106
    105c:	7a e0       	ldi	r23, 0x0A	; 10
    105e:	31 dc       	rcall	.-1950   	; 0x8c2 <MATCH_MARK>
    1060:	89 2b       	or	r24, r25
    1062:	09 f4       	brne	.+2      	; 0x1066 <ir_decodeRC6+0x56>
    1064:	a2 c0       	rjmp	.+324    	; 0x11aa <ir_decodeRC6+0x19a>
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	f7 01       	movw	r30, r14
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	95 81       	ldd	r25, Z+5	; 0x05
    1074:	69 e7       	ldi	r22, 0x79	; 121
    1076:	73 e0       	ldi	r23, 0x03	; 3
    1078:	26 dc       	rcall	.-1972   	; 0x8c6 <MATCH_SPACE>
    107a:	89 2b       	or	r24, r25
    107c:	09 f4       	brne	.+2      	; 0x1080 <ir_decodeRC6+0x70>
    107e:	99 c0       	rjmp	.+306    	; 0x11b2 <ir_decodeRC6+0x1a2>
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	2c eb       	ldi	r18, 0xBC	; 188
    108a:	31 e0       	ldi	r19, 0x01	; 1
    108c:	ae 01       	movw	r20, r28
    108e:	4d 5f       	subi	r20, 0xFD	; 253
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	be 01       	movw	r22, r28
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	c8 01       	movw	r24, r16
    109a:	f1 da       	rcall	.-2590   	; 0x67e <ir_getRClevel>
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	09 f0       	breq	.+2      	; 0x10a2 <ir_decodeRC6+0x92>
    10a0:	8c c0       	rjmp	.+280    	; 0x11ba <ir_decodeRC6+0x1aa>
    10a2:	2c eb       	ldi	r18, 0xBC	; 188
    10a4:	31 e0       	ldi	r19, 0x01	; 1
    10a6:	ae 01       	movw	r20, r28
    10a8:	4d 5f       	subi	r20, 0xFD	; 253
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	be 01       	movw	r22, r28
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	c8 01       	movw	r24, r16
    10b4:	e4 da       	rcall	.-2616   	; 0x67e <ir_getRClevel>
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f0       	breq	.+2      	; 0x10bc <ir_decodeRC6+0xac>
    10ba:	83 c0       	rjmp	.+262    	; 0x11c2 <ir_decodeRC6+0x1b2>
    10bc:	e1 2c       	mov	r14, r1
    10be:	f1 2c       	mov	r15, r1
    10c0:	41 2c       	mov	r4, r1
    10c2:	51 2c       	mov	r5, r1
    10c4:	32 01       	movw	r6, r4
    10c6:	55 c0       	rjmp	.+170    	; 0x1172 <ir_decodeRC6+0x162>
    10c8:	2c eb       	ldi	r18, 0xBC	; 188
    10ca:	31 e0       	ldi	r19, 0x01	; 1
    10cc:	ae 01       	movw	r20, r28
    10ce:	4d 5f       	subi	r20, 0xFD	; 253
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	be 01       	movw	r22, r28
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	c8 01       	movw	r24, r16
    10da:	d1 da       	rcall	.-2654   	; 0x67e <ir_getRClevel>
    10dc:	5c 01       	movw	r10, r24
    10de:	f3 e0       	ldi	r31, 0x03	; 3
    10e0:	ef 16       	cp	r14, r31
    10e2:	f1 04       	cpc	r15, r1
    10e4:	71 f4       	brne	.+28     	; 0x1102 <ir_decodeRC6+0xf2>
    10e6:	2c eb       	ldi	r18, 0xBC	; 188
    10e8:	31 e0       	ldi	r19, 0x01	; 1
    10ea:	ae 01       	movw	r20, r28
    10ec:	4d 5f       	subi	r20, 0xFD	; 253
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	be 01       	movw	r22, r28
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	c8 01       	movw	r24, r16
    10f8:	c2 da       	rcall	.-2684   	; 0x67e <ir_getRClevel>
    10fa:	a8 16       	cp	r10, r24
    10fc:	b9 06       	cpc	r11, r25
    10fe:	09 f0       	breq	.+2      	; 0x1102 <ir_decodeRC6+0xf2>
    1100:	64 c0       	rjmp	.+200    	; 0x11ca <ir_decodeRC6+0x1ba>
    1102:	2c eb       	ldi	r18, 0xBC	; 188
    1104:	31 e0       	ldi	r19, 0x01	; 1
    1106:	ae 01       	movw	r20, r28
    1108:	4d 5f       	subi	r20, 0xFD	; 253
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	be 01       	movw	r22, r28
    110e:	6f 5f       	subi	r22, 0xFF	; 255
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	c8 01       	movw	r24, r16
    1114:	b4 da       	rcall	.-2712   	; 0x67e <ir_getRClevel>
    1116:	6c 01       	movw	r12, r24
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	e8 16       	cp	r14, r24
    111c:	f1 04       	cpc	r15, r1
    111e:	71 f4       	brne	.+28     	; 0x113c <ir_decodeRC6+0x12c>
    1120:	2c eb       	ldi	r18, 0xBC	; 188
    1122:	31 e0       	ldi	r19, 0x01	; 1
    1124:	ae 01       	movw	r20, r28
    1126:	4d 5f       	subi	r20, 0xFD	; 253
    1128:	5f 4f       	sbci	r21, 0xFF	; 255
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	c8 01       	movw	r24, r16
    1132:	a5 da       	rcall	.-2742   	; 0x67e <ir_getRClevel>
    1134:	c8 16       	cp	r12, r24
    1136:	d9 06       	cpc	r13, r25
    1138:	09 f0       	breq	.+2      	; 0x113c <ir_decodeRC6+0x12c>
    113a:	4b c0       	rjmp	.+150    	; 0x11d2 <ir_decodeRC6+0x1c2>
    113c:	e1 e0       	ldi	r30, 0x01	; 1
    113e:	ae 16       	cp	r10, r30
    1140:	b1 04       	cpc	r11, r1
    1142:	51 f4       	brne	.+20     	; 0x1158 <ir_decodeRC6+0x148>
    1144:	c1 14       	cp	r12, r1
    1146:	d1 04       	cpc	r13, r1
    1148:	39 f4       	brne	.+14     	; 0x1158 <ir_decodeRC6+0x148>
    114a:	44 0c       	add	r4, r4
    114c:	55 1c       	adc	r5, r5
    114e:	66 1c       	adc	r6, r6
    1150:	77 1c       	adc	r7, r7
    1152:	68 94       	set
    1154:	40 f8       	bld	r4, 0
    1156:	0a c0       	rjmp	.+20     	; 0x116c <ir_decodeRC6+0x15c>
    1158:	ab 28       	or	r10, r11
    115a:	f9 f5       	brne	.+126    	; 0x11da <ir_decodeRC6+0x1ca>
    115c:	ca 94       	dec	r12
    115e:	cd 28       	or	r12, r13
    1160:	09 f0       	breq	.+2      	; 0x1164 <ir_decodeRC6+0x154>
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <ir_decodeRC6+0x1d2>
    1164:	44 0c       	add	r4, r4
    1166:	55 1c       	adc	r5, r5
    1168:	66 1c       	adc	r6, r6
    116a:	77 1c       	adc	r7, r7
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	e8 1a       	sub	r14, r24
    1170:	f8 0a       	sbc	r15, r24
    1172:	f8 01       	movw	r30, r16
    1174:	24 85       	ldd	r18, Z+12	; 0x0c
    1176:	35 85       	ldd	r19, Z+13	; 0x0d
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	0c f4       	brge	.+2      	; 0x1184 <ir_decodeRC6+0x174>
    1182:	a2 cf       	rjmp	.-188    	; 0x10c8 <ir_decodeRC6+0xb8>
    1184:	f1 86       	std	Z+9, r15	; 0x09
    1186:	e0 86       	std	Z+8, r14	; 0x08
    1188:	44 82       	std	Z+4, r4	; 0x04
    118a:	55 82       	std	Z+5, r5	; 0x05
    118c:	66 82       	std	Z+6, r6	; 0x06
    118e:	77 82       	std	Z+7, r7	; 0x07
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	23 c0       	rjmp	.+70     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	cb 01       	movw	r24, r22
    11a8:	1f c0       	rjmp	.+62     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	cb 01       	movw	r24, r22
    11b0:	1b c0       	rjmp	.+54     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	cb 01       	movw	r24, r22
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	cb 01       	movw	r24, r22
    11c0:	13 c0       	rjmp	.+38     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	cb 01       	movw	r24, r22
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	cb 01       	movw	r24, r22
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	cb 01       	movw	r24, r22
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <ir_decodeRC6+0x1d8>
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	cb 01       	movw	r24, r22
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <ir_decodeRC6+0x1d8>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	cb 01       	movw	r24, r22
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	bf 90       	pop	r11
    1202:	af 90       	pop	r10
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	08 95       	ret

0000120e <ir_decodePanasonic>:
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	4c 01       	movw	r8, r24
    122c:	fc 01       	movw	r30, r24
    122e:	02 85       	ldd	r16, Z+10	; 0x0a
    1230:	13 85       	ldd	r17, Z+11	; 0x0b
    1232:	f8 01       	movw	r30, r16
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	6e ea       	ldi	r22, 0xAE	; 174
    123a:	7d e0       	ldi	r23, 0x0D	; 13
    123c:	42 db       	rcall	.-2428   	; 0x8c2 <MATCH_MARK>
    123e:	89 2b       	or	r24, r25
    1240:	09 f4       	brne	.+2      	; 0x1244 <ir_decodePanasonic+0x36>
    1242:	9a c0       	rjmp	.+308    	; 0x1378 <ir_decodePanasonic+0x16a>
    1244:	f8 01       	movw	r30, r16
    1246:	84 81       	ldd	r24, Z+4	; 0x04
    1248:	95 81       	ldd	r25, Z+5	; 0x05
    124a:	66 ed       	ldi	r22, 0xD6	; 214
    124c:	76 e0       	ldi	r23, 0x06	; 6
    124e:	39 db       	rcall	.-2446   	; 0x8c2 <MATCH_MARK>
    1250:	89 2b       	or	r24, r25
    1252:	09 f4       	brne	.+2      	; 0x1256 <ir_decodePanasonic+0x48>
    1254:	95 c0       	rjmp	.+298    	; 0x1380 <ir_decodePanasonic+0x172>
    1256:	61 2c       	mov	r6, r1
    1258:	71 2c       	mov	r7, r1
    125a:	c3 e0       	ldi	r28, 0x03	; 3
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	c1 2c       	mov	r12, r1
    1260:	d1 2c       	mov	r13, r1
    1262:	76 01       	movw	r14, r12
    1264:	35 c0       	rjmp	.+106    	; 0x12d0 <ir_decodePanasonic+0xc2>
    1266:	5e 01       	movw	r10, r28
    1268:	ff ef       	ldi	r31, 0xFF	; 255
    126a:	af 1a       	sub	r10, r31
    126c:	bf 0a       	sbc	r11, r31
    126e:	fe 01       	movw	r30, r28
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e0 0f       	add	r30, r16
    1276:	f1 1f       	adc	r31, r17
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	66 ef       	ldi	r22, 0xF6	; 246
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	20 db       	rcall	.-2496   	; 0x8c2 <MATCH_MARK>
    1282:	89 2b       	or	r24, r25
    1284:	09 f4       	brne	.+2      	; 0x1288 <ir_decodePanasonic+0x7a>
    1286:	80 c0       	rjmp	.+256    	; 0x1388 <ir_decodePanasonic+0x17a>
    1288:	aa 0c       	add	r10, r10
    128a:	bb 1c       	adc	r11, r11
    128c:	a0 0e       	add	r10, r16
    128e:	b1 1e       	adc	r11, r17
    1290:	f5 01       	movw	r30, r10
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	6c ed       	ldi	r22, 0xDC	; 220
    1298:	74 e0       	ldi	r23, 0x04	; 4
    129a:	15 db       	rcall	.-2518   	; 0x8c6 <MATCH_SPACE>
    129c:	89 2b       	or	r24, r25
    129e:	39 f0       	breq	.+14     	; 0x12ae <ir_decodePanasonic+0xa0>
    12a0:	cc 0c       	add	r12, r12
    12a2:	dd 1c       	adc	r13, r13
    12a4:	ee 1c       	adc	r14, r14
    12a6:	ff 1c       	adc	r15, r15
    12a8:	68 94       	set
    12aa:	c0 f8       	bld	r12, 0
    12ac:	0d c0       	rjmp	.+26     	; 0x12c8 <ir_decodePanasonic+0xba>
    12ae:	f5 01       	movw	r30, r10
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	60 e9       	ldi	r22, 0x90	; 144
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	06 db       	rcall	.-2548   	; 0x8c6 <MATCH_SPACE>
    12ba:	89 2b       	or	r24, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <ir_decodePanasonic+0xb2>
    12be:	68 c0       	rjmp	.+208    	; 0x1390 <ir_decodePanasonic+0x182>
    12c0:	cc 0c       	add	r12, r12
    12c2:	dd 1c       	adc	r13, r13
    12c4:	ee 1c       	adc	r14, r14
    12c6:	ff 1c       	adc	r15, r15
    12c8:	22 96       	adiw	r28, 0x02	; 2
    12ca:	ff ef       	ldi	r31, 0xFF	; 255
    12cc:	6f 1a       	sub	r6, r31
    12ce:	7f 0a       	sbc	r7, r31
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	68 16       	cp	r6, r24
    12d4:	71 04       	cpc	r7, r1
    12d6:	3c f2       	brlt	.-114    	; 0x1266 <ir_decodePanasonic+0x58>
    12d8:	f4 01       	movw	r30, r8
    12da:	d3 82       	std	Z+3, r13	; 0x03
    12dc:	c2 82       	std	Z+2, r12	; 0x02
    12de:	61 2c       	mov	r6, r1
    12e0:	71 2c       	mov	r7, r1
    12e2:	34 c0       	rjmp	.+104    	; 0x134c <ir_decodePanasonic+0x13e>
    12e4:	5e 01       	movw	r10, r28
    12e6:	ff ef       	ldi	r31, 0xFF	; 255
    12e8:	af 1a       	sub	r10, r31
    12ea:	bf 0a       	sbc	r11, r31
    12ec:	fe 01       	movw	r30, r28
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e0 0f       	add	r30, r16
    12f4:	f1 1f       	adc	r31, r17
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	66 ef       	ldi	r22, 0xF6	; 246
    12fc:	71 e0       	ldi	r23, 0x01	; 1
    12fe:	e1 da       	rcall	.-2622   	; 0x8c2 <MATCH_MARK>
    1300:	89 2b       	or	r24, r25
    1302:	09 f4       	brne	.+2      	; 0x1306 <ir_decodePanasonic+0xf8>
    1304:	49 c0       	rjmp	.+146    	; 0x1398 <ir_decodePanasonic+0x18a>
    1306:	aa 0c       	add	r10, r10
    1308:	bb 1c       	adc	r11, r11
    130a:	a0 0e       	add	r10, r16
    130c:	b1 1e       	adc	r11, r17
    130e:	f5 01       	movw	r30, r10
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	6c ed       	ldi	r22, 0xDC	; 220
    1316:	74 e0       	ldi	r23, 0x04	; 4
    1318:	d6 da       	rcall	.-2644   	; 0x8c6 <MATCH_SPACE>
    131a:	89 2b       	or	r24, r25
    131c:	39 f0       	breq	.+14     	; 0x132c <ir_decodePanasonic+0x11e>
    131e:	cc 0c       	add	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	ee 1c       	adc	r14, r14
    1324:	ff 1c       	adc	r15, r15
    1326:	68 94       	set
    1328:	c0 f8       	bld	r12, 0
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <ir_decodePanasonic+0x136>
    132c:	f5 01       	movw	r30, r10
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	60 e9       	ldi	r22, 0x90	; 144
    1334:	71 e0       	ldi	r23, 0x01	; 1
    1336:	c7 da       	rcall	.-2674   	; 0x8c6 <MATCH_SPACE>
    1338:	89 2b       	or	r24, r25
    133a:	91 f1       	breq	.+100    	; 0x13a0 <ir_decodePanasonic+0x192>
    133c:	cc 0c       	add	r12, r12
    133e:	dd 1c       	adc	r13, r13
    1340:	ee 1c       	adc	r14, r14
    1342:	ff 1c       	adc	r15, r15
    1344:	22 96       	adiw	r28, 0x02	; 2
    1346:	ff ef       	ldi	r31, 0xFF	; 255
    1348:	6f 1a       	sub	r6, r31
    134a:	7f 0a       	sbc	r7, r31
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	68 16       	cp	r6, r24
    1350:	71 04       	cpc	r7, r1
    1352:	44 f2       	brlt	.-112    	; 0x12e4 <ir_decodePanasonic+0xd6>
    1354:	f4 01       	movw	r30, r8
    1356:	c4 82       	std	Z+4, r12	; 0x04
    1358:	d5 82       	std	Z+5, r13	; 0x05
    135a:	e6 82       	std	Z+6, r14	; 0x06
    135c:	f7 82       	std	Z+7, r15	; 0x07
    135e:	87 e0       	ldi	r24, 0x07	; 7
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
    1366:	80 e3       	ldi	r24, 0x30	; 48
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	91 87       	std	Z+9, r25	; 0x09
    136c:	80 87       	std	Z+8, r24	; 0x08
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	17 c0       	rjmp	.+46     	; 0x13a6 <ir_decodePanasonic+0x198>
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	cb 01       	movw	r24, r22
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <ir_decodePanasonic+0x198>
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	cb 01       	movw	r24, r22
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <ir_decodePanasonic+0x198>
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	cb 01       	movw	r24, r22
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <ir_decodePanasonic+0x198>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	cb 01       	movw	r24, r22
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <ir_decodePanasonic+0x198>
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	cb 01       	movw	r24, r22
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <ir_decodePanasonic+0x198>
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	cb 01       	movw	r24, r22
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	08 95       	ret

000013c4 <ir_decodeJVC>:
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	8c 01       	movw	r16, r24
    13e2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
    13e6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
    13ea:	82 97       	sbiw	r24, 0x22	; 34
    13ec:	71 f5       	brne	.+92     	; 0x144a <ir_decodeJVC+0x86>
    13ee:	f8 01       	movw	r30, r16
    13f0:	c2 85       	ldd	r28, Z+10	; 0x0a
    13f2:	d3 85       	ldd	r29, Z+11	; 0x0b
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	68 e5       	ldi	r22, 0x58	; 88
    13fa:	72 e0       	ldi	r23, 0x02	; 2
    13fc:	62 da       	rcall	.-2876   	; 0x8c2 <MATCH_MARK>
    13fe:	89 2b       	or	r24, r25
    1400:	21 f1       	breq	.+72     	; 0x144a <ir_decodeJVC+0x86>
    1402:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <irparams+0xcc>
    1406:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <irparams+0xcd>
    140a:	e1 50       	subi	r30, 0x01	; 1
    140c:	f0 48       	sbci	r31, 0x80	; 128
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ec 0f       	add	r30, r28
    1414:	fd 1f       	adc	r31, r29
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	68 e5       	ldi	r22, 0x58	; 88
    141c:	72 e0       	ldi	r23, 0x02	; 2
    141e:	51 da       	rcall	.-2910   	; 0x8c2 <MATCH_MARK>
    1420:	89 2b       	or	r24, r25
    1422:	99 f0       	breq	.+38     	; 0x144a <ir_decodeJVC+0x86>
    1424:	f8 01       	movw	r30, r16
    1426:	11 86       	std	Z+9, r1	; 0x09
    1428:	10 86       	std	Z+8, r1	; 0x08
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	9f ef       	ldi	r25, 0xFF	; 255
    142e:	dc 01       	movw	r26, r24
    1430:	84 83       	std	Z+4, r24	; 0x04
    1432:	95 83       	std	Z+5, r25	; 0x05
    1434:	a6 83       	std	Z+6, r26	; 0x06
    1436:	b7 83       	std	Z+7, r27	; 0x07
    1438:	88 e0       	ldi	r24, 0x08	; 8
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	90 c0       	rjmp	.+288    	; 0x156a <ir_decodeJVC+0x1a6>
    144a:	f8 01       	movw	r30, r16
    144c:	c2 84       	ldd	r12, Z+10	; 0x0a
    144e:	d3 84       	ldd	r13, Z+11	; 0x0b
    1450:	f6 01       	movw	r30, r12
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	60 e4       	ldi	r22, 0x40	; 64
    1458:	7f e1       	ldi	r23, 0x1F	; 31
    145a:	33 da       	rcall	.-2970   	; 0x8c2 <MATCH_MARK>
    145c:	89 2b       	or	r24, r25
    145e:	09 f4       	brne	.+2      	; 0x1462 <ir_decodeJVC+0x9e>
    1460:	6d c0       	rjmp	.+218    	; 0x153c <ir_decodeJVC+0x178>
    1462:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
    1466:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
    146a:	81 97       	sbiw	r24, 0x21	; 33
    146c:	08 f4       	brcc	.+2      	; 0x1470 <ir_decodeJVC+0xac>
    146e:	6a c0       	rjmp	.+212    	; 0x1544 <ir_decodeJVC+0x180>
    1470:	f6 01       	movw	r30, r12
    1472:	84 81       	ldd	r24, Z+4	; 0x04
    1474:	95 81       	ldd	r25, Z+5	; 0x05
    1476:	60 ea       	ldi	r22, 0xA0	; 160
    1478:	7f e0       	ldi	r23, 0x0F	; 15
    147a:	25 da       	rcall	.-2998   	; 0x8c6 <MATCH_SPACE>
    147c:	89 2b       	or	r24, r25
    147e:	09 f4       	brne	.+2      	; 0x1482 <ir_decodeJVC+0xbe>
    1480:	65 c0       	rjmp	.+202    	; 0x154c <ir_decodeJVC+0x188>
    1482:	c3 e0       	ldi	r28, 0x03	; 3
    1484:	d0 e0       	ldi	r29, 0x00	; 0
    1486:	81 2c       	mov	r8, r1
    1488:	91 2c       	mov	r9, r1
    148a:	54 01       	movw	r10, r8
    148c:	61 2c       	mov	r6, r1
    148e:	71 2c       	mov	r7, r1
    1490:	34 c0       	rjmp	.+104    	; 0x14fa <ir_decodeJVC+0x136>
    1492:	fe 01       	movw	r30, r28
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	ec 0d       	add	r30, r12
    149a:	fd 1d       	adc	r31, r13
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	68 e5       	ldi	r22, 0x58	; 88
    14a2:	72 e0       	ldi	r23, 0x02	; 2
    14a4:	0e da       	rcall	.-3044   	; 0x8c2 <MATCH_MARK>
    14a6:	89 2b       	or	r24, r25
    14a8:	09 f4       	brne	.+2      	; 0x14ac <ir_decodeJVC+0xe8>
    14aa:	54 c0       	rjmp	.+168    	; 0x1554 <ir_decodeJVC+0x190>
    14ac:	7e 01       	movw	r14, r28
    14ae:	ff ef       	ldi	r31, 0xFF	; 255
    14b0:	ef 1a       	sub	r14, r31
    14b2:	ff 0a       	sbc	r15, r31
    14b4:	ee 0c       	add	r14, r14
    14b6:	ff 1c       	adc	r15, r15
    14b8:	ec 0c       	add	r14, r12
    14ba:	fd 1c       	adc	r15, r13
    14bc:	f7 01       	movw	r30, r14
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	60 e4       	ldi	r22, 0x40	; 64
    14c4:	76 e0       	ldi	r23, 0x06	; 6
    14c6:	ff d9       	rcall	.-3074   	; 0x8c6 <MATCH_SPACE>
    14c8:	89 2b       	or	r24, r25
    14ca:	39 f0       	breq	.+14     	; 0x14da <ir_decodeJVC+0x116>
    14cc:	88 0c       	add	r8, r8
    14ce:	99 1c       	adc	r9, r9
    14d0:	aa 1c       	adc	r10, r10
    14d2:	bb 1c       	adc	r11, r11
    14d4:	68 94       	set
    14d6:	80 f8       	bld	r8, 0
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <ir_decodeJVC+0x12e>
    14da:	f7 01       	movw	r30, r14
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	66 e2       	ldi	r22, 0x26	; 38
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	f0 d9       	rcall	.-3104   	; 0x8c6 <MATCH_SPACE>
    14e6:	89 2b       	or	r24, r25
    14e8:	c9 f1       	breq	.+114    	; 0x155c <ir_decodeJVC+0x198>
    14ea:	88 0c       	add	r8, r8
    14ec:	99 1c       	adc	r9, r9
    14ee:	aa 1c       	adc	r10, r10
    14f0:	bb 1c       	adc	r11, r11
    14f2:	22 96       	adiw	r28, 0x02	; 2
    14f4:	ff ef       	ldi	r31, 0xFF	; 255
    14f6:	6f 1a       	sub	r6, r31
    14f8:	7f 0a       	sbc	r7, r31
    14fa:	80 e1       	ldi	r24, 0x10	; 16
    14fc:	68 16       	cp	r6, r24
    14fe:	71 04       	cpc	r7, r1
    1500:	44 f2       	brlt	.-112    	; 0x1492 <ir_decodeJVC+0xce>
    1502:	cc 0f       	add	r28, r28
    1504:	dd 1f       	adc	r29, r29
    1506:	cc 0d       	add	r28, r12
    1508:	dd 1d       	adc	r29, r13
    150a:	88 81       	ld	r24, Y
    150c:	99 81       	ldd	r25, Y+1	; 0x01
    150e:	68 e5       	ldi	r22, 0x58	; 88
    1510:	72 e0       	ldi	r23, 0x02	; 2
    1512:	d7 d9       	rcall	.-3154   	; 0x8c2 <MATCH_MARK>
    1514:	89 2b       	or	r24, r25
    1516:	31 f1       	breq	.+76     	; 0x1564 <ir_decodeJVC+0x1a0>
    1518:	80 e1       	ldi	r24, 0x10	; 16
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	f8 01       	movw	r30, r16
    151e:	91 87       	std	Z+9, r25	; 0x09
    1520:	80 87       	std	Z+8, r24	; 0x08
    1522:	84 82       	std	Z+4, r8	; 0x04
    1524:	95 82       	std	Z+5, r9	; 0x05
    1526:	a6 82       	std	Z+6, r10	; 0x06
    1528:	b7 82       	std	Z+7, r11	; 0x07
    152a:	88 e0       	ldi	r24, 0x08	; 8
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	17 c0       	rjmp	.+46     	; 0x156a <ir_decodeJVC+0x1a6>
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	cb 01       	movw	r24, r22
    1542:	13 c0       	rjmp	.+38     	; 0x156a <ir_decodeJVC+0x1a6>
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	cb 01       	movw	r24, r22
    154a:	0f c0       	rjmp	.+30     	; 0x156a <ir_decodeJVC+0x1a6>
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	cb 01       	movw	r24, r22
    1552:	0b c0       	rjmp	.+22     	; 0x156a <ir_decodeJVC+0x1a6>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	cb 01       	movw	r24, r22
    155a:	07 c0       	rjmp	.+14     	; 0x156a <ir_decodeJVC+0x1a6>
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	cb 01       	movw	r24, r22
    1562:	03 c0       	rjmp	.+6      	; 0x156a <ir_decodeJVC+0x1a6>
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	cb 01       	movw	r24, r22
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	9f 90       	pop	r9
    1580:	8f 90       	pop	r8
    1582:	7f 90       	pop	r7
    1584:	6f 90       	pop	r6
    1586:	08 95       	ret

00001588 <ir_enableIRIn>:
    1588:	e5 e6       	ldi	r30, 0x65	; 101
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	11 82       	std	Z+1, r1	; 0x01
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	80 83       	st	Z, r24
    1592:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <irparams+0xcd>
    1596:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <irparams+0xcc>
    159a:	8a b1       	in	r24, 0x0a	; 10
    159c:	8f 77       	andi	r24, 0x7F	; 127
    159e:	8a b9       	out	0x0a, r24	; 10
    15a0:	f8 94       	cli
    15a2:	0e 94 37 02 	call	0x46e	; 0x46e <ir_timerCfgNorm>
    15a6:	0e 94 35 02 	call	0x46a	; 0x46a <ir_timerRst>
    15aa:	78 94       	sei
    15ac:	08 95       	ret

000015ae <ir_interruptService>:
{
  unsigned char irdata = 0;

  // timer is used for sampling IR signal

    ir_timerRst();
    15ae:	0e 94 35 02 	call	0x46a	; 0x46a <ir_timerRst>

    //irdata = (unsigned char)ir_digitalRead(irparams.recvpin);
	irdata = (IR_RECEIVE_PINx & (1<<IR_RECEIVE_PIN))>>IR_RECEIVE_PIN;
    15b2:	89 b1       	in	r24, 0x09	; 9
    15b4:	28 2f       	mov	r18, r24
    15b6:	22 1f       	adc	r18, r18
    15b8:	22 27       	eor	r18, r18
    15ba:	22 1f       	adc	r18, r18

    irparams.timer++; // One more 50us tick
    15bc:	e5 e6       	ldi	r30, 0x65	; 101
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	93 83       	std	Z+3, r25	; 0x03
    15c8:	82 83       	std	Z+2, r24	; 0x02
    if (irparams.rawlen >= RAWBUF) {
    15ca:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <irparams+0xcc>
    15ce:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <irparams+0xcd>
    15d2:	84 36       	cpi	r24, 0x64	; 100
    15d4:	91 05       	cpc	r25, r1
    15d6:	18 f0       	brcs	.+6      	; 0x15de <ir_interruptService+0x30>
        // Buffer overflow
        irparams.rcvstate = STATE_STOP;
    15d8:	85 e0       	ldi	r24, 0x05	; 5
    15da:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <irparams>
    }
    switch(irparams.rcvstate) {
    15de:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <irparams>
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	d1 f1       	breq	.+116    	; 0x165a <ir_interruptService+0xac>
    15e6:	18 f4       	brcc	.+6      	; 0x15ee <ir_interruptService+0x40>
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	41 f0       	breq	.+16     	; 0x15fc <ir_interruptService+0x4e>
    15ec:	08 95       	ret
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <ir_interruptService+0x46>
    15f2:	53 c0       	rjmp	.+166    	; 0x169a <ir_interruptService+0xec>
    15f4:	85 30       	cpi	r24, 0x05	; 5
    15f6:	09 f4       	brne	.+2      	; 0x15fa <ir_interruptService+0x4c>
    15f8:	7b c0       	rjmp	.+246    	; 0x16f0 <ir_interruptService+0x142>
    15fa:	08 95       	ret
      case STATE_IDLE: // In the middle of a gap
        if (irdata == MARK) {
    15fc:	21 30       	cpi	r18, 0x01	; 1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <ir_interruptService+0x54>
    1600:	7d c0       	rjmp	.+250    	; 0x16fc <ir_interruptService+0x14e>
        if (irparams.timer < GAP_TICKS) {
    1602:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <irparams+0x2>
    1606:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <irparams+0x3>
    160a:	84 36       	cpi	r24, 0x64	; 100
    160c:	91 05       	cpc	r25, r1
    160e:	28 f4       	brcc	.+10     	; 0x161a <ir_interruptService+0x6c>
            // Not big enough to be a gap.
            irparams.timer = 0;
    1610:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irparams+0x3>
    1614:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <irparams+0x2>
    1618:	08 95       	ret
        } 
        else {
            // gap just ended, record duration and start recording transmission
            irparams.rawlen = 0;
    161a:	a5 e6       	ldi	r26, 0x65	; 101
    161c:	b1 e0       	ldi	r27, 0x01	; 1
    161e:	e1 e3       	ldi	r30, 0x31	; 49
    1620:	f2 e0       	ldi	r31, 0x02	; 2
    1622:	11 82       	std	Z+1, r1	; 0x01
    1624:	10 82       	st	Z, r1
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	9c 01       	movw	r18, r24
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	31 83       	std	Z+1, r19	; 0x01
    1632:	20 83       	st	Z, r18
    1634:	12 96       	adiw	r26, 0x02	; 2
    1636:	2d 91       	ld	r18, X+
    1638:	3c 91       	ld	r19, X
    163a:	13 97       	sbiw	r26, 0x03	; 3
    163c:	fc 01       	movw	r30, r24
    163e:	32 96       	adiw	r30, 0x02	; 2
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	eb 59       	subi	r30, 0x9B	; 155
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
    1648:	31 83       	std	Z+1, r19	; 0x01
    164a:	20 83       	st	Z, r18
            irparams.timer = 0;
    164c:	13 96       	adiw	r26, 0x03	; 3
    164e:	1c 92       	st	X, r1
    1650:	1e 92       	st	-X, r1
    1652:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	8c 93       	st	X, r24
    1658:	08 95       	ret
        }
        }
        break;
      case STATE_MARK: // timing MARK
        if (irdata == SPACE) {   // MARK ended, record time
    165a:	21 11       	cpse	r18, r1
    165c:	4f c0       	rjmp	.+158    	; 0x16fc <ir_interruptService+0x14e>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    165e:	a5 e6       	ldi	r26, 0x65	; 101
    1660:	b1 e0       	ldi	r27, 0x01	; 1
    1662:	e1 e3       	ldi	r30, 0x31	; 49
    1664:	f2 e0       	ldi	r31, 0x02	; 2
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	9c 01       	movw	r18, r24
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	31 83       	std	Z+1, r19	; 0x01
    1672:	20 83       	st	Z, r18
    1674:	12 96       	adiw	r26, 0x02	; 2
    1676:	2d 91       	ld	r18, X+
    1678:	3c 91       	ld	r19, X
    167a:	13 97       	sbiw	r26, 0x03	; 3
    167c:	fc 01       	movw	r30, r24
    167e:	32 96       	adiw	r30, 0x02	; 2
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	eb 59       	subi	r30, 0x9B	; 155
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	31 83       	std	Z+1, r19	; 0x01
    168a:	20 83       	st	Z, r18
            irparams.timer = 0;
    168c:	13 96       	adiw	r26, 0x03	; 3
    168e:	1c 92       	st	X, r1
    1690:	1e 92       	st	-X, r1
    1692:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_SPACE;
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	8c 93       	st	X, r24
    1698:	08 95       	ret
        }
        break;
      case STATE_SPACE: // timing SPACE
        if (irdata == MARK) { // SPACE just ended, record it
    169a:	21 30       	cpi	r18, 0x01	; 1
    169c:	f1 f4       	brne	.+60     	; 0x16da <ir_interruptService+0x12c>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    169e:	a5 e6       	ldi	r26, 0x65	; 101
    16a0:	b1 e0       	ldi	r27, 0x01	; 1
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f2 e0       	ldi	r31, 0x02	; 2
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	9c 01       	movw	r18, r24
    16ac:	2f 5f       	subi	r18, 0xFF	; 255
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	31 83       	std	Z+1, r19	; 0x01
    16b2:	20 83       	st	Z, r18
    16b4:	12 96       	adiw	r26, 0x02	; 2
    16b6:	2d 91       	ld	r18, X+
    16b8:	3c 91       	ld	r19, X
    16ba:	13 97       	sbiw	r26, 0x03	; 3
    16bc:	fc 01       	movw	r30, r24
    16be:	32 96       	adiw	r30, 0x02	; 2
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	eb 59       	subi	r30, 0x9B	; 155
    16c6:	fe 4f       	sbci	r31, 0xFE	; 254
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
            irparams.timer = 0;
    16cc:	13 96       	adiw	r26, 0x03	; 3
    16ce:	1c 92       	st	X, r1
    16d0:	1e 92       	st	-X, r1
    16d2:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	8c 93       	st	X, r24
    16d8:	08 95       	ret
        } 
        else { // SPACE
          if (irparams.timer > GAP_TICKS) {
    16da:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <irparams+0x2>
    16de:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <irparams+0x3>
    16e2:	85 36       	cpi	r24, 0x65	; 101
    16e4:	91 05       	cpc	r25, r1
    16e6:	50 f0       	brcs	.+20     	; 0x16fc <ir_interruptService+0x14e>
            // big SPACE, indicates gap between codes
            // Mark current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting space width
            irparams.rcvstate = STATE_STOP;
    16e8:	85 e0       	ldi	r24, 0x05	; 5
    16ea:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <irparams>
    16ee:	08 95       	ret
          } 
        }
        break;
     case STATE_STOP: // waiting, measuring gap
        if (irdata == MARK) { // reset gap timer
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	21 f4       	brne	.+8      	; 0x16fc <ir_interruptService+0x14e>
           irparams.timer = 0;
    16f4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <irparams+0x3>
    16f8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <irparams+0x2>
    16fc:	08 95       	ret

000016fe <ir_resume>:
        }
    }*/
}

void ir_resume(void) {
  irparams.rcvstate = STATE_IDLE;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <irparams>
  irparams.rawlen = 0;
    1704:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <irparams+0xcd>
    1708:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <irparams+0xcc>
    170c:	08 95       	ret

0000170e <ir_decode>:


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
  results->rawlen = irparams.rawlen;
    1712:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <irparams+0xcc>
    1716:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <irparams+0xcd>
    171a:	fc 01       	movw	r30, r24
    171c:	35 87       	std	Z+13, r19	; 0x0d
    171e:	24 87       	std	Z+12, r18	; 0x0c
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
    1720:	29 e6       	ldi	r18, 0x69	; 105
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	33 87       	std	Z+11, r19	; 0x0b
    1726:	22 87       	std	Z+10, r18	; 0x0a
  if (irparams.rcvstate != STATE_STOP) {
    1728:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <irparams>
    172c:	25 30       	cpi	r18, 0x05	; 5
    172e:	09 f0       	breq	.+2      	; 0x1732 <ir_decode+0x24>
    1730:	45 c0       	rjmp	.+138    	; 0x17bc <ir_decode+0xae>
    1732:	ec 01       	movw	r28, r24
    return ERR;
  }
  if (ir_decodeSigma(results)) {
    1734:	ca d8       	rcall	.-3692   	; 0x8ca <ir_decodeSigma>
    1736:	67 2b       	or	r22, r23
    1738:	68 2b       	or	r22, r24
    173a:	69 2b       	or	r22, r25
    173c:	09 f0       	breq	.+2      	; 0x1740 <ir_decode+0x32>
    173e:	41 c0       	rjmp	.+130    	; 0x17c2 <ir_decode+0xb4>
     return DECODED;
  }
  if (ir_decodeNEC(results)) {
    1740:	ce 01       	movw	r24, r28
    1742:	9b d9       	rcall	.-3274   	; 0xa7a <ir_decodeNEC>
    1744:	67 2b       	or	r22, r23
    1746:	68 2b       	or	r22, r24
    1748:	69 2b       	or	r22, r25
    174a:	09 f0       	breq	.+2      	; 0x174e <ir_decode+0x40>
    174c:	3d c0       	rjmp	.+122    	; 0x17c8 <ir_decode+0xba>
    return DECODED;
  }
  if (ir_decodeSony(results)) {
    174e:	ce 01       	movw	r24, r28
    1750:	5a da       	rcall	.-2892   	; 0xc06 <ir_decodeSony>
    1752:	67 2b       	or	r22, r23
    1754:	68 2b       	or	r22, r24
    1756:	69 2b       	or	r22, r25
    1758:	09 f0       	breq	.+2      	; 0x175c <ir_decode+0x4e>
    175a:	39 c0       	rjmp	.+114    	; 0x17ce <ir_decode+0xc0>
    return DECODED;
  }
  if (ir_decodeSanyo(results)) {
    175c:	ce 01       	movw	r24, r28
    175e:	00 db       	rcall	.-2560   	; 0xd60 <ir_decodeSanyo>
    1760:	67 2b       	or	r22, r23
    1762:	68 2b       	or	r22, r24
    1764:	69 2b       	or	r22, r25
    1766:	b1 f5       	brne	.+108    	; 0x17d4 <ir_decode+0xc6>
    return DECODED;
  }
  if (ir_decodeMitsubishi(results)) {
    1768:	ce 01       	movw	r24, r28
    176a:	b4 db       	rcall	.-2200   	; 0xed4 <ir_decodeMitsubishi>
    176c:	67 2b       	or	r22, r23
    176e:	68 2b       	or	r22, r24
    1770:	69 2b       	or	r22, r25
    1772:	99 f5       	brne	.+102    	; 0x17da <ir_decode+0xcc>
    1774:	ce 01       	movw	r24, r28
    return DECODED;
  }
  if (ir_decodeRC5(results)) {
    1776:	0e 94 a7 03 	call	0x74e	; 0x74e <ir_decodeRC5>
    177a:	67 2b       	or	r22, r23
    177c:	68 2b       	or	r22, r24
    177e:	69 2b       	or	r22, r25
    1780:	79 f5       	brne	.+94     	; 0x17e0 <ir_decode+0xd2>
    return DECODED;
  }
  if (ir_decodeRC6(results)) {
    1782:	ce 01       	movw	r24, r28
    1784:	45 dc       	rcall	.-1910   	; 0x1010 <ir_decodeRC6>
    1786:	67 2b       	or	r22, r23
    1788:	68 2b       	or	r22, r24
    178a:	69 2b       	or	r22, r25
    178c:	61 f5       	brne	.+88     	; 0x17e6 <ir_decode+0xd8>
    return DECODED;
  }
  if (ir_decodePanasonic(results)) {
    178e:	ce 01       	movw	r24, r28
    1790:	3e dd       	rcall	.-1412   	; 0x120e <ir_decodePanasonic>
    1792:	67 2b       	or	r22, r23
    1794:	68 2b       	or	r22, r24
    1796:	69 2b       	or	r22, r25
    1798:	49 f5       	brne	.+82     	; 0x17ec <ir_decode+0xde>
     return DECODED;
  }
  if (ir_decodeJVC(results)) {
    179a:	ce 01       	movw	r24, r28
    179c:	13 de       	rcall	.-986    	; 0x13c4 <ir_decodeJVC>
    179e:	67 2b       	or	r22, r23
    17a0:	68 2b       	or	r22, r24
    17a2:	69 2b       	or	r22, r25
    17a4:	31 f5       	brne	.+76     	; 0x17f2 <ir_decode+0xe4>
  }

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    17a6:	ce 01       	movw	r24, r28
    17a8:	0e 94 8e 02 	call	0x51c	; 0x51c <ir_decodeHash>
    17ac:	67 2b       	or	r22, r23
    17ae:	68 2b       	or	r22, r24
    17b0:	69 2b       	or	r22, r25
    17b2:	11 f5       	brne	.+68     	; 0x17f8 <ir_decode+0xea>
    return DECODED;
  }
  // Throw away and start over
  ir_resume();
    17b4:	a4 df       	rcall	.-184    	; 0x16fe <ir_resume>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
  return ERR;
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	20 c0       	rjmp	.+64     	; 0x17fc <ir_decode+0xee>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
  results->rawlen = irparams.rawlen;
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
  if (irparams.rcvstate != STATE_STOP) {
    return ERR;
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	1d c0       	rjmp	.+58     	; 0x17fc <ir_decode+0xee>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSigma(results)) {
     return DECODED;
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	1a c0       	rjmp	.+52     	; 0x17fc <ir_decode+0xee>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeNEC(results)) {
    return DECODED;
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	17 c0       	rjmp	.+46     	; 0x17fc <ir_decode+0xee>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSony(results)) {
    return DECODED;
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <ir_decode+0xee>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSanyo(results)) {
    return DECODED;
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <ir_decode+0xee>
    17da:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeMitsubishi(results)) {
    return DECODED;
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <ir_decode+0xee>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC5(results)) {
    return DECODED;
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <ir_decode+0xee>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC6(results)) {
    return DECODED;
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <ir_decode+0xee>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodePanasonic(results)) {
     return DECODED;
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <ir_decode+0xee>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeJVC(results)) {
     return DECODED;
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <ir_decode+0xee>
    17f8:	81 e0       	ldi	r24, 0x01	; 1

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    return DECODED;
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	df 91       	pop	r29
  }
  // Throw away and start over
  ir_resume();
  return ERR;
}
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <lcd_read>:
    1802:	cf 93       	push	r28

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
    1804:	88 23       	and	r24, r24
    1806:	31 f0       	breq	.+12     	; 0x1814 <lcd_read+0x12>
    1808:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    180c:	81 60       	ori	r24, 0x01	; 1
    180e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1812:	05 c0       	rjmp	.+10     	; 0x181e <lcd_read+0x1c>
    1814:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1818:	8e 7f       	andi	r24, 0xFE	; 254
    181a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    181e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1828:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    182c:	87 e0       	ldi	r24, 0x07	; 7
    182e:	ee d1       	rcall	.+988    	; 0x1c0c <pcf8574_setoutput>
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	87 e0       	ldi	r24, 0x07	; 7
    1834:	37 d2       	rcall	.+1134   	; 0x1ca4 <pcf8574_setoutputpinhigh>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <lcd_read+0x36>
    1838:	64 e0       	ldi	r22, 0x04	; 4
    183a:	87 e0       	ldi	r24, 0x07	; 7
    183c:	4e d2       	rcall	.+1180   	; 0x1cda <pcf8574_getinputpin>
    183e:	88 23       	and	r24, r24
    1840:	11 f0       	breq	.+4      	; 0x1846 <lcd_read+0x44>
    1842:	c0 e0       	ldi	r28, 0x00	; 0
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <lcd_read+0x46>
    1846:	c0 e1       	ldi	r28, 0x10	; 16
    1848:	65 e0       	ldi	r22, 0x05	; 5
    184a:	87 e0       	ldi	r24, 0x07	; 7
    184c:	46 d2       	rcall	.+1164   	; 0x1cda <pcf8574_getinputpin>
    184e:	81 11       	cpse	r24, r1
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <lcd_read+0x52>
    1852:	c0 62       	ori	r28, 0x20	; 32
    1854:	66 e0       	ldi	r22, 0x06	; 6
    1856:	87 e0       	ldi	r24, 0x07	; 7
    1858:	40 d2       	rcall	.+1152   	; 0x1cda <pcf8574_getinputpin>
    185a:	81 11       	cpse	r24, r1
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <lcd_read+0x5e>
    185e:	c0 64       	ori	r28, 0x40	; 64
    1860:	67 e0       	ldi	r22, 0x07	; 7
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	3a d2       	rcall	.+1140   	; 0x1cda <pcf8574_getinputpin>
    1866:	81 11       	cpse	r24, r1
    1868:	01 c0       	rjmp	.+2      	; 0x186c <lcd_read+0x6a>
    186a:	c0 68       	ori	r28, 0x80	; 128
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	87 e0       	ldi	r24, 0x07	; 7
    1870:	1c d2       	rcall	.+1080   	; 0x1caa <pcf8574_setoutputpinlow>
    1872:	00 c0       	rjmp	.+0      	; 0x1874 <lcd_read+0x72>
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	87 e0       	ldi	r24, 0x07	; 7
    1878:	15 d2       	rcall	.+1066   	; 0x1ca4 <pcf8574_setoutputpinhigh>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <lcd_read+0x7a>
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	87 e0       	ldi	r24, 0x07	; 7
    1880:	2c d2       	rcall	.+1112   	; 0x1cda <pcf8574_getinputpin>
    1882:	81 11       	cpse	r24, r1
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <lcd_read+0x86>
    1886:	c1 60       	ori	r28, 0x01	; 1
    1888:	65 e0       	ldi	r22, 0x05	; 5
    188a:	87 e0       	ldi	r24, 0x07	; 7
    188c:	26 d2       	rcall	.+1100   	; 0x1cda <pcf8574_getinputpin>
    188e:	81 11       	cpse	r24, r1
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <lcd_read+0x92>
    1892:	c2 60       	ori	r28, 0x02	; 2
    1894:	66 e0       	ldi	r22, 0x06	; 6
    1896:	87 e0       	ldi	r24, 0x07	; 7
    1898:	20 d2       	rcall	.+1088   	; 0x1cda <pcf8574_getinputpin>
    189a:	81 11       	cpse	r24, r1
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <lcd_read+0x9e>
    189e:	c4 60       	ori	r28, 0x04	; 4
    18a0:	67 e0       	ldi	r22, 0x07	; 7
    18a2:	87 e0       	ldi	r24, 0x07	; 7
    18a4:	1a d2       	rcall	.+1076   	; 0x1cda <pcf8574_getinputpin>
    18a6:	81 11       	cpse	r24, r1
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <lcd_read+0xaa>
    18aa:	c8 60       	ori	r28, 0x08	; 8
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	87 e0       	ldi	r24, 0x07	; 7
    18b0:	fc d1       	rcall	.+1016   	; 0x1caa <pcf8574_setoutputpinlow>
    18b2:	8c 2f       	mov	r24, r28
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <lcd_waitbusy>:
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	a3 df       	rcall	.-186    	; 0x1802 <lcd_read>
    18bc:	88 23       	and	r24, r24
    18be:	e4 f3       	brlt	.-8      	; 0x18b8 <lcd_waitbusy>
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <lcd_waitbusy+0xc>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	9b cf       	rjmp	.-202    	; 0x1802 <lcd_read>
    18cc:	08 95       	ret

000018ce <toggle_e>:
    18ce:	62 e0       	ldi	r22, 0x02	; 2
    18d0:	87 e0       	ldi	r24, 0x07	; 7
    18d2:	e8 d1       	rcall	.+976    	; 0x1ca4 <pcf8574_setoutputpinhigh>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <toggle_e+0x8>
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	e7 c1       	rjmp	.+974    	; 0x1caa <pcf8574_setoutputpinlow>
    18dc:	08 95       	ret

000018de <lcd_write>:
    18de:	cf 93       	push	r28
    18e0:	c8 2f       	mov	r28, r24
    18e2:	66 23       	and	r22, r22
    18e4:	31 f0       	breq	.+12     	; 0x18f2 <lcd_write+0x14>
    18e6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    18ea:	81 60       	ori	r24, 0x01	; 1
    18ec:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <lcd_write+0x1e>
    18f2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    18f6:	8e 7f       	andi	r24, 0xFE	; 254
    18f8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    18fc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1900:	8d 7f       	andi	r24, 0xFD	; 253
    1902:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1906:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    190a:	87 e0       	ldi	r24, 0x07	; 7
    190c:	7f d1       	rcall	.+766    	; 0x1c0c <pcf8574_setoutput>
    190e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1912:	8f 77       	andi	r24, 0x7F	; 127
    1914:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1918:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    191c:	8f 7b       	andi	r24, 0xBF	; 191
    191e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1922:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1926:	8f 7d       	andi	r24, 0xDF	; 223
    1928:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    192c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1930:	8f 7e       	andi	r24, 0xEF	; 239
    1932:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1936:	cc 23       	and	r28, r28
    1938:	2c f4       	brge	.+10     	; 0x1944 <lcd_write+0x66>
    193a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1944:	c6 ff       	sbrs	r28, 6
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <lcd_write+0x74>
    1948:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1952:	c5 ff       	sbrs	r28, 5
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <lcd_write+0x82>
    1956:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    195a:	80 62       	ori	r24, 0x20	; 32
    195c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1960:	c4 ff       	sbrs	r28, 4
    1962:	05 c0       	rjmp	.+10     	; 0x196e <lcd_write+0x90>
    1964:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1968:	80 61       	ori	r24, 0x10	; 16
    196a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    196e:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    1972:	87 e0       	ldi	r24, 0x07	; 7
    1974:	4b d1       	rcall	.+662    	; 0x1c0c <pcf8574_setoutput>
    1976:	ab df       	rcall	.-170    	; 0x18ce <toggle_e>
    1978:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    197c:	8f 77       	andi	r24, 0x7F	; 127
    197e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1982:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    198c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1990:	8f 7d       	andi	r24, 0xDF	; 223
    1992:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1996:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19a0:	c3 ff       	sbrs	r28, 3
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <lcd_write+0xd0>
    19a4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19ae:	c2 ff       	sbrs	r28, 2
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <lcd_write+0xde>
    19b2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19b6:	80 64       	ori	r24, 0x40	; 64
    19b8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19bc:	c1 ff       	sbrs	r28, 1
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <lcd_write+0xec>
    19c0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19c4:	80 62       	ori	r24, 0x20	; 32
    19c6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19ca:	c0 ff       	sbrs	r28, 0
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <lcd_write+0xfa>
    19ce:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19d2:	80 61       	ori	r24, 0x10	; 16
    19d4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19d8:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    19dc:	87 e0       	ldi	r24, 0x07	; 7
    19de:	16 d1       	rcall	.+556    	; 0x1c0c <pcf8574_setoutput>
    19e0:	76 df       	rcall	.-276    	; 0x18ce <toggle_e>
    19e2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19e6:	80 61       	ori	r24, 0x10	; 16
    19e8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19ec:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19f0:	80 62       	ori	r24, 0x20	; 32
    19f2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    19f6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    19fa:	80 64       	ori	r24, 0x40	; 64
    19fc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1a00:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1a04:	80 68       	ori	r24, 0x80	; 128
    1a06:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1a0a:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    1a0e:	87 e0       	ldi	r24, 0x07	; 7
    1a10:	fd d0       	rcall	.+506    	; 0x1c0c <pcf8574_setoutput>
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <lcd_command>:
    1a16:	cf 93       	push	r28
    1a18:	c8 2f       	mov	r28, r24
    1a1a:	4e df       	rcall	.-356    	; 0x18b8 <lcd_waitbusy>
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	8c 2f       	mov	r24, r28
    1a20:	5e df       	rcall	.-324    	; 0x18de <lcd_write>
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <lcd_gotoxy>:
    1a26:	61 11       	cpse	r22, r1
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <lcd_gotoxy+0xa>
    1a2a:	80 58       	subi	r24, 0x80	; 128
    1a2c:	f4 cf       	rjmp	.-24     	; 0x1a16 <lcd_command>
    1a2e:	08 95       	ret
    1a30:	80 54       	subi	r24, 0x40	; 64
    1a32:	f1 cf       	rjmp	.-30     	; 0x1a16 <lcd_command>
    1a34:	08 95       	ret

00001a36 <lcd_clrscr>:
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	ee cf       	rjmp	.-36     	; 0x1a16 <lcd_command>
    1a3a:	08 95       	ret

00001a3c <lcd_led>:
    1a3c:	88 23       	and	r24, r24
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <lcd_led+0x10>
    1a40:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1a44:	87 7f       	andi	r24, 0xF7	; 247
    1a46:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <lcd_led+0x1a>
    1a4c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1a50:	88 60       	ori	r24, 0x08	; 8
    1a52:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1a56:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    1a5a:	87 e0       	ldi	r24, 0x07	; 7
    1a5c:	d7 c0       	rjmp	.+430    	; 0x1c0c <pcf8574_setoutput>
    1a5e:	08 95       	ret

00001a60 <lcd_home>:
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	d9 cf       	rjmp	.-78     	; 0x1a16 <lcd_command>
    1a64:	08 95       	ret

00001a66 <lcd_putc>:
    1a66:	cf 93       	push	r28
    1a68:	c8 2f       	mov	r28, r24
    1a6a:	26 df       	rcall	.-436    	; 0x18b8 <lcd_waitbusy>
    1a6c:	ca 30       	cpi	r28, 0x0A	; 10
    1a6e:	41 f4       	brne	.+16     	; 0x1a80 <lcd_putc+0x1a>
    1a70:	80 34       	cpi	r24, 0x40	; 64
    1a72:	10 f4       	brcc	.+4      	; 0x1a78 <lcd_putc+0x12>
    1a74:	80 e4       	ldi	r24, 0x40	; 64
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <lcd_putc+0x14>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	80 58       	subi	r24, 0x80	; 128
    1a7c:	cc df       	rcall	.-104    	; 0x1a16 <lcd_command>
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <lcd_putc+0x20>
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	8c 2f       	mov	r24, r28
    1a84:	2c df       	rcall	.-424    	; 0x18de <lcd_write>
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <lcd_puts>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	fc 01       	movw	r30, r24
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <lcd_puts+0xc>
    1a92:	e9 df       	rcall	.-46     	; 0x1a66 <lcd_putc>
    1a94:	fe 01       	movw	r30, r28
    1a96:	ef 01       	movw	r28, r30
    1a98:	21 96       	adiw	r28, 0x01	; 1
    1a9a:	80 81       	ld	r24, Z
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	f9 cf       	rjmp	.-14     	; 0x1a92 <lcd_puts+0x8>
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	18 2f       	mov	r17, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
    1aae:	9d d0       	rcall	.+314    	; 0x1bea <pcf8574_init>
	#endif

	dataport = 0;
    1ab0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <dataport>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1ab4:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    1ab8:	87 e0       	ldi	r24, 0x07	; 7
    1aba:	a8 d0       	rcall	.+336    	; 0x1c0c <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	9d e7       	ldi	r25, 0x7D	; 125
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

	delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    1ac4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1ac8:	80 62       	ori	r24, 0x20	; 32
    1aca:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    1ace:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1ad2:	80 61       	ori	r24, 0x10	; 16
    1ad4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1ad8:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    1adc:	87 e0       	ldi	r24, 0x07	; 7

    lcd_e_toggle();
    1ade:	96 d0       	rcall	.+300    	; 0x1c0c <pcf8574_setoutput>
    1ae0:	f6 de       	rcall	.-532    	; 0x18ce <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	97 e2       	ldi	r25, 0x27	; 39
    1ae6:	01 97       	sbiw	r24, 0x01	; 1

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */ 
    lcd_e_toggle();      
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <lcd_init+0x40>
    1aea:	f1 de       	rcall	.-542    	; 0x18ce <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1aec:	c0 e8       	ldi	r28, 0x80	; 128
    1aee:	d0 e0       	ldi	r29, 0x00	; 0
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <lcd_init+0x4c>
    1af6:	eb de       	rcall	.-554    	; 0x18ce <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <lcd_init+0x54>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
    1afe:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <dataport>
    1b02:	8f 7e       	andi	r24, 0xEF	; 239
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1b04:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <dataport>
    1b08:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <dataport>
    lcd_e_toggle();
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1b0e:	7e d0       	rcall	.+252    	; 0x1c0c <pcf8574_setoutput>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1b10:	de de       	rcall	.-580    	; 0x18ce <toggle_e>
    1b12:	21 97       	sbiw	r28, 0x01	; 1

    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <lcd_init+0x6c>
    1b16:	88 e2       	ldi	r24, 0x28	; 40
    1b18:	7e df       	rcall	.-260    	; 0x1a16 <lcd_command>
    lcd_clrscr();                           /* display clear                */
    1b1a:	88 e0       	ldi	r24, 0x08	; 8
    1b1c:	7c df       	rcall	.-264    	; 0x1a16 <lcd_command>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1b1e:	8b df       	rcall	.-234    	; 0x1a36 <lcd_clrscr>
    1b20:	86 e0       	ldi	r24, 0x06	; 6
    1b22:	79 df       	rcall	.-270    	; 0x1a16 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    1b24:	81 2f       	mov	r24, r17
    1b26:	77 df       	rcall	.-274    	; 0x1a16 <lcd_command>
    1b28:	df 91       	pop	r29

}/* lcd_init */
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	08 95       	ret

00001b30 <main>:
#include "lcdpcf8574.h"



int main(void)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <main+0x6>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	uint16_t  keyboardRef;
	DDRD |= 1<<6;
    1b3a:	8a b1       	in	r24, 0x0a	; 10
    1b3c:	80 64       	ori	r24, 0x40	; 64
    1b3e:	8a b9       	out	0x0a, r24	; 10
	initSysTick();
    1b40:	e4 d0       	rcall	.+456    	; 0x1d0a <initSysTick>
	sei();
    1b42:	78 94       	sei
	lcd_init(LCD_DISP_ON);
    1b44:	8c e0       	ldi	r24, 0x0C	; 12
    1b46:	af df       	rcall	.-162    	; 0x1aa6 <lcd_init>
	lcd_led(0);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	78 df       	rcall	.-272    	; 0x1a3c <lcd_led>
    1b4c:	81 ee       	ldi	r24, 0xE1	; 225
	
	updatePtr = updateMain;
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <updatePtr+0x1>
    1b54:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <updatePtr>
	
	
	marqueTime16(&keyboardRef);
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	ed d0       	rcall	.+474    	; 0x1d38 <marqueTime16>
    1b5e:	0e 94 b3 00 	call	0x166	; 0x166 <processKeyboard>
	while(1)
	{
		//if(elapsedTime16(&keyboardRef)>2) // 20ms
		//{
			processKeyboard();
    1b62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ChangedScreen>
		//	marqueTime16(&keyboardRef);
		//}
		if(ChangedScreen)
    1b66:	88 23       	and	r24, r24
    1b68:	59 f0       	breq	.+22     	; 0x1b80 <main+0x50>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
		{
			Refresh=1;
    1b6c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Refresh>
    1b70:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <updatePtr>
			updatePtr();
    1b74:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <updatePtr+0x1>
    1b78:	09 95       	icall
    1b7a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <ChangedScreen>
			ChangedScreen=0;
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <main+0x5a>
    1b80:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <updatePtr>
		}
		else
			updatePtr();
    1b84:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <updatePtr+0x1>
    1b88:	09 95       	icall
    1b8a:	0e 94 ce 01 	call	0x39c	; 0x39c <render>
		render();
    1b8e:	0e 94 8e 00 	call	0x11c	; 0x11c <clearKeys>
		clearKeys();
    1b92:	e5 cf       	rjmp	.-54     	; 0x1b5e <main+0x2e>

00001b94 <__vector_14>:
	}
    1b94:	1f 92       	push	r1
	
	
}

ISR(TIMER0_COMPA_vect)
{
    1b96:	0f 92       	push	r0
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	0f 92       	push	r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	2f 93       	push	r18
    1ba0:	3f 93       	push	r19
    1ba2:	4f 93       	push	r20
    1ba4:	5f 93       	push	r21
    1ba6:	6f 93       	push	r22
    1ba8:	7f 93       	push	r23
    1baa:	8f 93       	push	r24
    1bac:	9f 93       	push	r25
    1bae:	af 93       	push	r26
    1bb0:	bf 93       	push	r27
    1bb2:	ef 93       	push	r30
    1bb4:	ff 93       	push	r31
	switch(Timer0Mode)
    1bb6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <Timer0Mode>
    1bba:	88 23       	and	r24, r24
    1bbc:	21 f0       	breq	.+8      	; 0x1bc6 <__vector_14+0x32>
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	19 f4       	brne	.+6      	; 0x1bc8 <__vector_14+0x34>
	{
		case TIMER0_RECV:
			ir_interruptService();
    1bc2:	f5 dc       	rcall	.-1558   	; 0x15ae <ir_interruptService>
			break;
		case TIMER0_SYSTICK:
			incSysTick();
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <__vector_14+0x34>
    1bc6:	ae d0       	rcall	.+348    	; 0x1d24 <incSysTick>
			break;
		default:
			break;			
	}
}
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	9f 91       	pop	r25
    1bd2:	8f 91       	pop	r24
    1bd4:	7f 91       	pop	r23
    1bd6:	6f 91       	pop	r22
    1bd8:	5f 91       	pop	r21
    1bda:	4f 91       	pop	r20
    1bdc:	3f 91       	pop	r19
    1bde:	2f 91       	pop	r18
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f 90       	pop	r0
    1be6:	1f 90       	pop	r1
    1be8:	18 95       	reti

00001bea <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
    1bea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_init>
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	8a 95       	dec	r24
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <pcf8574_init+0x6>
    1bf4:	00 00       	nop
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <pcf8574_init+0x1c>
    1bfa:	e8 2f       	mov	r30, r24
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	ed 5c       	subi	r30, 0xCD	; 205
    1c00:	fd 4f       	sbci	r31, 0xFD	; 253
    1c02:	10 82       	st	Z, r1
    1c04:	8f 5f       	subi	r24, 0xFF	; 255
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	c0 f3       	brcs	.-16     	; 0x1bfa <pcf8574_init+0x10>
    1c0a:	08 95       	ret

00001c0c <pcf8574_setoutput>:
    1c0c:	cf 93       	push	r28
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	88 f4       	brcc	.+34     	; 0x1c34 <pcf8574_setoutput+0x28>
    1c12:	c6 2f       	mov	r28, r22
    1c14:	e8 2f       	mov	r30, r24
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	ed 5c       	subi	r30, 0xCD	; 205
    1c1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c1c:	60 83       	st	Z, r22
    1c1e:	80 5e       	subi	r24, 0xE0	; 224
    1c20:	88 0f       	add	r24, r24
    1c22:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <i2c_start>
    1c26:	8c 2f       	mov	r24, r28
    1c28:	0e 94 19 02 	call	0x432	; 0x432 <i2c_write>
    1c2c:	0e 94 11 02 	call	0x422	; 0x422 <i2c_stop>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <pcf8574_setoutput+0x2a>
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	58 f5       	brcc	.+86     	; 0x1c98 <pcf8574_setoutputpin+0x5e>
    1c42:	68 30       	cpi	r22, 0x08	; 8
    1c44:	58 f5       	brcc	.+86     	; 0x1c9c <pcf8574_setoutputpin+0x62>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	ed 5c       	subi	r30, 0xCD	; 205
    1c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c50:	90 81       	ld	r25, Z
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
    1c52:	44 23       	and	r20, r20
    1c54:	49 f0       	breq	.+18     	; 0x1c68 <pcf8574_setoutputpin+0x2e>
    1c56:	c1 e0       	ldi	r28, 0x01	; 1
    1c58:	d0 e0       	ldi	r29, 0x00	; 0
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <pcf8574_setoutputpin+0x26>
    1c5c:	cc 0f       	add	r28, r28
    1c5e:	dd 1f       	adc	r29, r29
    1c60:	6a 95       	dec	r22
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <pcf8574_setoutputpin+0x22>
    1c64:	c9 2b       	or	r28, r25
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <pcf8574_setoutputpin+0x40>
    1c68:	c1 e0       	ldi	r28, 0x01	; 1
    1c6a:	d0 e0       	ldi	r29, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <pcf8574_setoutputpin+0x38>
    1c6e:	cc 0f       	add	r28, r28
    1c70:	dd 1f       	adc	r29, r29
    1c72:	6a 95       	dec	r22
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <pcf8574_setoutputpin+0x34>
    1c76:	c0 95       	com	r28
    1c78:	c9 23       	and	r28, r25
	    pcf8574_pinstatus[deviceid] = b;
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	ed 5c       	subi	r30, 0xCD	; 205
    1c7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c80:	c0 83       	st	Z, r28
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
    1c82:	80 5e       	subi	r24, 0xE0	; 224
    1c84:	88 0f       	add	r24, r24
    1c86:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <i2c_start>
		i2c_write(b);
    1c8a:	8c 2f       	mov	r24, r28
    1c8c:	0e 94 19 02 	call	0x432	; 0x432 <i2c_write>
		i2c_stop();
    1c90:	0e 94 11 02 	call	0x422	; 0x422 <i2c_stop>
		return 0;
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <pcf8574_setoutputpin+0x64>
	}
	return -1;
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <pcf8574_setoutputpin+0x64>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	c9 cf       	rjmp	.-110    	; 0x1c3a <pcf8574_setoutputpin>
}
    1ca8:	08 95       	ret

00001caa <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	c6 cf       	rjmp	.-116    	; 0x1c3a <pcf8574_setoutputpin>
}
    1cae:	08 95       	ret

00001cb0 <pcf8574_getinput>:


/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
    1cb0:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
    1cb2:	88 30       	cpi	r24, 0x08	; 8
    1cb4:	70 f4       	brcc	.+28     	; 0x1cd2 <pcf8574_getinput+0x22>
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	80 96       	adiw	r24, 0x20	; 32
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	81 60       	ori	r24, 0x01	; 1
    1cc0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <i2c_start>
		data = ~i2c_readNak();
    1cc4:	0e 94 2b 02 	call	0x456	; 0x456 <i2c_readNak>
    1cc8:	c8 2f       	mov	r28, r24
    1cca:	c0 95       	com	r28
		i2c_stop();
    1ccc:	0e 94 11 02 	call	0x422	; 0x422 <i2c_stop>
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <pcf8574_getinput+0x24>

/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
	int8_t data = -1;
    1cd2:	cf ef       	ldi	r28, 0xFF	; 255
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
		data = ~i2c_readNak();
		i2c_stop();
	}
	return data;
}
    1cd4:	8c 2f       	mov	r24, r28
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <pcf8574_getinputpin>:

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
    1cda:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    1cdc:	88 30       	cpi	r24, 0x08	; 8
    1cde:	80 f4       	brcc	.+32     	; 0x1d00 <pcf8574_getinputpin+0x26>
    1ce0:	68 30       	cpi	r22, 0x08	; 8
    1ce2:	80 f4       	brcc	.+32     	; 0x1d04 <pcf8574_getinputpin+0x2a>
    1ce4:	c6 2f       	mov	r28, r22
		data = pcf8574_getinput(deviceid);
    1ce6:	e4 df       	rcall	.-56     	; 0x1cb0 <pcf8574_getinput>
		if(data != -1) {
    1ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cea:	69 f0       	breq	.+26     	; 0x1d06 <pcf8574_getinputpin+0x2c>
			data = (data >> pin) & 0b00000001;
    1cec:	08 2e       	mov	r0, r24
    1cee:	00 0c       	add	r0, r0
    1cf0:	99 0b       	sbc	r25, r25
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <pcf8574_getinputpin+0x1e>
    1cf4:	95 95       	asr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	ca 95       	dec	r28
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <pcf8574_getinputpin+0x1a>
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <pcf8574_getinputpin+0x2c>

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <pcf8574_getinputpin+0x2c>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
		if(data != -1) {
			data = (data >> pin) & 0b00000001;
		}
	}
	return data;
}
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <initSysTick>:

volatile uint16_t SysTick = 0;

void initSysTick()
{
	TIMSK0=0b00000000;
    1d0a:	ee e6       	ldi	r30, 0x6E	; 110
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	10 82       	st	Z, r1
	Timer0Mode = TIMER0_SYSTICK;
    1d10:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <Timer0Mode>
	OCR0A=78; // division par 78
    1d14:	8e e4       	ldi	r24, 0x4E	; 78
    1d16:	87 bd       	out	0x27, r24	; 39
	TCCR0A=0b00000010;
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0b00000101; // /1024
    1d1c:	95 e0       	ldi	r25, 0x05	; 5
    1d1e:	95 bd       	out	0x25, r25	; 37
	TIMSK0=0b00000010;
    1d20:	80 83       	st	Z, r24
    1d22:	08 95       	ret

00001d24 <incSysTick>:
	// Génère une interruption toutes les 9.98 ms
}
void incSysTick()
{
	SysTick++;
    1d24:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <SysTick>
    1d28:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <SysTick+0x1>
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <SysTick+0x1>
    1d32:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <SysTick>
    1d36:	08 95       	ret

00001d38 <marqueTime16>:
}
void marqueTime16(uint16_t *ref)
{
	*ref=SysTick;
    1d38:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <SysTick>
    1d3c:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <SysTick+0x1>
    1d40:	fc 01       	movw	r30, r24
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	20 83       	st	Z, r18
    1d46:	08 95       	ret

00001d48 <__subsf3>:
    1d48:	50 58       	subi	r21, 0x80	; 128

00001d4a <__addsf3>:
    1d4a:	bb 27       	eor	r27, r27
    1d4c:	aa 27       	eor	r26, r26
    1d4e:	0e d0       	rcall	.+28     	; 0x1d6c <__addsf3x>
    1d50:	75 c1       	rjmp	.+746    	; 0x203c <__fp_round>
    1d52:	66 d1       	rcall	.+716    	; 0x2020 <__fp_pscA>
    1d54:	30 f0       	brcs	.+12     	; 0x1d62 <__addsf3+0x18>
    1d56:	6b d1       	rcall	.+726    	; 0x202e <__fp_pscB>
    1d58:	20 f0       	brcs	.+8      	; 0x1d62 <__addsf3+0x18>
    1d5a:	31 f4       	brne	.+12     	; 0x1d68 <__addsf3+0x1e>
    1d5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__addsf3+0x1a>
    1d60:	1e f4       	brtc	.+6      	; 0x1d68 <__addsf3+0x1e>
    1d62:	5b c1       	rjmp	.+694    	; 0x201a <__fp_nan>
    1d64:	0e f4       	brtc	.+2      	; 0x1d68 <__addsf3+0x1e>
    1d66:	e0 95       	com	r30
    1d68:	e7 fb       	bst	r30, 7
    1d6a:	51 c1       	rjmp	.+674    	; 0x200e <__fp_inf>

00001d6c <__addsf3x>:
    1d6c:	e9 2f       	mov	r30, r25
    1d6e:	77 d1       	rcall	.+750    	; 0x205e <__fp_split3>
    1d70:	80 f3       	brcs	.-32     	; 0x1d52 <__addsf3+0x8>
    1d72:	ba 17       	cp	r27, r26
    1d74:	62 07       	cpc	r22, r18
    1d76:	73 07       	cpc	r23, r19
    1d78:	84 07       	cpc	r24, r20
    1d7a:	95 07       	cpc	r25, r21
    1d7c:	18 f0       	brcs	.+6      	; 0x1d84 <__addsf3x+0x18>
    1d7e:	71 f4       	brne	.+28     	; 0x1d9c <__addsf3x+0x30>
    1d80:	9e f5       	brtc	.+102    	; 0x1de8 <__addsf3x+0x7c>
    1d82:	8f c1       	rjmp	.+798    	; 0x20a2 <__fp_zero>
    1d84:	0e f4       	brtc	.+2      	; 0x1d88 <__addsf3x+0x1c>
    1d86:	e0 95       	com	r30
    1d88:	0b 2e       	mov	r0, r27
    1d8a:	ba 2f       	mov	r27, r26
    1d8c:	a0 2d       	mov	r26, r0
    1d8e:	0b 01       	movw	r0, r22
    1d90:	b9 01       	movw	r22, r18
    1d92:	90 01       	movw	r18, r0
    1d94:	0c 01       	movw	r0, r24
    1d96:	ca 01       	movw	r24, r20
    1d98:	a0 01       	movw	r20, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	ff 27       	eor	r31, r31
    1d9e:	59 1b       	sub	r21, r25
    1da0:	99 f0       	breq	.+38     	; 0x1dc8 <__addsf3x+0x5c>
    1da2:	59 3f       	cpi	r21, 0xF9	; 249
    1da4:	50 f4       	brcc	.+20     	; 0x1dba <__addsf3x+0x4e>
    1da6:	50 3e       	cpi	r21, 0xE0	; 224
    1da8:	68 f1       	brcs	.+90     	; 0x1e04 <__addsf3x+0x98>
    1daa:	1a 16       	cp	r1, r26
    1dac:	f0 40       	sbci	r31, 0x00	; 0
    1dae:	a2 2f       	mov	r26, r18
    1db0:	23 2f       	mov	r18, r19
    1db2:	34 2f       	mov	r19, r20
    1db4:	44 27       	eor	r20, r20
    1db6:	58 5f       	subi	r21, 0xF8	; 248
    1db8:	f3 cf       	rjmp	.-26     	; 0x1da0 <__addsf3x+0x34>
    1dba:	46 95       	lsr	r20
    1dbc:	37 95       	ror	r19
    1dbe:	27 95       	ror	r18
    1dc0:	a7 95       	ror	r26
    1dc2:	f0 40       	sbci	r31, 0x00	; 0
    1dc4:	53 95       	inc	r21
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <__addsf3x+0x4e>
    1dc8:	7e f4       	brtc	.+30     	; 0x1de8 <__addsf3x+0x7c>
    1dca:	1f 16       	cp	r1, r31
    1dcc:	ba 0b       	sbc	r27, r26
    1dce:	62 0b       	sbc	r22, r18
    1dd0:	73 0b       	sbc	r23, r19
    1dd2:	84 0b       	sbc	r24, r20
    1dd4:	ba f0       	brmi	.+46     	; 0x1e04 <__addsf3x+0x98>
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	a1 f0       	breq	.+40     	; 0x1e02 <__addsf3x+0x96>
    1dda:	ff 0f       	add	r31, r31
    1ddc:	bb 1f       	adc	r27, r27
    1dde:	66 1f       	adc	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	c2 f7       	brpl	.-16     	; 0x1dd6 <__addsf3x+0x6a>
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <__addsf3x+0x98>
    1de8:	ba 0f       	add	r27, r26
    1dea:	62 1f       	adc	r22, r18
    1dec:	73 1f       	adc	r23, r19
    1dee:	84 1f       	adc	r24, r20
    1df0:	48 f4       	brcc	.+18     	; 0x1e04 <__addsf3x+0x98>
    1df2:	87 95       	ror	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	b7 95       	ror	r27
    1dfa:	f7 95       	ror	r31
    1dfc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <__addsf3x+0x96>
    1e00:	b3 cf       	rjmp	.-154    	; 0x1d68 <__addsf3+0x1e>
    1e02:	93 95       	inc	r25
    1e04:	88 0f       	add	r24, r24
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <__addsf3x+0x9e>
    1e08:	99 27       	eor	r25, r25
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	97 95       	ror	r25
    1e0e:	87 95       	ror	r24
    1e10:	08 95       	ret

00001e12 <__cmpsf2>:
    1e12:	d9 d0       	rcall	.+434    	; 0x1fc6 <__fp_cmp>
    1e14:	08 f4       	brcc	.+2      	; 0x1e18 <__cmpsf2+0x6>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	08 95       	ret

00001e1a <__divsf3>:
    1e1a:	0c d0       	rcall	.+24     	; 0x1e34 <__divsf3x>
    1e1c:	0f c1       	rjmp	.+542    	; 0x203c <__fp_round>
    1e1e:	07 d1       	rcall	.+526    	; 0x202e <__fp_pscB>
    1e20:	40 f0       	brcs	.+16     	; 0x1e32 <__divsf3+0x18>
    1e22:	fe d0       	rcall	.+508    	; 0x2020 <__fp_pscA>
    1e24:	30 f0       	brcs	.+12     	; 0x1e32 <__divsf3+0x18>
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <__divsf3+0x16>
    1e28:	5f 3f       	cpi	r21, 0xFF	; 255
    1e2a:	19 f0       	breq	.+6      	; 0x1e32 <__divsf3+0x18>
    1e2c:	f0 c0       	rjmp	.+480    	; 0x200e <__fp_inf>
    1e2e:	51 11       	cpse	r21, r1
    1e30:	39 c1       	rjmp	.+626    	; 0x20a4 <__fp_szero>
    1e32:	f3 c0       	rjmp	.+486    	; 0x201a <__fp_nan>

00001e34 <__divsf3x>:
    1e34:	14 d1       	rcall	.+552    	; 0x205e <__fp_split3>
    1e36:	98 f3       	brcs	.-26     	; 0x1e1e <__divsf3+0x4>

00001e38 <__divsf3_pse>:
    1e38:	99 23       	and	r25, r25
    1e3a:	c9 f3       	breq	.-14     	; 0x1e2e <__divsf3+0x14>
    1e3c:	55 23       	and	r21, r21
    1e3e:	b1 f3       	breq	.-20     	; 0x1e2c <__divsf3+0x12>
    1e40:	95 1b       	sub	r25, r21
    1e42:	55 0b       	sbc	r21, r21
    1e44:	bb 27       	eor	r27, r27
    1e46:	aa 27       	eor	r26, r26
    1e48:	62 17       	cp	r22, r18
    1e4a:	73 07       	cpc	r23, r19
    1e4c:	84 07       	cpc	r24, r20
    1e4e:	38 f0       	brcs	.+14     	; 0x1e5e <__divsf3_pse+0x26>
    1e50:	9f 5f       	subi	r25, 0xFF	; 255
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	44 1f       	adc	r20, r20
    1e5a:	aa 1f       	adc	r26, r26
    1e5c:	a9 f3       	breq	.-22     	; 0x1e48 <__divsf3_pse+0x10>
    1e5e:	33 d0       	rcall	.+102    	; 0x1ec6 <__divsf3_pse+0x8e>
    1e60:	0e 2e       	mov	r0, r30
    1e62:	3a f0       	brmi	.+14     	; 0x1e72 <__divsf3_pse+0x3a>
    1e64:	e0 e8       	ldi	r30, 0x80	; 128
    1e66:	30 d0       	rcall	.+96     	; 0x1ec8 <__divsf3_pse+0x90>
    1e68:	91 50       	subi	r25, 0x01	; 1
    1e6a:	50 40       	sbci	r21, 0x00	; 0
    1e6c:	e6 95       	lsr	r30
    1e6e:	00 1c       	adc	r0, r0
    1e70:	ca f7       	brpl	.-14     	; 0x1e64 <__divsf3_pse+0x2c>
    1e72:	29 d0       	rcall	.+82     	; 0x1ec6 <__divsf3_pse+0x8e>
    1e74:	fe 2f       	mov	r31, r30
    1e76:	27 d0       	rcall	.+78     	; 0x1ec6 <__divsf3_pse+0x8e>
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	26 17       	cp	r18, r22
    1e82:	37 07       	cpc	r19, r23
    1e84:	48 07       	cpc	r20, r24
    1e86:	ab 07       	cpc	r26, r27
    1e88:	b0 e8       	ldi	r27, 0x80	; 128
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <__divsf3_pse+0x56>
    1e8c:	bb 0b       	sbc	r27, r27
    1e8e:	80 2d       	mov	r24, r0
    1e90:	bf 01       	movw	r22, r30
    1e92:	ff 27       	eor	r31, r31
    1e94:	93 58       	subi	r25, 0x83	; 131
    1e96:	5f 4f       	sbci	r21, 0xFF	; 255
    1e98:	2a f0       	brmi	.+10     	; 0x1ea4 <__divsf3_pse+0x6c>
    1e9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9c:	51 05       	cpc	r21, r1
    1e9e:	68 f0       	brcs	.+26     	; 0x1eba <__divsf3_pse+0x82>
    1ea0:	b6 c0       	rjmp	.+364    	; 0x200e <__fp_inf>
    1ea2:	00 c1       	rjmp	.+512    	; 0x20a4 <__fp_szero>
    1ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea6:	ec f3       	brlt	.-6      	; 0x1ea2 <__divsf3_pse+0x6a>
    1ea8:	98 3e       	cpi	r25, 0xE8	; 232
    1eaa:	dc f3       	brlt	.-10     	; 0x1ea2 <__divsf3_pse+0x6a>
    1eac:	86 95       	lsr	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	b7 95       	ror	r27
    1eb4:	f7 95       	ror	r31
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
    1eb8:	c9 f7       	brne	.-14     	; 0x1eac <__divsf3_pse+0x74>
    1eba:	88 0f       	add	r24, r24
    1ebc:	91 1d       	adc	r25, r1
    1ebe:	96 95       	lsr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	97 f9       	bld	r25, 7
    1ec4:	08 95       	ret
    1ec6:	e1 e0       	ldi	r30, 0x01	; 1
    1ec8:	66 0f       	add	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	62 17       	cp	r22, r18
    1ed2:	73 07       	cpc	r23, r19
    1ed4:	84 07       	cpc	r24, r20
    1ed6:	ba 07       	cpc	r27, r26
    1ed8:	20 f0       	brcs	.+8      	; 0x1ee2 <__divsf3_pse+0xaa>
    1eda:	62 1b       	sub	r22, r18
    1edc:	73 0b       	sbc	r23, r19
    1ede:	84 0b       	sbc	r24, r20
    1ee0:	ba 0b       	sbc	r27, r26
    1ee2:	ee 1f       	adc	r30, r30
    1ee4:	88 f7       	brcc	.-30     	; 0x1ec8 <__divsf3_pse+0x90>
    1ee6:	e0 95       	com	r30
    1ee8:	08 95       	ret

00001eea <__fixsfsi>:
    1eea:	04 d0       	rcall	.+8      	; 0x1ef4 <__fixunssfsi>
    1eec:	68 94       	set
    1eee:	b1 11       	cpse	r27, r1
    1ef0:	d9 c0       	rjmp	.+434    	; 0x20a4 <__fp_szero>
    1ef2:	08 95       	ret

00001ef4 <__fixunssfsi>:
    1ef4:	bc d0       	rcall	.+376    	; 0x206e <__fp_splitA>
    1ef6:	88 f0       	brcs	.+34     	; 0x1f1a <__fixunssfsi+0x26>
    1ef8:	9f 57       	subi	r25, 0x7F	; 127
    1efa:	90 f0       	brcs	.+36     	; 0x1f20 <__fixunssfsi+0x2c>
    1efc:	b9 2f       	mov	r27, r25
    1efe:	99 27       	eor	r25, r25
    1f00:	b7 51       	subi	r27, 0x17	; 23
    1f02:	a0 f0       	brcs	.+40     	; 0x1f2c <__fixunssfsi+0x38>
    1f04:	d1 f0       	breq	.+52     	; 0x1f3a <__fixunssfsi+0x46>
    1f06:	66 0f       	add	r22, r22
    1f08:	77 1f       	adc	r23, r23
    1f0a:	88 1f       	adc	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	1a f0       	brmi	.+6      	; 0x1f16 <__fixunssfsi+0x22>
    1f10:	ba 95       	dec	r27
    1f12:	c9 f7       	brne	.-14     	; 0x1f06 <__fixunssfsi+0x12>
    1f14:	12 c0       	rjmp	.+36     	; 0x1f3a <__fixunssfsi+0x46>
    1f16:	b1 30       	cpi	r27, 0x01	; 1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <__fixunssfsi+0x46>
    1f1a:	c3 d0       	rcall	.+390    	; 0x20a2 <__fp_zero>
    1f1c:	b1 e0       	ldi	r27, 0x01	; 1
    1f1e:	08 95       	ret
    1f20:	c0 c0       	rjmp	.+384    	; 0x20a2 <__fp_zero>
    1f22:	67 2f       	mov	r22, r23
    1f24:	78 2f       	mov	r23, r24
    1f26:	88 27       	eor	r24, r24
    1f28:	b8 5f       	subi	r27, 0xF8	; 248
    1f2a:	39 f0       	breq	.+14     	; 0x1f3a <__fixunssfsi+0x46>
    1f2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2e:	cc f3       	brlt	.-14     	; 0x1f22 <__fixunssfsi+0x2e>
    1f30:	86 95       	lsr	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b3 95       	inc	r27
    1f38:	d9 f7       	brne	.-10     	; 0x1f30 <__fixunssfsi+0x3c>
    1f3a:	3e f4       	brtc	.+14     	; 0x1f4a <__fixunssfsi+0x56>
    1f3c:	90 95       	com	r25
    1f3e:	80 95       	com	r24
    1f40:	70 95       	com	r23
    1f42:	61 95       	neg	r22
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	8f 4f       	sbci	r24, 0xFF	; 255
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	08 95       	ret

00001f4c <__floatunsisf>:
    1f4c:	e8 94       	clt
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <__floatsisf+0x12>

00001f50 <__floatsisf>:
    1f50:	97 fb       	bst	r25, 7
    1f52:	3e f4       	brtc	.+14     	; 0x1f62 <__floatsisf+0x12>
    1f54:	90 95       	com	r25
    1f56:	80 95       	com	r24
    1f58:	70 95       	com	r23
    1f5a:	61 95       	neg	r22
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	99 23       	and	r25, r25
    1f64:	a9 f0       	breq	.+42     	; 0x1f90 <__floatsisf+0x40>
    1f66:	f9 2f       	mov	r31, r25
    1f68:	96 e9       	ldi	r25, 0x96	; 150
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	93 95       	inc	r25
    1f6e:	f6 95       	lsr	r31
    1f70:	87 95       	ror	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b7 95       	ror	r27
    1f78:	f1 11       	cpse	r31, r1
    1f7a:	f8 cf       	rjmp	.-16     	; 0x1f6c <__floatsisf+0x1c>
    1f7c:	fa f4       	brpl	.+62     	; 0x1fbc <__floatsisf+0x6c>
    1f7e:	bb 0f       	add	r27, r27
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <__floatsisf+0x36>
    1f82:	60 ff       	sbrs	r22, 0
    1f84:	1b c0       	rjmp	.+54     	; 0x1fbc <__floatsisf+0x6c>
    1f86:	6f 5f       	subi	r22, 0xFF	; 255
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <__floatsisf+0x6c>
    1f90:	88 23       	and	r24, r24
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <__floatsisf+0x48>
    1f94:	96 e9       	ldi	r25, 0x96	; 150
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <__floatsisf+0x6a>
    1f98:	77 23       	and	r23, r23
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <__floatsisf+0x54>
    1f9c:	9e e8       	ldi	r25, 0x8E	; 142
    1f9e:	87 2f       	mov	r24, r23
    1fa0:	76 2f       	mov	r23, r22
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__floatsisf+0x5e>
    1fa4:	66 23       	and	r22, r22
    1fa6:	71 f0       	breq	.+28     	; 0x1fc4 <__floatsisf+0x74>
    1fa8:	96 e8       	ldi	r25, 0x86	; 134
    1faa:	86 2f       	mov	r24, r22
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	2a f0       	brmi	.+10     	; 0x1fbc <__floatsisf+0x6c>
    1fb2:	9a 95       	dec	r25
    1fb4:	66 0f       	add	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	da f7       	brpl	.-10     	; 0x1fb2 <__floatsisf+0x62>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <__fp_cmp>:
    1fc6:	99 0f       	add	r25, r25
    1fc8:	00 08       	sbc	r0, r0
    1fca:	55 0f       	add	r21, r21
    1fcc:	aa 0b       	sbc	r26, r26
    1fce:	e0 e8       	ldi	r30, 0x80	; 128
    1fd0:	fe ef       	ldi	r31, 0xFE	; 254
    1fd2:	16 16       	cp	r1, r22
    1fd4:	17 06       	cpc	r1, r23
    1fd6:	e8 07       	cpc	r30, r24
    1fd8:	f9 07       	cpc	r31, r25
    1fda:	c0 f0       	brcs	.+48     	; 0x200c <__fp_cmp+0x46>
    1fdc:	12 16       	cp	r1, r18
    1fde:	13 06       	cpc	r1, r19
    1fe0:	e4 07       	cpc	r30, r20
    1fe2:	f5 07       	cpc	r31, r21
    1fe4:	98 f0       	brcs	.+38     	; 0x200c <__fp_cmp+0x46>
    1fe6:	62 1b       	sub	r22, r18
    1fe8:	73 0b       	sbc	r23, r19
    1fea:	84 0b       	sbc	r24, r20
    1fec:	95 0b       	sbc	r25, r21
    1fee:	39 f4       	brne	.+14     	; 0x1ffe <__fp_cmp+0x38>
    1ff0:	0a 26       	eor	r0, r26
    1ff2:	61 f0       	breq	.+24     	; 0x200c <__fp_cmp+0x46>
    1ff4:	23 2b       	or	r18, r19
    1ff6:	24 2b       	or	r18, r20
    1ff8:	25 2b       	or	r18, r21
    1ffa:	21 f4       	brne	.+8      	; 0x2004 <__fp_cmp+0x3e>
    1ffc:	08 95       	ret
    1ffe:	0a 26       	eor	r0, r26
    2000:	09 f4       	brne	.+2      	; 0x2004 <__fp_cmp+0x3e>
    2002:	a1 40       	sbci	r26, 0x01	; 1
    2004:	a6 95       	lsr	r26
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	81 1d       	adc	r24, r1
    200a:	81 1d       	adc	r24, r1
    200c:	08 95       	ret

0000200e <__fp_inf>:
    200e:	97 f9       	bld	r25, 7
    2010:	9f 67       	ori	r25, 0x7F	; 127
    2012:	80 e8       	ldi	r24, 0x80	; 128
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	08 95       	ret

0000201a <__fp_nan>:
    201a:	9f ef       	ldi	r25, 0xFF	; 255
    201c:	80 ec       	ldi	r24, 0xC0	; 192
    201e:	08 95       	ret

00002020 <__fp_pscA>:
    2020:	00 24       	eor	r0, r0
    2022:	0a 94       	dec	r0
    2024:	16 16       	cp	r1, r22
    2026:	17 06       	cpc	r1, r23
    2028:	18 06       	cpc	r1, r24
    202a:	09 06       	cpc	r0, r25
    202c:	08 95       	ret

0000202e <__fp_pscB>:
    202e:	00 24       	eor	r0, r0
    2030:	0a 94       	dec	r0
    2032:	12 16       	cp	r1, r18
    2034:	13 06       	cpc	r1, r19
    2036:	14 06       	cpc	r1, r20
    2038:	05 06       	cpc	r0, r21
    203a:	08 95       	ret

0000203c <__fp_round>:
    203c:	09 2e       	mov	r0, r25
    203e:	03 94       	inc	r0
    2040:	00 0c       	add	r0, r0
    2042:	11 f4       	brne	.+4      	; 0x2048 <__fp_round+0xc>
    2044:	88 23       	and	r24, r24
    2046:	52 f0       	brmi	.+20     	; 0x205c <__fp_round+0x20>
    2048:	bb 0f       	add	r27, r27
    204a:	40 f4       	brcc	.+16     	; 0x205c <__fp_round+0x20>
    204c:	bf 2b       	or	r27, r31
    204e:	11 f4       	brne	.+4      	; 0x2054 <__fp_round+0x18>
    2050:	60 ff       	sbrs	r22, 0
    2052:	04 c0       	rjmp	.+8      	; 0x205c <__fp_round+0x20>
    2054:	6f 5f       	subi	r22, 0xFF	; 255
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	8f 4f       	sbci	r24, 0xFF	; 255
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	08 95       	ret

0000205e <__fp_split3>:
    205e:	57 fd       	sbrc	r21, 7
    2060:	90 58       	subi	r25, 0x80	; 128
    2062:	44 0f       	add	r20, r20
    2064:	55 1f       	adc	r21, r21
    2066:	59 f0       	breq	.+22     	; 0x207e <__fp_splitA+0x10>
    2068:	5f 3f       	cpi	r21, 0xFF	; 255
    206a:	71 f0       	breq	.+28     	; 0x2088 <__fp_splitA+0x1a>
    206c:	47 95       	ror	r20

0000206e <__fp_splitA>:
    206e:	88 0f       	add	r24, r24
    2070:	97 fb       	bst	r25, 7
    2072:	99 1f       	adc	r25, r25
    2074:	61 f0       	breq	.+24     	; 0x208e <__fp_splitA+0x20>
    2076:	9f 3f       	cpi	r25, 0xFF	; 255
    2078:	79 f0       	breq	.+30     	; 0x2098 <__fp_splitA+0x2a>
    207a:	87 95       	ror	r24
    207c:	08 95       	ret
    207e:	12 16       	cp	r1, r18
    2080:	13 06       	cpc	r1, r19
    2082:	14 06       	cpc	r1, r20
    2084:	55 1f       	adc	r21, r21
    2086:	f2 cf       	rjmp	.-28     	; 0x206c <__fp_split3+0xe>
    2088:	46 95       	lsr	r20
    208a:	f1 df       	rcall	.-30     	; 0x206e <__fp_splitA>
    208c:	08 c0       	rjmp	.+16     	; 0x209e <__fp_splitA+0x30>
    208e:	16 16       	cp	r1, r22
    2090:	17 06       	cpc	r1, r23
    2092:	18 06       	cpc	r1, r24
    2094:	99 1f       	adc	r25, r25
    2096:	f1 cf       	rjmp	.-30     	; 0x207a <__fp_splitA+0xc>
    2098:	86 95       	lsr	r24
    209a:	71 05       	cpc	r23, r1
    209c:	61 05       	cpc	r22, r1
    209e:	08 94       	sec
    20a0:	08 95       	ret

000020a2 <__fp_zero>:
    20a2:	e8 94       	clt

000020a4 <__fp_szero>:
    20a4:	bb 27       	eor	r27, r27
    20a6:	66 27       	eor	r22, r22
    20a8:	77 27       	eor	r23, r23
    20aa:	cb 01       	movw	r24, r22
    20ac:	97 f9       	bld	r25, 7
    20ae:	08 95       	ret

000020b0 <__mulsf3>:
    20b0:	0b d0       	rcall	.+22     	; 0x20c8 <__mulsf3x>
    20b2:	c4 cf       	rjmp	.-120    	; 0x203c <__fp_round>
    20b4:	b5 df       	rcall	.-150    	; 0x2020 <__fp_pscA>
    20b6:	28 f0       	brcs	.+10     	; 0x20c2 <__mulsf3+0x12>
    20b8:	ba df       	rcall	.-140    	; 0x202e <__fp_pscB>
    20ba:	18 f0       	brcs	.+6      	; 0x20c2 <__mulsf3+0x12>
    20bc:	95 23       	and	r25, r21
    20be:	09 f0       	breq	.+2      	; 0x20c2 <__mulsf3+0x12>
    20c0:	a6 cf       	rjmp	.-180    	; 0x200e <__fp_inf>
    20c2:	ab cf       	rjmp	.-170    	; 0x201a <__fp_nan>
    20c4:	11 24       	eor	r1, r1
    20c6:	ee cf       	rjmp	.-36     	; 0x20a4 <__fp_szero>

000020c8 <__mulsf3x>:
    20c8:	ca df       	rcall	.-108    	; 0x205e <__fp_split3>
    20ca:	a0 f3       	brcs	.-24     	; 0x20b4 <__mulsf3+0x4>

000020cc <__mulsf3_pse>:
    20cc:	95 9f       	mul	r25, r21
    20ce:	d1 f3       	breq	.-12     	; 0x20c4 <__mulsf3+0x14>
    20d0:	95 0f       	add	r25, r21
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	55 1f       	adc	r21, r21
    20d6:	62 9f       	mul	r22, r18
    20d8:	f0 01       	movw	r30, r0
    20da:	72 9f       	mul	r23, r18
    20dc:	bb 27       	eor	r27, r27
    20de:	f0 0d       	add	r31, r0
    20e0:	b1 1d       	adc	r27, r1
    20e2:	63 9f       	mul	r22, r19
    20e4:	aa 27       	eor	r26, r26
    20e6:	f0 0d       	add	r31, r0
    20e8:	b1 1d       	adc	r27, r1
    20ea:	aa 1f       	adc	r26, r26
    20ec:	64 9f       	mul	r22, r20
    20ee:	66 27       	eor	r22, r22
    20f0:	b0 0d       	add	r27, r0
    20f2:	a1 1d       	adc	r26, r1
    20f4:	66 1f       	adc	r22, r22
    20f6:	82 9f       	mul	r24, r18
    20f8:	22 27       	eor	r18, r18
    20fa:	b0 0d       	add	r27, r0
    20fc:	a1 1d       	adc	r26, r1
    20fe:	62 1f       	adc	r22, r18
    2100:	73 9f       	mul	r23, r19
    2102:	b0 0d       	add	r27, r0
    2104:	a1 1d       	adc	r26, r1
    2106:	62 1f       	adc	r22, r18
    2108:	83 9f       	mul	r24, r19
    210a:	a0 0d       	add	r26, r0
    210c:	61 1d       	adc	r22, r1
    210e:	22 1f       	adc	r18, r18
    2110:	74 9f       	mul	r23, r20
    2112:	33 27       	eor	r19, r19
    2114:	a0 0d       	add	r26, r0
    2116:	61 1d       	adc	r22, r1
    2118:	23 1f       	adc	r18, r19
    211a:	84 9f       	mul	r24, r20
    211c:	60 0d       	add	r22, r0
    211e:	21 1d       	adc	r18, r1
    2120:	82 2f       	mov	r24, r18
    2122:	76 2f       	mov	r23, r22
    2124:	6a 2f       	mov	r22, r26
    2126:	11 24       	eor	r1, r1
    2128:	9f 57       	subi	r25, 0x7F	; 127
    212a:	50 40       	sbci	r21, 0x00	; 0
    212c:	8a f0       	brmi	.+34     	; 0x2150 <__mulsf3_pse+0x84>
    212e:	e1 f0       	breq	.+56     	; 0x2168 <__mulsf3_pse+0x9c>
    2130:	88 23       	and	r24, r24
    2132:	4a f0       	brmi	.+18     	; 0x2146 <__mulsf3_pse+0x7a>
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	bb 1f       	adc	r27, r27
    213a:	66 1f       	adc	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	91 50       	subi	r25, 0x01	; 1
    2142:	50 40       	sbci	r21, 0x00	; 0
    2144:	a9 f7       	brne	.-22     	; 0x2130 <__mulsf3_pse+0x64>
    2146:	9e 3f       	cpi	r25, 0xFE	; 254
    2148:	51 05       	cpc	r21, r1
    214a:	70 f0       	brcs	.+28     	; 0x2168 <__mulsf3_pse+0x9c>
    214c:	60 cf       	rjmp	.-320    	; 0x200e <__fp_inf>
    214e:	aa cf       	rjmp	.-172    	; 0x20a4 <__fp_szero>
    2150:	5f 3f       	cpi	r21, 0xFF	; 255
    2152:	ec f3       	brlt	.-6      	; 0x214e <__mulsf3_pse+0x82>
    2154:	98 3e       	cpi	r25, 0xE8	; 232
    2156:	dc f3       	brlt	.-10     	; 0x214e <__mulsf3_pse+0x82>
    2158:	86 95       	lsr	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	b7 95       	ror	r27
    2160:	f7 95       	ror	r31
    2162:	e7 95       	ror	r30
    2164:	9f 5f       	subi	r25, 0xFF	; 255
    2166:	c1 f7       	brne	.-16     	; 0x2158 <__mulsf3_pse+0x8c>
    2168:	fe 2b       	or	r31, r30
    216a:	88 0f       	add	r24, r24
    216c:	91 1d       	adc	r25, r1
    216e:	96 95       	lsr	r25
    2170:	87 95       	ror	r24
    2172:	97 f9       	bld	r25, 7
    2174:	08 95       	ret

00002176 <__mulsi3>:
    2176:	db 01       	movw	r26, r22
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	11 d0       	rcall	.+34     	; 0x21a0 <__muluhisi3>
    217e:	bf 91       	pop	r27
    2180:	af 91       	pop	r26
    2182:	a2 9f       	mul	r26, r18
    2184:	80 0d       	add	r24, r0
    2186:	91 1d       	adc	r25, r1
    2188:	a3 9f       	mul	r26, r19
    218a:	90 0d       	add	r25, r0
    218c:	b2 9f       	mul	r27, r18
    218e:	90 0d       	add	r25, r0
    2190:	11 24       	eor	r1, r1
    2192:	08 95       	ret

00002194 <__tablejump2__>:
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	05 90       	lpm	r0, Z+
    219a:	f4 91       	lpm	r31, Z
    219c:	e0 2d       	mov	r30, r0
    219e:	09 94       	ijmp

000021a0 <__muluhisi3>:
    21a0:	09 d0       	rcall	.+18     	; 0x21b4 <__umulhisi3>
    21a2:	a5 9f       	mul	r26, r21
    21a4:	90 0d       	add	r25, r0
    21a6:	b4 9f       	mul	r27, r20
    21a8:	90 0d       	add	r25, r0
    21aa:	a4 9f       	mul	r26, r20
    21ac:	80 0d       	add	r24, r0
    21ae:	91 1d       	adc	r25, r1
    21b0:	11 24       	eor	r1, r1
    21b2:	08 95       	ret

000021b4 <__umulhisi3>:
    21b4:	a2 9f       	mul	r26, r18
    21b6:	b0 01       	movw	r22, r0
    21b8:	b3 9f       	mul	r27, r19
    21ba:	c0 01       	movw	r24, r0
    21bc:	a3 9f       	mul	r26, r19
    21be:	70 0d       	add	r23, r0
    21c0:	81 1d       	adc	r24, r1
    21c2:	11 24       	eor	r1, r1
    21c4:	91 1d       	adc	r25, r1
    21c6:	b2 9f       	mul	r27, r18
    21c8:	70 0d       	add	r23, r0
    21ca:	81 1d       	adc	r24, r1
    21cc:	11 24       	eor	r1, r1
    21ce:	91 1d       	adc	r25, r1
    21d0:	08 95       	ret

000021d2 <_exit>:
    21d2:	f8 94       	cli

000021d4 <__stop_program>:
    21d4:	ff cf       	rjmp	.-2      	; 0x21d4 <__stop_program>
