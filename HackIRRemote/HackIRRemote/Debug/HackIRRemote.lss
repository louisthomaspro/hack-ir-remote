
HackIRRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800100  00800100  00001a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018cc  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000897  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2f  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00004b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cbc  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000072dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_7>
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_14>
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c0       	rjmp	.+54     	; 0x8c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c0       	rjmp	.+50     	; 0x8c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c0       	rjmp	.+46     	; 0x8c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c0       	rjmp	.+42     	; 0x8c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c0       	rjmp	.+38     	; 0x8c <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ae 3c       	cpi	r26, 0xCE	; 206
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 18 0a 	call	0x1430	; 0x1430 <main>
      88:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <ir_timerRst>:

static void ir_timerRst(void) {
    /*timer 3 for ir-receiving*/
    //TMR3H = (MAX_TMR_VAL - (USECPERTICK*(SYSCLOCK/US_PER_SEC)))/256;
    //TMR3L = (MAX_TMR_VAL - (USECPERTICK*(SYSCLOCK/US_PER_SEC)))%256;
	TCNT0=0;
      8e:	16 bc       	out	0x26, r1	; 38
      90:	08 95       	ret

00000092 <ir_timerCfgNorm>:
}

static void ir_timerCfgNorm(void) {
  /*timer 0 for ir-receiving*/
  TCCR0A=0;
      92:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0b00001100; // /256
      94:	8c e0       	ldi	r24, 0x0C	; 12
      96:	85 bd       	out	0x25, r24	; 37
  TIMSK0=0b00000010;
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  OCR0A=3; // division par 3
      9e:	83 e0       	ldi	r24, 0x03	; 3
      a0:	87 bd       	out	0x27, r24	; 39
      a2:	08 95       	ret

000000a4 <ir_compare>:
 */

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
static int ir_compare(unsigned int oldval, unsigned int newval) {
      a4:	8f 92       	push	r8
      a6:	9f 92       	push	r9
      a8:	af 92       	push	r10
      aa:	bf 92       	push	r11
      ac:	cf 92       	push	r12
      ae:	df 92       	push	r13
      b0:	ef 92       	push	r14
      b2:	ff 92       	push	r15
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	ec 01       	movw	r28, r24
  if (newval < oldval * .8) {
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 8e 0b 	call	0x171c	; 0x171c <__floatunsisf>
      c2:	4b 01       	movw	r8, r22
      c4:	5c 01       	movw	r10, r24
      c6:	be 01       	movw	r22, r28
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 8e 0b 	call	0x171c	; 0x171c <__floatunsisf>
      d0:	6b 01       	movw	r12, r22
      d2:	7c 01       	movw	r14, r24
      d4:	2d ec       	ldi	r18, 0xCD	; 205
      d6:	3c ec       	ldi	r19, 0xCC	; 204
      d8:	4c e4       	ldi	r20, 0x4C	; 76
      da:	5f e3       	ldi	r21, 0x3F	; 63
      dc:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3>
      e0:	9b 01       	movw	r18, r22
      e2:	ac 01       	movw	r20, r24
      e4:	c5 01       	movw	r24, r10
      e6:	b4 01       	movw	r22, r8
      e8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__cmpsf2>
      ec:	88 23       	and	r24, r24
      ee:	9c f0       	brlt	.+38     	; 0x116 <ir_compare+0x72>
    return 0;
  } 
  else if (oldval < newval * .8) {
      f0:	2d ec       	ldi	r18, 0xCD	; 205
      f2:	3c ec       	ldi	r19, 0xCC	; 204
      f4:	4c e4       	ldi	r20, 0x4C	; 76
      f6:	5f e3       	ldi	r21, 0x3F	; 63
      f8:	c5 01       	movw	r24, r10
      fa:	b4 01       	movw	r22, r8
      fc:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3>
     100:	9b 01       	movw	r18, r22
     102:	ac 01       	movw	r20, r24
     104:	c7 01       	movw	r24, r14
     106:	b6 01       	movw	r22, r12
     108:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__cmpsf2>
     10c:	88 23       	and	r24, r24
     10e:	34 f4       	brge	.+12     	; 0x11c <ir_compare+0x78>
    return 2;
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	05 c0       	rjmp	.+10     	; 0x120 <ir_compare+0x7c>
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
static int ir_compare(unsigned int oldval, unsigned int newval) {
  if (newval < oldval * .8) {
    return 0;
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <ir_compare+0x7c>
  } 
  else if (oldval < newval * .8) {
    return 2;
  } 
  else {
    return 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	ff 90       	pop	r15
     126:	ef 90       	pop	r14
     128:	df 90       	pop	r13
     12a:	cf 90       	pop	r12
     12c:	bf 90       	pop	r11
     12e:	af 90       	pop	r10
     130:	9f 90       	pop	r9
     132:	8f 90       	pop	r8
     134:	08 95       	ret

00000136 <ir_decodeHash>:
/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
static long ir_decodeHash(decode_results *results)
{
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
  long hash = FNV_BASIS_32;
  int i = 0;
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
     14a:	fc 01       	movw	r30, r24
     14c:	a4 84       	ldd	r10, Z+12	; 0x0c
     14e:	b5 84       	ldd	r11, Z+13	; 0x0d
     150:	f6 e0       	ldi	r31, 0x06	; 6
     152:	af 16       	cp	r10, r31
     154:	b1 04       	cpc	r11, r1
     156:	0c f4       	brge	.+2      	; 0x15a <ir_decodeHash+0x24>
     158:	49 c0       	rjmp	.+146    	; 0x1ec <ir_decodeHash+0xb6>
     15a:	ec 01       	movw	r28, r24
     15c:	01 e0       	ldi	r16, 0x01	; 1
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	0f 2e       	mov	r0, r31
     162:	f5 ec       	ldi	r31, 0xC5	; 197
     164:	cf 2e       	mov	r12, r31
     166:	fd e9       	ldi	r31, 0x9D	; 157
     168:	df 2e       	mov	r13, r31
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	ef 2e       	mov	r14, r31
     16e:	f1 e8       	ldi	r31, 0x81	; 129
     170:	ff 2e       	mov	r15, r31
     172:	f0 2d       	mov	r31, r0
     174:	25 c0       	rjmp	.+74     	; 0x1c0 <ir_decodeHash+0x8a>
    return ERR;
  }

  for (i = 1; i+2 < results->rawlen; i++) {
    int value =  ir_compare(results->rawbuf[i], results->rawbuf[i+2]);
     176:	8a 85       	ldd	r24, Y+10	; 0x0a
     178:	9b 85       	ldd	r25, Y+11	; 0x0b
     17a:	f8 01       	movw	r30, r16
     17c:	32 96       	adiw	r30, 0x02	; 2
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 0f       	add	r30, r24
     184:	f9 1f       	adc	r31, r25
     186:	60 81       	ld	r22, Z
     188:	71 81       	ldd	r23, Z+1	; 0x01
     18a:	f8 01       	movw	r30, r16
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e8 0f       	add	r30, r24
     192:	f9 1f       	adc	r31, r25
     194:	80 81       	ld	r24, Z
     196:	91 81       	ldd	r25, Z+1	; 0x01
     198:	85 df       	rcall	.-246    	; 0xa4 <ir_compare>
     19a:	fc 01       	movw	r30, r24
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
     19c:	a7 01       	movw	r20, r14
     19e:	96 01       	movw	r18, r12
     1a0:	63 e9       	ldi	r22, 0x93	; 147
     1a2:	71 e0       	ldi	r23, 0x01	; 1
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsi3>
     1ac:	6f 01       	movw	r12, r30
     1ae:	ff 0f       	add	r31, r31
     1b0:	ee 08       	sbc	r14, r14
     1b2:	ff 08       	sbc	r15, r15
     1b4:	c6 26       	eor	r12, r22
     1b6:	d7 26       	eor	r13, r23
     1b8:	e8 26       	eor	r14, r24
     1ba:	f9 26       	eor	r15, r25
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
  }

  for (i = 1; i+2 < results->rawlen; i++) {
     1bc:	0f 5f       	subi	r16, 0xFF	; 255
     1be:	1f 4f       	sbci	r17, 0xFF	; 255
     1c0:	c8 01       	movw	r24, r16
     1c2:	02 96       	adiw	r24, 0x02	; 2
     1c4:	8a 15       	cp	r24, r10
     1c6:	9b 05       	cpc	r25, r11
     1c8:	b4 f2       	brlt	.-84     	; 0x176 <ir_decodeHash+0x40>
    int value =  ir_compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
     1ca:	cc 82       	std	Y+4, r12	; 0x04
     1cc:	dd 82       	std	Y+5, r13	; 0x05
     1ce:	ee 82       	std	Y+6, r14	; 0x06
     1d0:	ff 82       	std	Y+7, r15	; 0x07
  results->bits = 32;
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	99 87       	std	Y+9, r25	; 0x09
     1d8:	88 87       	std	Y+8, r24	; 0x08
  results->decode_type = UNKNOWN;
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	9f ef       	ldi	r25, 0xFF	; 255
     1de:	99 83       	std	Y+1, r25	; 0x01
     1e0:	88 83       	st	Y, r24
  return DECODED;
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <ir_decodeHash+0xbc>
{
  long hash = FNV_BASIS_32;
  int i = 0;
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	cb 01       	movw	r24, r22
  }
  results->value = hash;
  results->bits = 32;
  results->decode_type = UNKNOWN;
  return DECODED;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	08 95       	ret

00000208 <MATCH>:
  }
}*/


static int MATCH(int measured, int desired)
{
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
    return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);
     216:	07 2e       	mov	r0, r23
     218:	00 0c       	add	r0, r0
     21a:	88 0b       	sbc	r24, r24
     21c:	99 0b       	sbc	r25, r25
     21e:	0e 94 90 0b 	call	0x1720	; 0x1720 <__floatsisf>
     222:	6b 01       	movw	r12, r22
     224:	7c 01       	movw	r14, r24
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e4       	ldi	r20, 0x40	; 64
     22c:	5f e3       	ldi	r21, 0x3F	; 63
     22e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3>
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	48 e4       	ldi	r20, 0x48	; 72
     238:	52 e4       	ldi	r21, 0x42	; 66
     23a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divsf3>
     23e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fixsfsi>
     242:	c6 17       	cp	r28, r22
     244:	d7 07       	cpc	r29, r23
     246:	e4 f0       	brlt	.+56     	; 0x280 <MATCH+0x78>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 ea       	ldi	r20, 0xA0	; 160
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	48 e4       	ldi	r20, 0x48	; 72
     25e:	52 e4       	ldi	r21, 0x42	; 66
     260:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divsf3>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e8       	ldi	r20, 0x80	; 128
     26a:	5f e3       	ldi	r21, 0x3F	; 63
     26c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__addsf3>
     270:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fixsfsi>
     274:	6c 17       	cp	r22, r28
     276:	7d 07       	cpc	r23, r29
     278:	34 f4       	brge	.+12     	; 0x286 <MATCH+0x7e>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	05 c0       	rjmp	.+10     	; 0x28a <MATCH+0x82>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <MATCH+0x82>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <ir_getRClevel>:
// E.g. if the buffer has MARK for 2 time intervals and SPACE for 1,
// successive calls to getRClevel will return MARK, MARK, SPACE.
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
static int ir_getRClevel(decode_results *results, int *offset, int *used, int t1) {
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
  int width = 0;
  int val = 0;
  int correction = 0;
  int avail = 0;
  if (*offset >= results->rawlen) {
     2ac:	db 01       	movw	r26, r22
     2ae:	ed 91       	ld	r30, X+
     2b0:	fc 91       	ld	r31, X
     2b2:	ec 01       	movw	r28, r24
     2b4:	ac 85       	ldd	r26, Y+12	; 0x0c
     2b6:	bd 85       	ldd	r27, Y+13	; 0x0d
     2b8:	ea 17       	cp	r30, r26
     2ba:	fb 07       	cpc	r31, r27
     2bc:	0c f0       	brlt	.+2      	; 0x2c0 <ir_getRClevel+0x28>
     2be:	41 c0       	rjmp	.+130    	; 0x342 <ir_getRClevel+0xaa>
    // After end of recorded buffer, assume SPACE.
    return SPACE;
  }
  width = results->rawbuf[*offset];
     2c0:	aa 85       	ldd	r26, Y+10	; 0x0a
     2c2:	bb 85       	ldd	r27, Y+11	; 0x0b
     2c4:	cf 01       	movw	r24, r30
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	a8 0f       	add	r26, r24
     2cc:	b9 1f       	adc	r27, r25
     2ce:	ad 90       	ld	r10, X+
     2d0:	bc 90       	ld	r11, X
  val = ((*offset) % 2) ? MARK : SPACE;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	e0 ff       	sbrs	r30, 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	79 01       	movw	r14, r18
     2da:	8a 01       	movw	r16, r20
     2dc:	eb 01       	movw	r28, r22
     2de:	c8 2e       	mov	r12, r24
     2e0:	d1 2c       	mov	r13, r1
  correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

  if (MATCH(width, t1 + correction)) {
     2e2:	b9 01       	movw	r22, r18
     2e4:	c5 01       	movw	r24, r10
     2e6:	90 df       	rcall	.-224    	; 0x208 <MATCH>
     2e8:	89 2b       	or	r24, r25
     2ea:	99 f4       	brne	.+38     	; 0x312 <ir_getRClevel+0x7a>
    avail = 1;
  } 
  else if (MATCH(width, 2*t1 + correction)) {
     2ec:	b7 01       	movw	r22, r14
     2ee:	66 0f       	add	r22, r22
     2f0:	77 1f       	adc	r23, r23
     2f2:	c5 01       	movw	r24, r10
     2f4:	89 df       	rcall	.-238    	; 0x208 <MATCH>
     2f6:	89 2b       	or	r24, r25
     2f8:	79 f4       	brne	.+30     	; 0x318 <ir_getRClevel+0x80>
    avail = 2;
  } 
  else if (MATCH(width, 3*t1 + correction)) {
     2fa:	b7 01       	movw	r22, r14
     2fc:	66 0f       	add	r22, r22
     2fe:	77 1f       	adc	r23, r23
     300:	6e 0d       	add	r22, r14
     302:	7f 1d       	adc	r23, r15
     304:	c5 01       	movw	r24, r10
     306:	80 df       	rcall	.-256    	; 0x208 <MATCH>
     308:	89 2b       	or	r24, r25
     30a:	f1 f0       	breq	.+60     	; 0x348 <ir_getRClevel+0xb0>
    avail = 3;
     30c:	23 e0       	ldi	r18, 0x03	; 3
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	05 c0       	rjmp	.+10     	; 0x31c <ir_getRClevel+0x84>
  width = results->rawbuf[*offset];
  val = ((*offset) % 2) ? MARK : SPACE;
  correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

  if (MATCH(width, t1 + correction)) {
    avail = 1;
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <ir_getRClevel+0x84>
  } 
  else if (MATCH(width, 2*t1 + correction)) {
    avail = 2;
     318:	22 e0       	ldi	r18, 0x02	; 2
     31a:	30 e0       	ldi	r19, 0x00	; 0
  } 
  else {
    return -1;
  }

  (*used)++;
     31c:	f8 01       	movw	r30, r16
     31e:	80 81       	ld	r24, Z
     320:	91 81       	ldd	r25, Z+1	; 0x01
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24
  if (*used >= avail) {
     328:	82 17       	cp	r24, r18
     32a:	93 07       	cpc	r25, r19
     32c:	84 f0       	brlt	.+32     	; 0x34e <ir_getRClevel+0xb6>
    *used = 0;
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	10 82       	st	Z, r1
    (*offset)++;
     332:	88 81       	ld	r24, Y
     334:	99 81       	ldd	r25, Y+1	; 0x01
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	99 83       	std	Y+1, r25	; 0x01
     33a:	88 83       	st	Y, r24
  }
  return val;   
     33c:	8c 2d       	mov	r24, r12
     33e:	9d 2d       	mov	r25, r13
     340:	08 c0       	rjmp	.+16     	; 0x352 <ir_getRClevel+0xba>
  int val = 0;
  int correction = 0;
  int avail = 0;
  if (*offset >= results->rawlen) {
    // After end of recorded buffer, assume SPACE.
    return SPACE;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	05 c0       	rjmp	.+10     	; 0x352 <ir_getRClevel+0xba>
  } 
  else if (MATCH(width, 3*t1 + correction)) {
    avail = 3;
  } 
  else {
    return -1;
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	9f ef       	ldi	r25, 0xFF	; 255
     34c:	02 c0       	rjmp	.+4      	; 0x352 <ir_getRClevel+0xba>
  (*used)++;
  if (*used >= avail) {
    *used = 0;
    (*offset)++;
  }
  return val;   
     34e:	8c 2d       	mov	r24, r12
     350:	9d 2d       	mov	r25, r13
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	cf 90       	pop	r12
     362:	bf 90       	pop	r11
     364:	af 90       	pop	r10
     366:	08 95       	ret

00000368 <ir_decodeRC5>:

static long ir_decodeRC5(decode_results *results) {
     368:	8f 92       	push	r8
     36a:	9f 92       	push	r9
     36c:	af 92       	push	r10
     36e:	bf 92       	push	r11
     370:	cf 92       	push	r12
     372:	df 92       	push	r13
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	00 d0       	rcall	.+0      	; 0x382 <ir_decodeRC5+0x1a>
     382:	00 d0       	rcall	.+0      	; 0x384 <ir_decodeRC5+0x1c>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
  int offset = 1; // Skip gap space
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	3a 83       	std	Y+2, r19	; 0x02
     38e:	29 83       	std	Y+1, r18	; 0x01
  long data = 0;
  int used = 0;
     390:	1c 82       	std	Y+4, r1	; 0x04
     392:	1b 82       	std	Y+3, r1	; 0x03
  int nbits = 0;
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
     394:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     398:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     39c:	2d 30       	cpi	r18, 0x0D	; 13
     39e:	31 05       	cpc	r19, r1
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <ir_decodeRC5+0x3c>
     3a2:	74 c0       	rjmp	.+232    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     3a4:	8c 01       	movw	r16, r24
    return ERR;
  }

  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     3a6:	29 e7       	ldi	r18, 0x79	; 121
     3a8:	33 e0       	ldi	r19, 0x03	; 3
     3aa:	ae 01       	movw	r20, r28
     3ac:	4d 5f       	subi	r20, 0xFD	; 253
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	be 01       	movw	r22, r28
     3b2:	6f 5f       	subi	r22, 0xFF	; 255
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	70 df       	rcall	.-288    	; 0x298 <ir_getRClevel>
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	09 f0       	breq	.+2      	; 0x3be <ir_decodeRC5+0x56>
     3bc:	6b c0       	rjmp	.+214    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
     3be:	29 e7       	ldi	r18, 0x79	; 121
     3c0:	33 e0       	ldi	r19, 0x03	; 3
     3c2:	ae 01       	movw	r20, r28
     3c4:	4d 5f       	subi	r20, 0xFD	; 253
     3c6:	5f 4f       	sbci	r21, 0xFF	; 255
     3c8:	be 01       	movw	r22, r28
     3ca:	6f 5f       	subi	r22, 0xFF	; 255
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	c8 01       	movw	r24, r16
     3d0:	63 df       	rcall	.-314    	; 0x298 <ir_getRClevel>
     3d2:	89 2b       	or	r24, r25
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <ir_decodeRC5+0x70>
     3d6:	62 c0       	rjmp	.+196    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     3d8:	29 e7       	ldi	r18, 0x79	; 121
     3da:	33 e0       	ldi	r19, 0x03	; 3
     3dc:	ae 01       	movw	r20, r28
     3de:	4d 5f       	subi	r20, 0xFD	; 253
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	be 01       	movw	r22, r28
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	c8 01       	movw	r24, r16
     3ea:	56 df       	rcall	.-340    	; 0x298 <ir_getRClevel>
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <ir_decodeRC5+0x8a>
     3f0:	59 c0       	rjmp	.+178    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     3f2:	c1 2c       	mov	r12, r1
     3f4:	d1 2c       	mov	r13, r1
     3f6:	81 2c       	mov	r8, r1
     3f8:	91 2c       	mov	r9, r1
     3fa:	54 01       	movw	r10, r8
     3fc:	2e c0       	rjmp	.+92     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

  for (nbits = 0; offset < irparams.rawlen; nbits++) {
    int levelA = ir_getRClevel(results, &offset, &used, RC5_T1);
     3fe:	29 e7       	ldi	r18, 0x79	; 121
     400:	33 e0       	ldi	r19, 0x03	; 3
     402:	ae 01       	movw	r20, r28
     404:	4d 5f       	subi	r20, 0xFD	; 253
     406:	5f 4f       	sbci	r21, 0xFF	; 255
     408:	be 01       	movw	r22, r28
     40a:	6f 5f       	subi	r22, 0xFF	; 255
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	c8 01       	movw	r24, r16
     410:	43 df       	rcall	.-378    	; 0x298 <ir_getRClevel>
     412:	7c 01       	movw	r14, r24
    int levelB = ir_getRClevel(results, &offset, &used, RC5_T1);
     414:	29 e7       	ldi	r18, 0x79	; 121
     416:	33 e0       	ldi	r19, 0x03	; 3
     418:	ae 01       	movw	r20, r28
     41a:	4d 5f       	subi	r20, 0xFD	; 253
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	c8 01       	movw	r24, r16
     426:	38 df       	rcall	.-400    	; 0x298 <ir_getRClevel>
    if (levelA == SPACE && levelB == MARK) {
     428:	e1 14       	cp	r14, r1
     42a:	f1 04       	cpc	r15, r1
     42c:	51 f4       	brne	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	91 05       	cpc	r25, r1
     432:	39 f4       	brne	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
      // 1 bit
      data = (data << 1) | 1;
     434:	88 0c       	add	r8, r8
     436:	99 1c       	adc	r9, r9
     438:	aa 1c       	adc	r10, r10
     43a:	bb 1c       	adc	r11, r11
     43c:	68 94       	set
     43e:	80 f8       	bld	r8, 0
     440:	09 c0       	rjmp	.+18     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
    } 
    else if (levelA == MARK && levelB == SPACE) {
     442:	ea 94       	dec	r14
     444:	ef 28       	or	r14, r15
     446:	91 f5       	brne	.+100    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     448:	89 2b       	or	r24, r25
     44a:	a1 f5       	brne	.+104    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
      // zero bit
      data <<= 1;
     44c:	88 0c       	add	r8, r8
     44e:	99 1c       	adc	r9, r9
     450:	aa 1c       	adc	r10, r10
     452:	bb 1c       	adc	r11, r11
  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;

  for (nbits = 0; offset < irparams.rawlen; nbits++) {
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	c8 1a       	sub	r12, r24
     458:	d8 0a       	sbc	r13, r24
     45a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     45e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	82 17       	cp	r24, r18
     468:	93 07       	cpc	r25, r19
     46a:	48 f2       	brcs	.-110    	; 0x3fe <ir_decodeRC5+0x96>
      return ERR;
    } 
  }

  // Success
  results->bits = nbits;
     46c:	f8 01       	movw	r30, r16
     46e:	d1 86       	std	Z+9, r13	; 0x09
     470:	c0 86       	std	Z+8, r12	; 0x08
  results->value = data;
     472:	84 82       	std	Z+4, r8	; 0x04
     474:	95 82       	std	Z+5, r9	; 0x05
     476:	a6 82       	std	Z+6, r10	; 0x06
     478:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = RC5;
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	80 83       	st	Z, r24
  return DECODED;
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	17 c0       	rjmp	.+46     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  int offset = 1; // Skip gap space
  long data = 0;
  int used = 0;
  int nbits = 0;
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	cb 01       	movw	r24, r22
     492:	13 c0       	rjmp	.+38     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  }

  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
     49a:	0f c0       	rjmp	.+30     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	cb 01       	movw	r24, r22
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	07 c0       	rjmp	.+14     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
    else if (levelA == MARK && levelB == SPACE) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR;
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	cb 01       	movw	r24, r22
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	cb 01       	movw	r24, r22
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	9f 90       	pop	r9
     4d8:	8f 90       	pop	r8
     4da:	08 95       	ret

000004dc <MATCH_MARK>:
    return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);
}

static int MATCH_MARK(int measured_ticks, int desired_us)
{
    return MATCH(measured_ticks, (desired_us + MARK_EXCESS));
     4dc:	95 ce       	rjmp	.-726    	; 0x208 <MATCH>
}
     4de:	08 95       	ret

000004e0 <MATCH_SPACE>:

static int MATCH_SPACE(int measured_ticks, int desired_us)
{
    return MATCH(measured_ticks, (desired_us - MARK_EXCESS));
     4e0:	93 ce       	rjmp	.-730    	; 0x208 <MATCH>
}
     4e2:	08 95       	ret

000004e4 <ir_decodeSigma>:
}



// SIGMA ASC 333
static long ir_decodeSigma(decode_results *results) {
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	3c 01       	movw	r6, r24
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_HDR_MARK)) {
     502:	fc 01       	movw	r30, r24
     504:	c2 84       	ldd	r12, Z+10	; 0x0a
     506:	d3 84       	ldd	r13, Z+11	; 0x0b
     508:	f6 01       	movw	r30, r12
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	93 81       	ldd	r25, Z+3	; 0x03
     50e:	68 ef       	ldi	r22, 0xF8	; 248
     510:	70 e2       	ldi	r23, 0x20	; 32
     512:	e4 df       	rcall	.-56     	; 0x4dc <MATCH_MARK>
     514:	89 2b       	or	r24, r25
     516:	09 f4       	brne	.+2      	; 0x51a <ir_decodeSigma+0x36>
     518:	8f c0       	rjmp	.+286    	; 0x638 <ir_decodeSigma+0x154>
    return ERR;
  }
  offset++;

  
  if (irparams.rawlen < 2 * SIGMA_BITS + 6) {
     51a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     51e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     522:	86 97       	sbiw	r24, 0x26	; 38
     524:	08 f4       	brcc	.+2      	; 0x528 <ir_decodeSigma+0x44>
     526:	8c c0       	rjmp	.+280    	; 0x640 <ir_decodeSigma+0x15c>
    return ERR;
  }
  
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_HDR_SPACE)) {
     528:	f6 01       	movw	r30, r12
     52a:	84 81       	ldd	r24, Z+4	; 0x04
     52c:	95 81       	ldd	r25, Z+5	; 0x05
     52e:	60 e9       	ldi	r22, 0x90	; 144
     530:	70 e1       	ldi	r23, 0x10	; 16
     532:	d6 df       	rcall	.-84     	; 0x4e0 <MATCH_SPACE>
     534:	89 2b       	or	r24, r25
     536:	09 f4       	brne	.+2      	; 0x53a <ir_decodeSigma+0x56>
     538:	87 c0       	rjmp	.+270    	; 0x648 <ir_decodeSigma+0x164>
     53a:	03 e0       	ldi	r16, 0x03	; 3
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	81 2c       	mov	r8, r1
     540:	91 2c       	mov	r9, r1
     542:	54 01       	movw	r10, r8
     544:	e1 2c       	mov	r14, r1
     546:	f1 2c       	mov	r15, r1
     548:	54 c0       	rjmp	.+168    	; 0x5f2 <ir_decodeSigma+0x10e>
  }
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     54a:	f8 01       	movw	r30, r16
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ec 0d       	add	r30, r12
     552:	fd 1d       	adc	r31, r13
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	68 e0       	ldi	r22, 0x08	; 8
     55a:	72 e0       	ldi	r23, 0x02	; 2
     55c:	bf df       	rcall	.-130    	; 0x4dc <MATCH_MARK>
     55e:	89 2b       	or	r24, r25
     560:	09 f4       	brne	.+2      	; 0x564 <ir_decodeSigma+0x80>
     562:	76 c0       	rjmp	.+236    	; 0x650 <ir_decodeSigma+0x16c>
      return ERR;
    }
    offset++;
     564:	e8 01       	movw	r28, r16
     566:	21 96       	adiw	r28, 0x01	; 1
    if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ONE_SPACE)) {
     568:	cc 0f       	add	r28, r28
     56a:	dd 1f       	adc	r29, r29
     56c:	cc 0d       	add	r28, r12
     56e:	dd 1d       	adc	r29, r13
     570:	88 81       	ld	r24, Y
     572:	99 81       	ldd	r25, Y+1	; 0x01
     574:	60 e4       	ldi	r22, 0x40	; 64
     576:	76 e0       	ldi	r23, 0x06	; 6
     578:	b3 df       	rcall	.-154    	; 0x4e0 <MATCH_SPACE>
     57a:	89 2b       	or	r24, r25
     57c:	39 f0       	breq	.+14     	; 0x58c <ir_decodeSigma+0xa8>
      data = (data << 1) | 1;
     57e:	88 0c       	add	r8, r8
     580:	99 1c       	adc	r9, r9
     582:	aa 1c       	adc	r10, r10
     584:	bb 1c       	adc	r11, r11
     586:	68 94       	set
     588:	80 f8       	bld	r8, 0
     58a:	0c c0       	rjmp	.+24     	; 0x5a4 <ir_decodeSigma+0xc0>
    }
    else if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ZERO_SPACE)) {
     58c:	88 81       	ld	r24, Y
     58e:	99 81       	ldd	r25, Y+1	; 0x01
     590:	68 e0       	ldi	r22, 0x08	; 8
     592:	72 e0       	ldi	r23, 0x02	; 2
     594:	a5 df       	rcall	.-182    	; 0x4e0 <MATCH_SPACE>
     596:	89 2b       	or	r24, r25
     598:	09 f4       	brne	.+2      	; 0x59c <ir_decodeSigma+0xb8>
     59a:	5e c0       	rjmp	.+188    	; 0x658 <ir_decodeSigma+0x174>
      data <<= 1;
     59c:	88 0c       	add	r8, r8
     59e:	99 1c       	adc	r9, r9
     5a0:	aa 1c       	adc	r10, r10
     5a2:	bb 1c       	adc	r11, r11
    }
    else {
      return ERR;
    }
    offset++;
     5a4:	c8 01       	movw	r24, r16
     5a6:	02 96       	adiw	r24, 0x02	; 2

    // between the two bytes is an extra space
    if (i == 7)
     5a8:	f7 e0       	ldi	r31, 0x07	; 7
     5aa:	ef 16       	cp	r14, r31
     5ac:	f1 04       	cpc	r15, r1
     5ae:	e9 f4       	brne	.+58     	; 0x5ea <ir_decodeSigma+0x106>
    {
        // next space
        if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	f6 01       	movw	r30, r12
     5b6:	e8 0f       	add	r30, r24
     5b8:	f9 1f       	adc	r31, r25
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	68 e0       	ldi	r22, 0x08	; 8
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	8c df       	rcall	.-232    	; 0x4dc <MATCH_MARK>
     5c4:	89 2b       	or	r24, r25
     5c6:	09 f4       	brne	.+2      	; 0x5ca <ir_decodeSigma+0xe6>
     5c8:	4b c0       	rjmp	.+150    	; 0x660 <ir_decodeSigma+0x17c>
            return ERR;
        }
        offset++;
     5ca:	f8 01       	movw	r30, r16
     5cc:	33 96       	adiw	r30, 0x03	; 3
        if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_NEXT_SPACE)) {
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ec 0d       	add	r30, r12
     5d4:	fd 1d       	adc	r31, r13
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	60 e9       	ldi	r22, 0x90	; 144
     5dc:	70 e1       	ldi	r23, 0x10	; 16
     5de:	80 df       	rcall	.-256    	; 0x4e0 <MATCH_SPACE>
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <ir_decodeSigma+0x102>
     5e4:	41 c0       	rjmp	.+130    	; 0x668 <ir_decodeSigma+0x184>
            return ERR;
        }
        offset++;
     5e6:	c8 01       	movw	r24, r16
     5e8:	04 96       	adiw	r24, 0x04	; 4
    return ERR;
  }
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
     5ea:	2f ef       	ldi	r18, 0xFF	; 255
     5ec:	e2 1a       	sub	r14, r18
     5ee:	f2 0a       	sbc	r15, r18
     5f0:	8c 01       	movw	r16, r24
     5f2:	80 e1       	ldi	r24, 0x10	; 16
     5f4:	e8 16       	cp	r14, r24
     5f6:	f1 04       	cpc	r15, r1
     5f8:	0c f4       	brge	.+2      	; 0x5fc <ir_decodeSigma+0x118>
     5fa:	a7 cf       	rjmp	.-178    	; 0x54a <ir_decodeSigma+0x66>
        offset++;
    }
  }

  //final mark bit
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     5fc:	00 0f       	add	r16, r16
     5fe:	11 1f       	adc	r17, r17
     600:	f6 01       	movw	r30, r12
     602:	e0 0f       	add	r30, r16
     604:	f1 1f       	adc	r31, r17
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	68 e0       	ldi	r22, 0x08	; 8
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	66 df       	rcall	.-308    	; 0x4dc <MATCH_MARK>
     610:	89 2b       	or	r24, r25
     612:	71 f1       	breq	.+92     	; 0x670 <ir_decodeSigma+0x18c>
    return ERR;
  }

  // Success
  results->bits = 2 * SIGMA_BITS;
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	f3 01       	movw	r30, r6
     61a:	91 87       	std	Z+9, r25	; 0x09
     61c:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
     61e:	84 82       	std	Z+4, r8	; 0x04
     620:	95 82       	std	Z+5, r9	; 0x05
     622:	a6 82       	std	Z+6, r10	; 0x06
     624:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SIGMA;
     626:	8b e0       	ldi	r24, 0x0B	; 11
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	91 83       	std	Z+1, r25	; 0x01
     62c:	80 83       	st	Z, r24
  return DECODED;
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	1f c0       	rjmp	.+62     	; 0x676 <ir_decodeSigma+0x192>
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_HDR_MARK)) {
    return ERR;
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	cb 01       	movw	r24, r22
     63e:	1b c0       	rjmp	.+54     	; 0x676 <ir_decodeSigma+0x192>
  }
  offset++;

  
  if (irparams.rawlen < 2 * SIGMA_BITS + 6) {
    return ERR;
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	cb 01       	movw	r24, r22
     646:	17 c0       	rjmp	.+46     	; 0x676 <ir_decodeSigma+0x192>
  }
  
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_HDR_SPACE)) {
    return ERR;
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	cb 01       	movw	r24, r22
     64e:	13 c0       	rjmp	.+38     	; 0x676 <ir_decodeSigma+0x192>
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
      return ERR;
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	cb 01       	movw	r24, r22
     656:	0f c0       	rjmp	.+30     	; 0x676 <ir_decodeSigma+0x192>
    }
    else if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ZERO_SPACE)) {
      data <<= 1;
    }
    else {
      return ERR;
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	cb 01       	movw	r24, r22
     65e:	0b c0       	rjmp	.+22     	; 0x676 <ir_decodeSigma+0x192>
    // between the two bytes is an extra space
    if (i == 7)
    {
        // next space
        if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
            return ERR;
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	07 c0       	rjmp	.+14     	; 0x676 <ir_decodeSigma+0x192>
        }
        offset++;
        if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_NEXT_SPACE)) {
            return ERR;
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	cb 01       	movw	r24, r22
     66e:	03 c0       	rjmp	.+6      	; 0x676 <ir_decodeSigma+0x192>
    }
  }

  //final mark bit
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
    return ERR;
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	cb 01       	movw	r24, r22
  // Success
  results->bits = 2 * SIGMA_BITS;
  results->value = data;
  results->decode_type = SIGMA;
  return DECODED;
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	6f 90       	pop	r6
     692:	08 95       	ret

00000694 <ir_decodeNEC>:
  results->bits = NEC_BITS;
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}*/
static long ir_decodeNEC(decode_results *results) {
     694:	6f 92       	push	r6
     696:	7f 92       	push	r7
     698:	8f 92       	push	r8
     69a:	9f 92       	push	r9
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	3c 01       	movw	r6, r24
	int i = 0;
	long data = 0;
	int offset = 1; // Skip first space
	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
     6b2:	fc 01       	movw	r30, r24
     6b4:	c2 84       	ldd	r12, Z+10	; 0x0a
     6b6:	d3 84       	ldd	r13, Z+11	; 0x0b
     6b8:	f6 01       	movw	r30, r12
     6ba:	82 81       	ldd	r24, Z+2	; 0x02
     6bc:	93 81       	ldd	r25, Z+3	; 0x03
     6be:	68 e2       	ldi	r22, 0x28	; 40
     6c0:	73 e2       	ldi	r23, 0x23	; 35
     6c2:	0c df       	rcall	.-488    	; 0x4dc <MATCH_MARK>
     6c4:	89 2b       	or	r24, r25
     6c6:	09 f4       	brne	.+2      	; 0x6ca <ir_decodeNEC+0x36>
     6c8:	89 c0       	rjmp	.+274    	; 0x7dc <ir_decodeNEC+0x148>
		return ERR;
	}
	offset++;
	// Check for repeat
	if (irparams.rawlen == 4 &&
     6ca:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     6ce:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     6d2:	04 97       	sbiw	r24, 0x04	; 4
     6d4:	19 f5       	brne	.+70     	; 0x71c <ir_decodeNEC+0x88>
	MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
     6d6:	f6 01       	movw	r30, r12
     6d8:	84 81       	ldd	r24, Z+4	; 0x04
     6da:	95 81       	ldd	r25, Z+5	; 0x05
     6dc:	6a ec       	ldi	r22, 0xCA	; 202
     6de:	78 e0       	ldi	r23, 0x08	; 8
     6e0:	ff de       	rcall	.-514    	; 0x4e0 <MATCH_SPACE>
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
		return ERR;
	}
	offset++;
	// Check for repeat
	if (irparams.rawlen == 4 &&
     6e2:	89 2b       	or	r24, r25
     6e4:	d9 f0       	breq	.+54     	; 0x71c <ir_decodeNEC+0x88>
	MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
	MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
     6e6:	f6 01       	movw	r30, r12
     6e8:	86 81       	ldd	r24, Z+6	; 0x06
     6ea:	97 81       	ldd	r25, Z+7	; 0x07
     6ec:	60 e3       	ldi	r22, 0x30	; 48
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	f5 de       	rcall	.-534    	; 0x4dc <MATCH_MARK>
		return ERR;
	}
	offset++;
	// Check for repeat
	if (irparams.rawlen == 4 &&
	MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
     6f2:	89 2b       	or	r24, r25
     6f4:	99 f0       	breq	.+38     	; 0x71c <ir_decodeNEC+0x88>
	MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
		results->bits = 0;
     6f6:	f3 01       	movw	r30, r6
     6f8:	11 86       	std	Z+9, r1	; 0x09
     6fa:	10 86       	std	Z+8, r1	; 0x08
		results->value = REPEAT;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	9f ef       	ldi	r25, 0xFF	; 255
     700:	dc 01       	movw	r26, r24
     702:	84 83       	std	Z+4, r24	; 0x04
     704:	95 83       	std	Z+5, r25	; 0x05
     706:	a6 83       	std	Z+6, r26	; 0x06
     708:	b7 83       	std	Z+7, r27	; 0x07
		results->decode_type = NEC;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	80 83       	st	Z, r24
		return DECODED;
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	73 c0       	rjmp	.+230    	; 0x802 <ir_decodeNEC+0x16e>
	}
	if (irparams.rawlen < 2 * NEC_BITS + 4) {
     71c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     720:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     724:	84 34       	cpi	r24, 0x44	; 68
     726:	91 05       	cpc	r25, r1
     728:	08 f4       	brcc	.+2      	; 0x72c <ir_decodeNEC+0x98>
     72a:	5c c0       	rjmp	.+184    	; 0x7e4 <ir_decodeNEC+0x150>
		return ERR;
	}
	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
     72c:	f6 01       	movw	r30, r12
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	95 81       	ldd	r25, Z+5	; 0x05
     732:	64 e9       	ldi	r22, 0x94	; 148
     734:	71 e1       	ldi	r23, 0x11	; 17
     736:	d4 de       	rcall	.-600    	; 0x4e0 <MATCH_SPACE>
     738:	89 2b       	or	r24, r25
     73a:	09 f4       	brne	.+2      	; 0x73e <ir_decodeNEC+0xaa>
     73c:	57 c0       	rjmp	.+174    	; 0x7ec <ir_decodeNEC+0x158>
     73e:	03 e0       	ldi	r16, 0x03	; 3
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	81 2c       	mov	r8, r1
     744:	91 2c       	mov	r9, r1
     746:	54 01       	movw	r10, r8
     748:	e1 2c       	mov	r14, r1
     74a:	f1 2c       	mov	r15, r1
     74c:	31 c0       	rjmp	.+98     	; 0x7b0 <ir_decodeNEC+0x11c>
		return ERR;
	}
	offset++;
	for (i = 0; i < NEC_BITS; i++) {
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
     74e:	f8 01       	movw	r30, r16
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ec 0d       	add	r30, r12
     756:	fd 1d       	adc	r31, r13
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	60 e3       	ldi	r22, 0x30	; 48
     75e:	72 e0       	ldi	r23, 0x02	; 2
     760:	bd de       	rcall	.-646    	; 0x4dc <MATCH_MARK>
     762:	89 2b       	or	r24, r25
     764:	09 f4       	brne	.+2      	; 0x768 <ir_decodeNEC+0xd4>
     766:	46 c0       	rjmp	.+140    	; 0x7f4 <ir_decodeNEC+0x160>
			return ERR;
		}
		offset++;
     768:	e8 01       	movw	r28, r16
     76a:	21 96       	adiw	r28, 0x01	; 1
		if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
     76c:	cc 0f       	add	r28, r28
     76e:	dd 1f       	adc	r29, r29
     770:	cc 0d       	add	r28, r12
     772:	dd 1d       	adc	r29, r13
     774:	88 81       	ld	r24, Y
     776:	99 81       	ldd	r25, Y+1	; 0x01
     778:	60 e4       	ldi	r22, 0x40	; 64
     77a:	76 e0       	ldi	r23, 0x06	; 6
     77c:	b1 de       	rcall	.-670    	; 0x4e0 <MATCH_SPACE>
     77e:	89 2b       	or	r24, r25
     780:	39 f0       	breq	.+14     	; 0x790 <ir_decodeNEC+0xfc>
			data = (data << 1) | 1;
     782:	88 0c       	add	r8, r8
     784:	99 1c       	adc	r9, r9
     786:	aa 1c       	adc	r10, r10
     788:	bb 1c       	adc	r11, r11
     78a:	68 94       	set
     78c:	80 f8       	bld	r8, 0
		}
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <ir_decodeNEC+0x112>
     790:	88 81       	ld	r24, Y
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	60 e3       	ldi	r22, 0x30	; 48
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	a3 de       	rcall	.-698    	; 0x4e0 <MATCH_SPACE>
     79a:	89 2b       	or	r24, r25
     79c:	79 f1       	breq	.+94     	; 0x7fc <ir_decodeNEC+0x168>
			data <<= 1;
     79e:	88 0c       	add	r8, r8
     7a0:	99 1c       	adc	r9, r9
     7a2:	aa 1c       	adc	r10, r10
     7a4:	bb 1c       	adc	r11, r11
		}
		else {
			return ERR;
		}
		offset++;
     7a6:	0e 5f       	subi	r16, 0xFE	; 254
     7a8:	1f 4f       	sbci	r17, 0xFF	; 255
	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
		return ERR;
	}
	offset++;
	for (i = 0; i < NEC_BITS; i++) {
     7aa:	ff ef       	ldi	r31, 0xFF	; 255
     7ac:	ef 1a       	sub	r14, r31
     7ae:	ff 0a       	sbc	r15, r31
     7b0:	80 e2       	ldi	r24, 0x20	; 32
     7b2:	e8 16       	cp	r14, r24
     7b4:	f1 04       	cpc	r15, r1
     7b6:	5c f2       	brlt	.-106    	; 0x74e <ir_decodeNEC+0xba>
			return ERR;
		}
		offset++;
	}
	// Success
	results->bits = NEC_BITS;
     7b8:	80 e2       	ldi	r24, 0x20	; 32
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	f3 01       	movw	r30, r6
     7be:	91 87       	std	Z+9, r25	; 0x09
     7c0:	80 87       	std	Z+8, r24	; 0x08
	results->value = data;
     7c2:	84 82       	std	Z+4, r8	; 0x04
     7c4:	95 82       	std	Z+5, r9	; 0x05
     7c6:	a6 82       	std	Z+6, r10	; 0x06
     7c8:	b7 82       	std	Z+7, r11	; 0x07
	results->decode_type = NEC;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
	return DECODED;
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	13 c0       	rjmp	.+38     	; 0x802 <ir_decodeNEC+0x16e>
	int i = 0;
	long data = 0;
	int offset = 1; // Skip first space
	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
		return ERR;
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	0f c0       	rjmp	.+30     	; 0x802 <ir_decodeNEC+0x16e>
		results->value = REPEAT;
		results->decode_type = NEC;
		return DECODED;
	}
	if (irparams.rawlen < 2 * NEC_BITS + 4) {
		return ERR;
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	cb 01       	movw	r24, r22
     7ea:	0b c0       	rjmp	.+22     	; 0x802 <ir_decodeNEC+0x16e>
	}
	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
		return ERR;
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	cb 01       	movw	r24, r22
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <ir_decodeNEC+0x16e>
	}
	offset++;
	for (i = 0; i < NEC_BITS; i++) {
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
			return ERR;
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	cb 01       	movw	r24, r22
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <ir_decodeNEC+0x16e>
		}
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
			data <<= 1;
		}
		else {
			return ERR;
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	cb 01       	movw	r24, r22
	// Success
	results->bits = NEC_BITS;
	results->value = data;
	results->decode_type = NEC;
	return DECODED;
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	7f 90       	pop	r7
     81c:	6f 90       	pop	r6
     81e:	08 95       	ret

00000820 <ir_decodeSony>:
  results->decode_type = SIGMA;
  return DECODED;
}


static long ir_decodeSony(decode_results *results) {
     820:	8f 92       	push	r8
     822:	9f 92       	push	r9
     824:	af 92       	push	r10
     826:	bf 92       	push	r11
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Dont skip first space, check its size
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
     838:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     83c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     840:	2a 31       	cpi	r18, 0x1A	; 26
     842:	31 05       	cpc	r19, r1
     844:	08 f4       	brcc	.+2      	; 0x848 <ir_decodeSony+0x28>
     846:	81 c0       	rjmp	.+258    	; 0x94a <__stack+0x4b>
  }
  

  // Some Sony's deliver repeats fast after first
  // unfortunately can't spot difference from of repeat from two fast clicks
  if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
     848:	fc 01       	movw	r30, r24
     84a:	e2 84       	ldd	r14, Z+10	; 0x0a
     84c:	f3 84       	ldd	r15, Z+11	; 0x0b
     84e:	f7 01       	movw	r30, r14
     850:	20 81       	ld	r18, Z
     852:	31 81       	ldd	r19, Z+1	; 0x01
     854:	24 3f       	cpi	r18, 0xF4	; 244
     856:	31 40       	sbci	r19, 0x01	; 1
     858:	98 f4       	brcc	.+38     	; 0x880 <ir_decodeSony+0x60>
    results->bits = 0;
     85a:	fc 01       	movw	r30, r24
     85c:	11 86       	std	Z+9, r1	; 0x09
     85e:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     860:	4f ef       	ldi	r20, 0xFF	; 255
     862:	5f ef       	ldi	r21, 0xFF	; 255
     864:	ba 01       	movw	r22, r20
     866:	44 83       	std	Z+4, r20	; 0x04
     868:	55 83       	std	Z+5, r21	; 0x05
     86a:	66 83       	std	Z+6, r22	; 0x06
     86c:	77 83       	std	Z+7, r23	; 0x07
    results->decode_type = SANYO;
     86e:	29 e0       	ldi	r18, 0x09	; 9
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	31 83       	std	Z+1, r19	; 0x01
     874:	20 83       	st	Z, r18
    return DECODED;
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	70 c0       	rjmp	.+224    	; 0x960 <__stack+0x61>
     880:	6c 01       	movw	r12, r24
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
     882:	f7 01       	movw	r30, r14
     884:	82 81       	ldd	r24, Z+2	; 0x02
     886:	93 81       	ldd	r25, Z+3	; 0x03
     888:	60 e6       	ldi	r22, 0x60	; 96
     88a:	79 e0       	ldi	r23, 0x09	; 9
     88c:	27 de       	rcall	.-946    	; 0x4dc <MATCH_MARK>
     88e:	89 2b       	or	r24, r25
     890:	09 f4       	brne	.+2      	; 0x894 <ir_decodeSony+0x74>
     892:	5f c0       	rjmp	.+190    	; 0x952 <__stack+0x53>
     894:	02 e0       	ldi	r16, 0x02	; 2
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	81 2c       	mov	r8, r1
     89a:	91 2c       	mov	r9, r1
     89c:	54 01       	movw	r10, r8
     89e:	2b c0       	rjmp	.+86     	; 0x8f6 <ir_decodeSony+0xd6>
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
     8a0:	f8 01       	movw	r30, r16
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0d       	add	r30, r14
     8a8:	ff 1d       	adc	r31, r15
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	68 e5       	ldi	r22, 0x58	; 88
     8b0:	72 e0       	ldi	r23, 0x02	; 2
     8b2:	16 de       	rcall	.-980    	; 0x4e0 <MATCH_SPACE>
     8b4:	89 2b       	or	r24, r25
     8b6:	41 f1       	breq	.+80     	; 0x908 <__stack+0x9>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
     8b8:	cc 0f       	add	r28, r28
     8ba:	dd 1f       	adc	r29, r29
     8bc:	ce 0d       	add	r28, r14
     8be:	df 1d       	adc	r29, r15
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	60 eb       	ldi	r22, 0xB0	; 176
     8c6:	74 e0       	ldi	r23, 0x04	; 4
     8c8:	09 de       	rcall	.-1006   	; 0x4dc <MATCH_MARK>
     8ca:	89 2b       	or	r24, r25
     8cc:	39 f0       	breq	.+14     	; 0x8dc <ir_decodeSony+0xbc>
      data = (data << 1) | 1;
     8ce:	88 0c       	add	r8, r8
     8d0:	99 1c       	adc	r9, r9
     8d2:	aa 1c       	adc	r10, r10
     8d4:	bb 1c       	adc	r11, r11
     8d6:	68 94       	set
     8d8:	80 f8       	bld	r8, 0
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <ir_decodeSony+0xd2>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
     8dc:	88 81       	ld	r24, Y
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	68 e5       	ldi	r22, 0x58	; 88
     8e2:	72 e0       	ldi	r23, 0x02	; 2
     8e4:	fb dd       	rcall	.-1034   	; 0x4dc <MATCH_MARK>
     8e6:	89 2b       	or	r24, r25
     8e8:	c1 f1       	breq	.+112    	; 0x95a <__stack+0x5b>
      data <<= 1;
     8ea:	88 0c       	add	r8, r8
     8ec:	99 1c       	adc	r9, r9
     8ee:	aa 1c       	adc	r10, r10
     8f0:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
     8f2:	0e 5f       	subi	r16, 0xFE	; 254
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     8f6:	e8 01       	movw	r28, r16
     8f8:	21 96       	adiw	r28, 0x01	; 1
     8fa:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     8fe:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     902:	c8 17       	cp	r28, r24
     904:	d9 07       	cpc	r29, r25
     906:	60 f2       	brcs	.-104    	; 0x8a0 <ir_decodeSony+0x80>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     908:	01 50       	subi	r16, 0x01	; 1
     90a:	11 09       	sbc	r17, r1
     90c:	c8 01       	movw	r24, r16
     90e:	99 23       	and	r25, r25
     910:	0c f4       	brge	.+2      	; 0x914 <__stack+0x15>
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	95 95       	asr	r25
     916:	87 95       	ror	r24
     918:	f6 01       	movw	r30, r12
     91a:	91 87       	std	Z+9, r25	; 0x09
     91c:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     91e:	0c 97       	sbiw	r24, 0x0c	; 12
     920:	34 f4       	brge	.+12     	; 0x92e <__stack+0x2f>
    results->bits = 0;
     922:	11 86       	std	Z+9, r1	; 0x09
     924:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	cb 01       	movw	r24, r22
     92c:	19 c0       	rjmp	.+50     	; 0x960 <__stack+0x61>
  }
  results->value = data;
     92e:	f6 01       	movw	r30, r12
     930:	84 82       	std	Z+4, r8	; 0x04
     932:	95 82       	std	Z+5, r9	; 0x05
     934:	a6 82       	std	Z+6, r10	; 0x06
     936:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SONY;
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	80 83       	st	Z, r24
  return DECODED;
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0b c0       	rjmp	.+22     	; 0x960 <__stack+0x61>

static long ir_decodeSony(decode_results *results) {
  long data = 0;
  int offset = 0; // Dont skip first space, check its size
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
    return ERR;
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	cb 01       	movw	r24, r22
     950:	07 c0       	rjmp	.+14     	; 0x960 <__stack+0x61>
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	cb 01       	movw	r24, r22
     958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = SONY;
  return DECODED;
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	08 95       	ret

0000097a <ir_decodeSanyo>:

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeSanyo(decode_results *results) {
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
     992:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     996:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     99a:	2a 31       	cpi	r18, 0x1A	; 26
     99c:	31 05       	cpc	r19, r1
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <ir_decodeSanyo+0x28>
     9a0:	8a c0       	rjmp	.+276    	; 0xab6 <ir_decodeSanyo+0x13c>
    return ERR;
  }
 
  // Initial space  
  if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
     9a2:	fc 01       	movw	r30, r24
     9a4:	e2 84       	ldd	r14, Z+10	; 0x0a
     9a6:	f3 84       	ldd	r15, Z+11	; 0x0b
     9a8:	f7 01       	movw	r30, r14
     9aa:	20 81       	ld	r18, Z
     9ac:	31 81       	ldd	r19, Z+1	; 0x01
     9ae:	20 32       	cpi	r18, 0x20	; 32
     9b0:	33 40       	sbci	r19, 0x03	; 3
     9b2:	98 f4       	brcc	.+38     	; 0x9da <ir_decodeSanyo+0x60>
    results->bits = 0;
     9b4:	fc 01       	movw	r30, r24
     9b6:	11 86       	std	Z+9, r1	; 0x09
     9b8:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     9ba:	4f ef       	ldi	r20, 0xFF	; 255
     9bc:	5f ef       	ldi	r21, 0xFF	; 255
     9be:	ba 01       	movw	r22, r20
     9c0:	44 83       	std	Z+4, r20	; 0x04
     9c2:	55 83       	std	Z+5, r21	; 0x05
     9c4:	66 83       	std	Z+6, r22	; 0x06
     9c6:	77 83       	std	Z+7, r23	; 0x07
    results->decode_type = SANYO;
     9c8:	29 e0       	ldi	r18, 0x09	; 9
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	31 83       	std	Z+1, r19	; 0x01
     9ce:	20 83       	st	Z, r18
    return DECODED;
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	7d c0       	rjmp	.+250    	; 0xad4 <ir_decodeSanyo+0x15a>
     9da:	6c 01       	movw	r12, r24
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     9dc:	f7 01       	movw	r30, r14
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	6c ea       	ldi	r22, 0xAC	; 172
     9e4:	7d e0       	ldi	r23, 0x0D	; 13
     9e6:	7a dd       	rcall	.-1292   	; 0x4dc <MATCH_MARK>
     9e8:	89 2b       	or	r24, r25
     9ea:	09 f4       	brne	.+2      	; 0x9ee <ir_decodeSanyo+0x74>
     9ec:	68 c0       	rjmp	.+208    	; 0xabe <ir_decodeSanyo+0x144>
    return ERR;
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     9ee:	f7 01       	movw	r30, r14
     9f0:	84 81       	ldd	r24, Z+4	; 0x04
     9f2:	95 81       	ldd	r25, Z+5	; 0x05
     9f4:	6c ea       	ldi	r22, 0xAC	; 172
     9f6:	7d e0       	ldi	r23, 0x0D	; 13
     9f8:	71 dd       	rcall	.-1310   	; 0x4dc <MATCH_MARK>
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f4       	brne	.+2      	; 0xa00 <ir_decodeSanyo+0x86>
     9fe:	63 c0       	rjmp	.+198    	; 0xac6 <ir_decodeSanyo+0x14c>
     a00:	03 e0       	ldi	r16, 0x03	; 3
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	81 2c       	mov	r8, r1
     a06:	91 2c       	mov	r9, r1
     a08:	54 01       	movw	r10, r8
     a0a:	2b c0       	rjmp	.+86     	; 0xa62 <ir_decodeSanyo+0xe8>
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
     a0c:	f8 01       	movw	r30, r16
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0d       	add	r30, r14
     a14:	ff 1d       	adc	r31, r15
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	66 eb       	ldi	r22, 0xB6	; 182
     a1c:	73 e0       	ldi	r23, 0x03	; 3
     a1e:	60 dd       	rcall	.-1344   	; 0x4e0 <MATCH_SPACE>
     a20:	89 2b       	or	r24, r25
     a22:	41 f1       	breq	.+80     	; 0xa74 <ir_decodeSanyo+0xfa>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
     a24:	cc 0f       	add	r28, r28
     a26:	dd 1f       	adc	r29, r29
     a28:	ce 0d       	add	r28, r14
     a2a:	df 1d       	adc	r29, r15
     a2c:	88 81       	ld	r24, Y
     a2e:	99 81       	ldd	r25, Y+1	; 0x01
     a30:	60 e6       	ldi	r22, 0x60	; 96
     a32:	79 e0       	ldi	r23, 0x09	; 9
     a34:	53 dd       	rcall	.-1370   	; 0x4dc <MATCH_MARK>
     a36:	89 2b       	or	r24, r25
     a38:	39 f0       	breq	.+14     	; 0xa48 <ir_decodeSanyo+0xce>
      data = (data << 1) | 1;
     a3a:	88 0c       	add	r8, r8
     a3c:	99 1c       	adc	r9, r9
     a3e:	aa 1c       	adc	r10, r10
     a40:	bb 1c       	adc	r11, r11
     a42:	68 94       	set
     a44:	80 f8       	bld	r8, 0
     a46:	0b c0       	rjmp	.+22     	; 0xa5e <ir_decodeSanyo+0xe4>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
     a48:	88 81       	ld	r24, Y
     a4a:	99 81       	ldd	r25, Y+1	; 0x01
     a4c:	6c eb       	ldi	r22, 0xBC	; 188
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	45 dd       	rcall	.-1398   	; 0x4dc <MATCH_MARK>
     a52:	89 2b       	or	r24, r25
     a54:	e1 f1       	breq	.+120    	; 0xace <ir_decodeSanyo+0x154>
      data <<= 1;
     a56:	88 0c       	add	r8, r8
     a58:	99 1c       	adc	r9, r9
     a5a:	aa 1c       	adc	r10, r10
     a5c:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
     a5e:	0e 5f       	subi	r16, 0xFE	; 254
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     a62:	e8 01       	movw	r28, r16
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     a6a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     a6e:	c8 17       	cp	r28, r24
     a70:	d9 07       	cpc	r29, r25
     a72:	60 f2       	brcs	.-104    	; 0xa0c <ir_decodeSanyo+0x92>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     a74:	01 50       	subi	r16, 0x01	; 1
     a76:	11 09       	sbc	r17, r1
     a78:	c8 01       	movw	r24, r16
     a7a:	99 23       	and	r25, r25
     a7c:	0c f4       	brge	.+2      	; 0xa80 <ir_decodeSanyo+0x106>
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	95 95       	asr	r25
     a82:	87 95       	ror	r24
     a84:	f6 01       	movw	r30, r12
     a86:	91 87       	std	Z+9, r25	; 0x09
     a88:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     a8a:	0c 97       	sbiw	r24, 0x0c	; 12
     a8c:	34 f4       	brge	.+12     	; 0xa9a <ir_decodeSanyo+0x120>
    results->bits = 0;
     a8e:	11 86       	std	Z+9, r1	; 0x09
     a90:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	cb 01       	movw	r24, r22
     a98:	1d c0       	rjmp	.+58     	; 0xad4 <ir_decodeSanyo+0x15a>
  }
  results->value = data;
     a9a:	f6 01       	movw	r30, r12
     a9c:	84 82       	std	Z+4, r8	; 0x04
     a9e:	95 82       	std	Z+5, r9	; 0x05
     aa0:	a6 82       	std	Z+6, r10	; 0x06
     aa2:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SANYO;
     aa4:	89 e0       	ldi	r24, 0x09	; 9
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	91 83       	std	Z+1, r25	; 0x01
     aaa:	80 83       	st	Z, r24
  return DECODED;
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0f c0       	rjmp	.+30     	; 0xad4 <ir_decodeSanyo+0x15a>
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeSanyo(decode_results *results) {
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
    return ERR;
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	cb 01       	movw	r24, r22
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <ir_decodeSanyo+0x15a>
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	cb 01       	movw	r24, r22
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <ir_decodeSanyo+0x15a>
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	cb 01       	movw	r24, r22
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <ir_decodeSanyo+0x15a>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = SANYO;
  return DECODED;
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	08 95       	ret

00000aee <ir_decodeMitsubishi>:

// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeMitsubishi(decode_results *results) {
     aee:	6f 92       	push	r6
     af0:	7f 92       	push	r7
     af2:	8f 92       	push	r8
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
     b0a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     b0e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     b12:	22 32       	cpi	r18, 0x22	; 34
     b14:	31 05       	cpc	r19, r1
     b16:	08 f4       	brcc	.+2      	; 0xb1a <ir_decodeMitsubishi+0x2c>
     b18:	6e c0       	rjmp	.+220    	; 0xbf6 <ir_decodeMitsubishi+0x108>
     b1a:	3c 01       	movw	r6, r24

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7 

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     b1c:	fc 01       	movw	r30, r24
     b1e:	c2 84       	ldd	r12, Z+10	; 0x0a
     b20:	d3 84       	ldd	r13, Z+11	; 0x0b
     b22:	f6 01       	movw	r30, r12
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	6e e5       	ldi	r22, 0x5E	; 94
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	d7 dc       	rcall	.-1618   	; 0x4dc <MATCH_MARK>
     b2e:	89 2b       	or	r24, r25
     b30:	09 f4       	brne	.+2      	; 0xb34 <ir_decodeMitsubishi+0x46>
     b32:	65 c0       	rjmp	.+202    	; 0xbfe <ir_decodeMitsubishi+0x110>
     b34:	02 e0       	ldi	r16, 0x02	; 2
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	81 2c       	mov	r8, r1
     b3a:	91 2c       	mov	r9, r1
     b3c:	54 01       	movw	r10, r8
     b3e:	2d c0       	rjmp	.+90     	; 0xb9a <ir_decodeMitsubishi+0xac>
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
    if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK)) {
     b40:	e8 01       	movw	r28, r16
     b42:	cc 0f       	add	r28, r28
     b44:	dd 1f       	adc	r29, r29
     b46:	cc 0d       	add	r28, r12
     b48:	dd 1d       	adc	r29, r13
     b4a:	88 81       	ld	r24, Y
     b4c:	99 81       	ldd	r25, Y+1	; 0x01
     b4e:	6e e9       	ldi	r22, 0x9E	; 158
     b50:	77 e0       	ldi	r23, 0x07	; 7
     b52:	c4 dc       	rcall	.-1656   	; 0x4dc <MATCH_MARK>
     b54:	89 2b       	or	r24, r25
     b56:	39 f0       	breq	.+14     	; 0xb66 <ir_decodeMitsubishi+0x78>
      data = (data << 1) | 1;
     b58:	88 0c       	add	r8, r8
     b5a:	99 1c       	adc	r9, r9
     b5c:	aa 1c       	adc	r10, r10
     b5e:	bb 1c       	adc	r11, r11
     b60:	68 94       	set
     b62:	80 f8       	bld	r8, 0
     b64:	0c c0       	rjmp	.+24     	; 0xb7e <ir_decodeMitsubishi+0x90>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
     b66:	88 81       	ld	r24, Y
     b68:	99 81       	ldd	r25, Y+1	; 0x01
     b6a:	6e ee       	ldi	r22, 0xEE	; 238
     b6c:	72 e0       	ldi	r23, 0x02	; 2
     b6e:	b6 dc       	rcall	.-1684   	; 0x4dc <MATCH_MARK>
     b70:	89 2b       	or	r24, r25
     b72:	09 f4       	brne	.+2      	; 0xb76 <ir_decodeMitsubishi+0x88>
     b74:	48 c0       	rjmp	.+144    	; 0xc06 <ir_decodeMitsubishi+0x118>
      data <<= 1;
     b76:	88 0c       	add	r8, r8
     b78:	99 1c       	adc	r9, r9
     b7a:	aa 1c       	adc	r10, r10
     b7c:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     b7e:	f7 01       	movw	r30, r14
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ec 0d       	add	r30, r12
     b86:	fd 1d       	adc	r31, r13
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	6e e5       	ldi	r22, 0x5E	; 94
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	a7 dc       	rcall	.-1714   	; 0x4e0 <MATCH_SPACE>
     b92:	89 2b       	or	r24, r25
     b94:	71 f0       	breq	.+28     	; 0xbb2 <ir_decodeMitsubishi+0xc4>
      break;
    }
    offset++;
     b96:	0e 5f       	subi	r16, 0xFE	; 254
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
     b9a:	78 01       	movw	r14, r16
     b9c:	ff ef       	ldi	r31, 0xFF	; 255
     b9e:	ef 1a       	sub	r14, r31
     ba0:	ff 0a       	sbc	r15, r31
     ba2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     ba6:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     baa:	e8 16       	cp	r14, r24
     bac:	f9 06       	cpc	r15, r25
     bae:	40 f2       	brcs	.-112    	; 0xb40 <ir_decodeMitsubishi+0x52>
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <ir_decodeMitsubishi+0xc6>
      data <<= 1;
    } 
    else {
      return ERR;
    }
    offset++;
     bb2:	87 01       	movw	r16, r14
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     bb4:	01 50       	subi	r16, 0x01	; 1
     bb6:	11 09       	sbc	r17, r1
     bb8:	c8 01       	movw	r24, r16
     bba:	99 23       	and	r25, r25
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <ir_decodeMitsubishi+0xd2>
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	95 95       	asr	r25
     bc2:	87 95       	ror	r24
     bc4:	f3 01       	movw	r30, r6
     bc6:	91 87       	std	Z+9, r25	; 0x09
     bc8:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < MITSUBISHI_BITS) {
     bca:	40 97       	sbiw	r24, 0x10	; 16
     bcc:	34 f4       	brge	.+12     	; 0xbda <ir_decodeMitsubishi+0xec>
    results->bits = 0;
     bce:	11 86       	std	Z+9, r1	; 0x09
     bd0:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	cb 01       	movw	r24, r22
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <ir_decodeMitsubishi+0x11e>
  }
  results->value = data;
     bda:	f3 01       	movw	r30, r6
     bdc:	84 82       	std	Z+4, r8	; 0x04
     bde:	95 82       	std	Z+5, r9	; 0x05
     be0:	a6 82       	std	Z+6, r10	; 0x06
     be2:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = MITSUBISHI;
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24
  return DECODED;
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0b c0       	rjmp	.+22     	; 0xc0c <ir_decodeMitsubishi+0x11e>
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeMitsubishi(decode_results *results) {
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
    return ERR;
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	cb 01       	movw	r24, r22
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <ir_decodeMitsubishi+0x11e>
  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7 

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	cb 01       	movw	r24, r22
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <ir_decodeMitsubishi+0x11e>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = MITSUBISHI;
  return DECODED;
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	cf 90       	pop	r12
     c1c:	bf 90       	pop	r11
     c1e:	af 90       	pop	r10
     c20:	9f 90       	pop	r9
     c22:	8f 90       	pop	r8
     c24:	7f 90       	pop	r7
     c26:	6f 90       	pop	r6
     c28:	08 95       	ret

00000c2a <ir_decodeRC6>:
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}

static long ir_decodeRC6(decode_results *results) {
     c2a:	4f 92       	push	r4
     c2c:	5f 92       	push	r5
     c2e:	6f 92       	push	r6
     c30:	7f 92       	push	r7
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	00 d0       	rcall	.+0      	; 0xc48 <ir_decodeRC6+0x1e>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <ir_decodeRC6+0x20>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
  int offset = 1; // Skip first space
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	3a 83       	std	Y+2, r19	; 0x02
     c54:	29 83       	std	Y+1, r18	; 0x01
  long data = 0;
  int used = 0;
     c56:	1c 82       	std	Y+4, r1	; 0x04
     c58:	1b 82       	std	Y+3, r1	; 0x03
  int nbits = 0;
  
  if (results->rawlen < MIN_RC6_SAMPLES) {
     c5a:	fc 01       	movw	r30, r24
     c5c:	24 85       	ldd	r18, Z+12	; 0x0c
     c5e:	35 85       	ldd	r19, Z+13	; 0x0d
     c60:	12 16       	cp	r1, r18
     c62:	13 06       	cpc	r1, r19
     c64:	0c f0       	brlt	.+2      	; 0xc68 <ir_decodeRC6+0x3e>
     c66:	aa c0       	rjmp	.+340    	; 0xdbc <ir_decodeRC6+0x192>
     c68:	8c 01       	movw	r16, r24
    return ERR;
  }
  
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
     c6a:	e2 84       	ldd	r14, Z+10	; 0x0a
     c6c:	f3 84       	ldd	r15, Z+11	; 0x0b
     c6e:	f7 01       	movw	r30, r14
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	6a e6       	ldi	r22, 0x6A	; 106
     c76:	7a e0       	ldi	r23, 0x0A	; 10
     c78:	31 dc       	rcall	.-1950   	; 0x4dc <MATCH_MARK>
     c7a:	89 2b       	or	r24, r25
     c7c:	09 f4       	brne	.+2      	; 0xc80 <ir_decodeRC6+0x56>
     c7e:	a2 c0       	rjmp	.+324    	; 0xdc4 <ir_decodeRC6+0x19a>
    return ERR;
  }
  offset++;
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
     c88:	f7 01       	movw	r30, r14
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	95 81       	ldd	r25, Z+5	; 0x05
     c8e:	69 e7       	ldi	r22, 0x79	; 121
     c90:	73 e0       	ldi	r23, 0x03	; 3
     c92:	26 dc       	rcall	.-1972   	; 0x4e0 <MATCH_SPACE>
     c94:	89 2b       	or	r24, r25
     c96:	09 f4       	brne	.+2      	; 0xc9a <ir_decodeRC6+0x70>
     c98:	99 c0       	rjmp	.+306    	; 0xdcc <ir_decodeRC6+0x1a2>
    return ERR;
  }
  offset++;
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
     ca2:	2c eb       	ldi	r18, 0xBC	; 188
     ca4:	31 e0       	ldi	r19, 0x01	; 1
     ca6:	ae 01       	movw	r20, r28
     ca8:	4d 5f       	subi	r20, 0xFD	; 253
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	c8 01       	movw	r24, r16
     cb4:	f1 da       	rcall	.-2590   	; 0x298 <ir_getRClevel>
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	09 f0       	breq	.+2      	; 0xcbc <ir_decodeRC6+0x92>
     cba:	8c c0       	rjmp	.+280    	; 0xdd4 <ir_decodeRC6+0x1aa>
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
     cbc:	2c eb       	ldi	r18, 0xBC	; 188
     cbe:	31 e0       	ldi	r19, 0x01	; 1
     cc0:	ae 01       	movw	r20, r28
     cc2:	4d 5f       	subi	r20, 0xFD	; 253
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	c8 01       	movw	r24, r16
     cce:	e4 da       	rcall	.-2616   	; 0x298 <ir_getRClevel>
     cd0:	89 2b       	or	r24, r25
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <ir_decodeRC6+0xac>
     cd4:	83 c0       	rjmp	.+262    	; 0xddc <ir_decodeRC6+0x1b2>
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	41 2c       	mov	r4, r1
     cdc:	51 2c       	mov	r5, r1
     cde:	32 01       	movw	r6, r4
     ce0:	55 c0       	rjmp	.+170    	; 0xd8c <ir_decodeRC6+0x162>

  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = ir_getRClevel(results, &offset, &used, RC6_T1);
     ce2:	2c eb       	ldi	r18, 0xBC	; 188
     ce4:	31 e0       	ldi	r19, 0x01	; 1
     ce6:	ae 01       	movw	r20, r28
     ce8:	4d 5f       	subi	r20, 0xFD	; 253
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	be 01       	movw	r22, r28
     cee:	6f 5f       	subi	r22, 0xFF	; 255
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	c8 01       	movw	r24, r16
     cf4:	d1 da       	rcall	.-2654   	; 0x298 <ir_getRClevel>
     cf6:	5c 01       	movw	r10, r24
    if (nbits == 3) {
     cf8:	f3 e0       	ldi	r31, 0x03	; 3
     cfa:	ef 16       	cp	r14, r31
     cfc:	f1 04       	cpc	r15, r1
     cfe:	71 f4       	brne	.+28     	; 0xd1c <ir_decodeRC6+0xf2>
      // T bit is double wide; make sure second half matches
      if (levelA != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     d00:	2c eb       	ldi	r18, 0xBC	; 188
     d02:	31 e0       	ldi	r19, 0x01	; 1
     d04:	ae 01       	movw	r20, r28
     d06:	4d 5f       	subi	r20, 0xFD	; 253
     d08:	5f 4f       	sbci	r21, 0xFF	; 255
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	c8 01       	movw	r24, r16
     d12:	c2 da       	rcall	.-2684   	; 0x298 <ir_getRClevel>
     d14:	a8 16       	cp	r10, r24
     d16:	b9 06       	cpc	r11, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <ir_decodeRC6+0xf2>
     d1a:	64 c0       	rjmp	.+200    	; 0xde4 <ir_decodeRC6+0x1ba>
    } 
    levelB = ir_getRClevel(results, &offset, &used, RC6_T1);
     d1c:	2c eb       	ldi	r18, 0xBC	; 188
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	ae 01       	movw	r20, r28
     d22:	4d 5f       	subi	r20, 0xFD	; 253
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	be 01       	movw	r22, r28
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	c8 01       	movw	r24, r16
     d2e:	b4 da       	rcall	.-2712   	; 0x298 <ir_getRClevel>
     d30:	6c 01       	movw	r12, r24
    if (nbits == 3) {
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	e8 16       	cp	r14, r24
     d36:	f1 04       	cpc	r15, r1
     d38:	71 f4       	brne	.+28     	; 0xd56 <ir_decodeRC6+0x12c>
      // T bit is double wide; make sure second half matches
      if (levelB != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     d3a:	2c eb       	ldi	r18, 0xBC	; 188
     d3c:	31 e0       	ldi	r19, 0x01	; 1
     d3e:	ae 01       	movw	r20, r28
     d40:	4d 5f       	subi	r20, 0xFD	; 253
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	be 01       	movw	r22, r28
     d46:	6f 5f       	subi	r22, 0xFF	; 255
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	c8 01       	movw	r24, r16
     d4c:	a5 da       	rcall	.-2742   	; 0x298 <ir_getRClevel>
     d4e:	c8 16       	cp	r12, r24
     d50:	d9 06       	cpc	r13, r25
     d52:	09 f0       	breq	.+2      	; 0xd56 <ir_decodeRC6+0x12c>
     d54:	4b c0       	rjmp	.+150    	; 0xdec <ir_decodeRC6+0x1c2>
    } 
    if (levelA == MARK && levelB == SPACE) { // reversed compared to RC5
     d56:	e1 e0       	ldi	r30, 0x01	; 1
     d58:	ae 16       	cp	r10, r30
     d5a:	b1 04       	cpc	r11, r1
     d5c:	51 f4       	brne	.+20     	; 0xd72 <ir_decodeRC6+0x148>
     d5e:	c1 14       	cp	r12, r1
     d60:	d1 04       	cpc	r13, r1
     d62:	39 f4       	brne	.+14     	; 0xd72 <ir_decodeRC6+0x148>
      // 1 bit
      data = (data << 1) | 1;
     d64:	44 0c       	add	r4, r4
     d66:	55 1c       	adc	r5, r5
     d68:	66 1c       	adc	r6, r6
     d6a:	77 1c       	adc	r7, r7
     d6c:	68 94       	set
     d6e:	40 f8       	bld	r4, 0
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <ir_decodeRC6+0x15c>
    } 
    else if (levelA == SPACE && levelB == MARK) {
     d72:	ab 28       	or	r10, r11
     d74:	f9 f5       	brne	.+126    	; 0xdf4 <ir_decodeRC6+0x1ca>
     d76:	ca 94       	dec	r12
     d78:	cd 28       	or	r12, r13
     d7a:	09 f0       	breq	.+2      	; 0xd7e <ir_decodeRC6+0x154>
     d7c:	3f c0       	rjmp	.+126    	; 0xdfc <ir_decodeRC6+0x1d2>
      // zero bit
      data <<= 1;
     d7e:	44 0c       	add	r4, r4
     d80:	55 1c       	adc	r5, r5
     d82:	66 1c       	adc	r6, r6
     d84:	77 1c       	adc	r7, r7

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;

  for (nbits = 0; offset < results->rawlen; nbits++) {
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	e8 1a       	sub	r14, r24
     d8a:	f8 0a       	sbc	r15, r24
     d8c:	f8 01       	movw	r30, r16
     d8e:	24 85       	ldd	r18, Z+12	; 0x0c
     d90:	35 85       	ldd	r19, Z+13	; 0x0d
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	0c f4       	brge	.+2      	; 0xd9e <ir_decodeRC6+0x174>
     d9c:	a2 cf       	rjmp	.-188    	; 0xce2 <ir_decodeRC6+0xb8>
    else {
      return ERR; // Error
    } 
  }
  // Success
  results->bits = nbits;
     d9e:	f1 86       	std	Z+9, r15	; 0x09
     da0:	e0 86       	std	Z+8, r14	; 0x08
  results->value = data;
     da2:	44 82       	std	Z+4, r4	; 0x04
     da4:	55 82       	std	Z+5, r5	; 0x05
     da6:	66 82       	std	Z+6, r6	; 0x06
     da8:	77 82       	std	Z+7, r7	; 0x07
  results->decode_type = RC6;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
  return DECODED;
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	23 c0       	rjmp	.+70     	; 0xe02 <ir_decodeRC6+0x1d8>
  long data = 0;
  int used = 0;
  int nbits = 0;
  
  if (results->rawlen < MIN_RC6_SAMPLES) {
    return ERR;
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	cb 01       	movw	r24, r22
     dc2:	1f c0       	rjmp	.+62     	; 0xe02 <ir_decodeRC6+0x1d8>
  }
  
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
    return ERR;
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1b c0       	rjmp	.+54     	; 0xe02 <ir_decodeRC6+0x1d8>
  }
  offset++;
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
    return ERR;
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	cb 01       	movw	r24, r22
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <ir_decodeRC6+0x1d8>
  }
  offset++;

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	cb 01       	movw	r24, r22
     dda:	13 c0       	rjmp	.+38     	; 0xe02 <ir_decodeRC6+0x1d8>
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	cb 01       	movw	r24, r22
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <ir_decodeRC6+0x1d8>
  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = ir_getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelA != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	cb 01       	movw	r24, r22
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <ir_decodeRC6+0x1d8>
    } 
    levelB = ir_getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelB != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	cb 01       	movw	r24, r22
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <ir_decodeRC6+0x1d8>
    else if (levelA == SPACE && levelB == MARK) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR; // Error
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	cb 01       	movw	r24, r22
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <ir_decodeRC6+0x1d8>
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	cb 01       	movw	r24, r22
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC6;
  return DECODED;
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	7f 90       	pop	r7
     e20:	6f 90       	pop	r6
     e22:	5f 90       	pop	r5
     e24:	4f 90       	pop	r4
     e26:	08 95       	ret

00000e28 <ir_decodePanasonic>:

static long ir_decodePanasonic(decode_results *results) {
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	4c 01       	movw	r8, r24
    unsigned long data = 0;
    int offset = 1;
    int i = 0;
    
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
     e46:	fc 01       	movw	r30, r24
     e48:	02 85       	ldd	r16, Z+10	; 0x0a
     e4a:	13 85       	ldd	r17, Z+11	; 0x0b
     e4c:	f8 01       	movw	r30, r16
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	6e ea       	ldi	r22, 0xAE	; 174
     e54:	7d e0       	ldi	r23, 0x0D	; 13
     e56:	42 db       	rcall	.-2428   	; 0x4dc <MATCH_MARK>
     e58:	89 2b       	or	r24, r25
     e5a:	09 f4       	brne	.+2      	; 0xe5e <ir_decodePanasonic+0x36>
     e5c:	9a c0       	rjmp	.+308    	; 0xf92 <ir_decodePanasonic+0x16a>
        return ERR;
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
     e5e:	f8 01       	movw	r30, r16
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	95 81       	ldd	r25, Z+5	; 0x05
     e64:	66 ed       	ldi	r22, 0xD6	; 214
     e66:	76 e0       	ldi	r23, 0x06	; 6
     e68:	39 db       	rcall	.-2446   	; 0x4dc <MATCH_MARK>
     e6a:	89 2b       	or	r24, r25
     e6c:	09 f4       	brne	.+2      	; 0xe70 <ir_decodePanasonic+0x48>
     e6e:	95 c0       	rjmp	.+298    	; 0xf9a <ir_decodePanasonic+0x172>
     e70:	61 2c       	mov	r6, r1
     e72:	71 2c       	mov	r7, r1
     e74:	c3 e0       	ldi	r28, 0x03	; 3
     e76:	d0 e0       	ldi	r29, 0x00	; 0
     e78:	c1 2c       	mov	r12, r1
     e7a:	d1 2c       	mov	r13, r1
     e7c:	76 01       	movw	r14, r12
     e7e:	35 c0       	rjmp	.+106    	; 0xeea <ir_decodePanasonic+0xc2>
    }
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
     e80:	5e 01       	movw	r10, r28
     e82:	ff ef       	ldi	r31, 0xFF	; 255
     e84:	af 1a       	sub	r10, r31
     e86:	bf 0a       	sbc	r11, r31
     e88:	fe 01       	movw	r30, r28
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e0 0f       	add	r30, r16
     e90:	f1 1f       	adc	r31, r17
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	66 ef       	ldi	r22, 0xF6	; 246
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	20 db       	rcall	.-2496   	; 0x4dc <MATCH_MARK>
     e9c:	89 2b       	or	r24, r25
     e9e:	09 f4       	brne	.+2      	; 0xea2 <ir_decodePanasonic+0x7a>
     ea0:	80 c0       	rjmp	.+256    	; 0xfa2 <ir_decodePanasonic+0x17a>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
     ea2:	aa 0c       	add	r10, r10
     ea4:	bb 1c       	adc	r11, r11
     ea6:	a0 0e       	add	r10, r16
     ea8:	b1 1e       	adc	r11, r17
     eaa:	f5 01       	movw	r30, r10
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	6c ed       	ldi	r22, 0xDC	; 220
     eb2:	74 e0       	ldi	r23, 0x04	; 4
     eb4:	15 db       	rcall	.-2518   	; 0x4e0 <MATCH_SPACE>
     eb6:	89 2b       	or	r24, r25
     eb8:	39 f0       	breq	.+14     	; 0xec8 <ir_decodePanasonic+0xa0>
            data = (data << 1) | 1;
     eba:	cc 0c       	add	r12, r12
     ebc:	dd 1c       	adc	r13, r13
     ebe:	ee 1c       	adc	r14, r14
     ec0:	ff 1c       	adc	r15, r15
     ec2:	68 94       	set
     ec4:	c0 f8       	bld	r12, 0
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <ir_decodePanasonic+0xba>
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
     ec8:	f5 01       	movw	r30, r10
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	60 e9       	ldi	r22, 0x90	; 144
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	06 db       	rcall	.-2548   	; 0x4e0 <MATCH_SPACE>
     ed4:	89 2b       	or	r24, r25
     ed6:	09 f4       	brne	.+2      	; 0xeda <ir_decodePanasonic+0xb2>
     ed8:	68 c0       	rjmp	.+208    	; 0xfaa <ir_decodePanasonic+0x182>
            data <<= 1;
     eda:	cc 0c       	add	r12, r12
     edc:	dd 1c       	adc	r13, r13
     ede:	ee 1c       	adc	r14, r14
     ee0:	ff 1c       	adc	r15, r15
        } else {
            return ERR;
        }
        offset++;
     ee2:	22 96       	adiw	r28, 0x02	; 2
        return ERR;
    }
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
     ee4:	ff ef       	ldi	r31, 0xFF	; 255
     ee6:	6f 1a       	sub	r6, r31
     ee8:	7f 0a       	sbc	r7, r31
     eea:	80 e1       	ldi	r24, 0x10	; 16
     eec:	68 16       	cp	r6, r24
     eee:	71 04       	cpc	r7, r1
     ef0:	3c f2       	brlt	.-114    	; 0xe80 <ir_decodePanasonic+0x58>
        } else {
            return ERR;
        }
        offset++;
    }
    results->panasonicAddress = (unsigned int)(data);
     ef2:	f4 01       	movw	r30, r8
     ef4:	d3 82       	std	Z+3, r13	; 0x03
     ef6:	c2 82       	std	Z+2, r12	; 0x02
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
     ef8:	61 2c       	mov	r6, r1
     efa:	71 2c       	mov	r7, r1
     efc:	34 c0       	rjmp	.+104    	; 0xf66 <ir_decodePanasonic+0x13e>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
     efe:	5e 01       	movw	r10, r28
     f00:	ff ef       	ldi	r31, 0xFF	; 255
     f02:	af 1a       	sub	r10, r31
     f04:	bf 0a       	sbc	r11, r31
     f06:	fe 01       	movw	r30, r28
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	e0 0f       	add	r30, r16
     f0e:	f1 1f       	adc	r31, r17
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	66 ef       	ldi	r22, 0xF6	; 246
     f16:	71 e0       	ldi	r23, 0x01	; 1
     f18:	e1 da       	rcall	.-2622   	; 0x4dc <MATCH_MARK>
     f1a:	89 2b       	or	r24, r25
     f1c:	09 f4       	brne	.+2      	; 0xf20 <ir_decodePanasonic+0xf8>
     f1e:	49 c0       	rjmp	.+146    	; 0xfb2 <ir_decodePanasonic+0x18a>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
     f20:	aa 0c       	add	r10, r10
     f22:	bb 1c       	adc	r11, r11
     f24:	a0 0e       	add	r10, r16
     f26:	b1 1e       	adc	r11, r17
     f28:	f5 01       	movw	r30, r10
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	6c ed       	ldi	r22, 0xDC	; 220
     f30:	74 e0       	ldi	r23, 0x04	; 4
     f32:	d6 da       	rcall	.-2644   	; 0x4e0 <MATCH_SPACE>
     f34:	89 2b       	or	r24, r25
     f36:	39 f0       	breq	.+14     	; 0xf46 <ir_decodePanasonic+0x11e>
            data = (data << 1) | 1;
     f38:	cc 0c       	add	r12, r12
     f3a:	dd 1c       	adc	r13, r13
     f3c:	ee 1c       	adc	r14, r14
     f3e:	ff 1c       	adc	r15, r15
     f40:	68 94       	set
     f42:	c0 f8       	bld	r12, 0
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <ir_decodePanasonic+0x136>
     f46:	f5 01       	movw	r30, r10
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	60 e9       	ldi	r22, 0x90	; 144
     f4e:	71 e0       	ldi	r23, 0x01	; 1
     f50:	c7 da       	rcall	.-2674   	; 0x4e0 <MATCH_SPACE>
     f52:	89 2b       	or	r24, r25
     f54:	91 f1       	breq	.+100    	; 0xfba <ir_decodePanasonic+0x192>
            data <<= 1;
     f56:	cc 0c       	add	r12, r12
     f58:	dd 1c       	adc	r13, r13
     f5a:	ee 1c       	adc	r14, r14
     f5c:	ff 1c       	adc	r15, r15
        } else {
            return ERR;
        }
        offset++;
     f5e:	22 96       	adiw	r28, 0x02	; 2
        }
        offset++;
    }
    results->panasonicAddress = (unsigned int)(data);
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
     f60:	ff ef       	ldi	r31, 0xFF	; 255
     f62:	6f 1a       	sub	r6, r31
     f64:	7f 0a       	sbc	r7, r31
     f66:	80 e2       	ldi	r24, 0x20	; 32
     f68:	68 16       	cp	r6, r24
     f6a:	71 04       	cpc	r7, r1
     f6c:	44 f2       	brlt	.-112    	; 0xefe <ir_decodePanasonic+0xd6>
        } else {
            return ERR;
        }
        offset++;
    }
    results->value = (unsigned long)data;
     f6e:	f4 01       	movw	r30, r8
     f70:	c4 82       	std	Z+4, r12	; 0x04
     f72:	d5 82       	std	Z+5, r13	; 0x05
     f74:	e6 82       	std	Z+6, r14	; 0x06
     f76:	f7 82       	std	Z+7, r15	; 0x07
    
    results->decode_type = PANASONIC;
     f78:	87 e0       	ldi	r24, 0x07	; 7
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
    results->bits = PANASONIC_BITS;
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	91 87       	std	Z+9, r25	; 0x09
     f86:	80 87       	std	Z+8, r24	; 0x08
    return DECODED;
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	17 c0       	rjmp	.+46     	; 0xfc0 <ir_decodePanasonic+0x198>
    unsigned long data = 0;
    int offset = 1;
    int i = 0;
    
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
        return ERR;
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	cb 01       	movw	r24, r22
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <ir_decodePanasonic+0x198>
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
        return ERR;
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	cb 01       	movw	r24, r22
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <ir_decodePanasonic+0x198>
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
            return ERR;
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	cb 01       	movw	r24, r22
     fa8:	0b c0       	rjmp	.+22     	; 0xfc0 <ir_decodePanasonic+0x198>
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
        } else {
            return ERR;
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	cb 01       	movw	r24, r22
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <ir_decodePanasonic+0x198>
    }
    results->panasonicAddress = (unsigned int)(data);
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
            return ERR;
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	cb 01       	movw	r24, r22
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <ir_decodePanasonic+0x198>
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
        } else {
            return ERR;
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	cb 01       	movw	r24, r22
    results->value = (unsigned long)data;
    
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
    return DECODED;
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	7f 90       	pop	r7
     fda:	6f 90       	pop	r6
     fdc:	08 95       	ret

00000fde <ir_decodeJVC>:

static long ir_decodeJVC(decode_results *results) {
     fde:	6f 92       	push	r6
     fe0:	7f 92       	push	r7
     fe2:	8f 92       	push	r8
     fe4:	9f 92       	push	r9
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	8c 01       	movw	r16, r24
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
     ffc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
    1000:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
    1004:	82 97       	sbiw	r24, 0x22	; 34
    1006:	71 f5       	brne	.+92     	; 0x1064 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
    1008:	f8 01       	movw	r30, r16
    100a:	c2 85       	ldd	r28, Z+10	; 0x0a
    100c:	d3 85       	ldd	r29, Z+11	; 0x0b
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	68 e5       	ldi	r22, 0x58	; 88
    1014:	72 e0       	ldi	r23, 0x02	; 2
    1016:	62 da       	rcall	.-2876   	; 0x4dc <MATCH_MARK>
static long ir_decodeJVC(decode_results *results) {
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    1018:	89 2b       	or	r24, r25
    101a:	21 f1       	breq	.+72     	; 0x1064 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
    101c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <_edata+0xcc>
    1020:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <_edata+0xcd>
    1024:	e1 50       	subi	r30, 0x01	; 1
    1026:	f0 48       	sbci	r31, 0x80	; 128
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	ec 0f       	add	r30, r28
    102e:	fd 1f       	adc	r31, r29
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	68 e5       	ldi	r22, 0x58	; 88
    1036:	72 e0       	ldi	r23, 0x02	; 2
    1038:	51 da       	rcall	.-2910   	; 0x4dc <MATCH_MARK>
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
    103a:	89 2b       	or	r24, r25
    103c:	99 f0       	breq	.+38     	; 0x1064 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
        results->bits = 0;
    103e:	f8 01       	movw	r30, r16
    1040:	11 86       	std	Z+9, r1	; 0x09
    1042:	10 86       	std	Z+8, r1	; 0x08
        results->value = REPEAT;
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	dc 01       	movw	r26, r24
    104a:	84 83       	std	Z+4, r24	; 0x04
    104c:	95 83       	std	Z+5, r25	; 0x05
    104e:	a6 83       	std	Z+6, r26	; 0x06
    1050:	b7 83       	std	Z+7, r27	; 0x07
        results->decode_type = JVC;
    1052:	88 e0       	ldi	r24, 0x08	; 8
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
        return DECODED;
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	90 c0       	rjmp	.+288    	; 0x1184 <ir_decodeJVC+0x1a6>
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
    1064:	f8 01       	movw	r30, r16
    1066:	c2 84       	ldd	r12, Z+10	; 0x0a
    1068:	d3 84       	ldd	r13, Z+11	; 0x0b
    106a:	f6 01       	movw	r30, r12
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	60 e4       	ldi	r22, 0x40	; 64
    1072:	7f e1       	ldi	r23, 0x1F	; 31
    1074:	33 da       	rcall	.-2970   	; 0x4dc <MATCH_MARK>
    1076:	89 2b       	or	r24, r25
    1078:	09 f4       	brne	.+2      	; 0x107c <ir_decodeJVC+0x9e>
    107a:	6d c0       	rjmp	.+218    	; 0x1156 <ir_decodeJVC+0x178>
        return ERR;
    }
    offset++; 
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
    107c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
    1080:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
    1084:	81 97       	sbiw	r24, 0x21	; 33
    1086:	08 f4       	brcc	.+2      	; 0x108a <ir_decodeJVC+0xac>
    1088:	6a c0       	rjmp	.+212    	; 0x115e <ir_decodeJVC+0x180>
        return ERR;
    }
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
    108a:	f6 01       	movw	r30, r12
    108c:	84 81       	ldd	r24, Z+4	; 0x04
    108e:	95 81       	ldd	r25, Z+5	; 0x05
    1090:	60 ea       	ldi	r22, 0xA0	; 160
    1092:	7f e0       	ldi	r23, 0x0F	; 15
    1094:	25 da       	rcall	.-2998   	; 0x4e0 <MATCH_SPACE>
    1096:	89 2b       	or	r24, r25
    1098:	09 f4       	brne	.+2      	; 0x109c <ir_decodeJVC+0xbe>
    109a:	65 c0       	rjmp	.+202    	; 0x1166 <ir_decodeJVC+0x188>
    109c:	c3 e0       	ldi	r28, 0x03	; 3
    109e:	d0 e0       	ldi	r29, 0x00	; 0
    10a0:	81 2c       	mov	r8, r1
    10a2:	91 2c       	mov	r9, r1
    10a4:	54 01       	movw	r10, r8
    10a6:	61 2c       	mov	r6, r1
    10a8:	71 2c       	mov	r7, r1
    10aa:	34 c0       	rjmp	.+104    	; 0x1114 <ir_decodeJVC+0x136>
        return ERR;
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
    10ac:	fe 01       	movw	r30, r28
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ec 0d       	add	r30, r12
    10b4:	fd 1d       	adc	r31, r13
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	68 e5       	ldi	r22, 0x58	; 88
    10bc:	72 e0       	ldi	r23, 0x02	; 2
    10be:	0e da       	rcall	.-3044   	; 0x4dc <MATCH_MARK>
    10c0:	89 2b       	or	r24, r25
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <ir_decodeJVC+0xe8>
    10c4:	54 c0       	rjmp	.+168    	; 0x116e <ir_decodeJVC+0x190>
            return ERR;
        }
        offset++;
    10c6:	7e 01       	movw	r14, r28
    10c8:	ff ef       	ldi	r31, 0xFF	; 255
    10ca:	ef 1a       	sub	r14, r31
    10cc:	ff 0a       	sbc	r15, r31
        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
    10ce:	ee 0c       	add	r14, r14
    10d0:	ff 1c       	adc	r15, r15
    10d2:	ec 0c       	add	r14, r12
    10d4:	fd 1c       	adc	r15, r13
    10d6:	f7 01       	movw	r30, r14
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	60 e4       	ldi	r22, 0x40	; 64
    10de:	76 e0       	ldi	r23, 0x06	; 6
    10e0:	ff d9       	rcall	.-3074   	; 0x4e0 <MATCH_SPACE>
    10e2:	89 2b       	or	r24, r25
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <ir_decodeJVC+0x116>
            data = (data << 1) | 1;
    10e6:	88 0c       	add	r8, r8
    10e8:	99 1c       	adc	r9, r9
    10ea:	aa 1c       	adc	r10, r10
    10ec:	bb 1c       	adc	r11, r11
    10ee:	68 94       	set
    10f0:	80 f8       	bld	r8, 0
        } 
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
    10f2:	0c c0       	rjmp	.+24     	; 0x110c <ir_decodeJVC+0x12e>
    10f4:	f7 01       	movw	r30, r14
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	66 e2       	ldi	r22, 0x26	; 38
    10fc:	72 e0       	ldi	r23, 0x02	; 2
    10fe:	f0 d9       	rcall	.-3104   	; 0x4e0 <MATCH_SPACE>
    1100:	89 2b       	or	r24, r25
    1102:	c9 f1       	breq	.+114    	; 0x1176 <ir_decodeJVC+0x198>
            data <<= 1;
    1104:	88 0c       	add	r8, r8
    1106:	99 1c       	adc	r9, r9
    1108:	aa 1c       	adc	r10, r10
    110a:	bb 1c       	adc	r11, r11
        } 
        else {
            return ERR;
        }
        offset++;
    110c:	22 96       	adiw	r28, 0x02	; 2
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
    110e:	ff ef       	ldi	r31, 0xFF	; 255
    1110:	6f 1a       	sub	r6, r31
    1112:	7f 0a       	sbc	r7, r31
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	68 16       	cp	r6, r24
    1118:	71 04       	cpc	r7, r1
    111a:	44 f2       	brlt	.-112    	; 0x10ac <ir_decodeJVC+0xce>
            return ERR;
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
    111c:	cc 0f       	add	r28, r28
    111e:	dd 1f       	adc	r29, r29
    1120:	cc 0d       	add	r28, r12
    1122:	dd 1d       	adc	r29, r13
    1124:	88 81       	ld	r24, Y
    1126:	99 81       	ldd	r25, Y+1	; 0x01
    1128:	68 e5       	ldi	r22, 0x58	; 88
    112a:	72 e0       	ldi	r23, 0x02	; 2
    112c:	d7 d9       	rcall	.-3154   	; 0x4dc <MATCH_MARK>
    112e:	89 2b       	or	r24, r25
    1130:	31 f1       	breq	.+76     	; 0x117e <ir_decodeJVC+0x1a0>
        return ERR;
    }
    // Success
    results->bits = JVC_BITS;
    1132:	80 e1       	ldi	r24, 0x10	; 16
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	f8 01       	movw	r30, r16
    1138:	91 87       	std	Z+9, r25	; 0x09
    113a:	80 87       	std	Z+8, r24	; 0x08
    results->value = data;
    113c:	84 82       	std	Z+4, r8	; 0x04
    113e:	95 82       	std	Z+5, r9	; 0x05
    1140:	a6 82       	std	Z+6, r10	; 0x06
    1142:	b7 82       	std	Z+7, r11	; 0x07
    results->decode_type = JVC;
    1144:	88 e0       	ldi	r24, 0x08	; 8
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    return DECODED;
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	17 c0       	rjmp	.+46     	; 0x1184 <ir_decodeJVC+0x1a6>
        results->decode_type = JVC;
        return DECODED;
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
        return ERR;
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	cb 01       	movw	r24, r22
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <ir_decodeJVC+0x1a6>
    }
    offset++; 
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
        return ERR;
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	cb 01       	movw	r24, r22
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <ir_decodeJVC+0x1a6>
    }
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	cb 01       	movw	r24, r22
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <ir_decodeJVC+0x1a6>
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
            return ERR;
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	cb 01       	movw	r24, r22
    1174:	07 c0       	rjmp	.+14     	; 0x1184 <ir_decodeJVC+0x1a6>
        } 
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
            data <<= 1;
        } 
        else {
            return ERR;
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	cb 01       	movw	r24, r22
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <ir_decodeJVC+0x1a6>
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
        return ERR;
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	cb 01       	movw	r24, r22
    // Success
    results->bits = JVC_BITS;
    results->value = data;
    results->decode_type = JVC;
    return DECODED;
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	08 95       	ret

000011a2 <ir_enableIRIn>:
  ir_timerCfgKhz(khz);
}*/

// initialization
void ir_enableIRIn(void) {
  irparams.blinkflag = 0;
    11a2:	e0 e0       	ldi	r30, 0x00	; 0
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	11 82       	std	Z+1, r1	; 0x01
  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	80 83       	st	Z, r24
  irparams.rawlen = 0;
    11ac:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_edata+0xcd>
    11b0:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_edata+0xcc>
  // set pin modes
  IR_RECEIVE_DDR &= ~(1<<IR_RECEIVE_PIN);
    11b4:	84 b1       	in	r24, 0x04	; 4
    11b6:	8f 7e       	andi	r24, 0xEF	; 239
    11b8:	84 b9       	out	0x04, r24	; 4
  
  cli();
    11ba:	f8 94       	cli
  // setup pulse clock timer interrupt for Timer
  ir_timerCfgNorm();
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <ir_timerCfgNorm>
  ir_timerRst();
    11c0:	0e 94 47 00 	call	0x8e	; 0x8e <ir_timerRst>
  sei();
    11c4:	78 94       	sei
    11c6:	08 95       	ret

000011c8 <ir_blink13>:
}

// enable/disable blinking of pin 13 on IR processing
void ir_blink13(int blinkflag)
{
  irparams.blinkflag = blinkflag;
    11c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
    11cc:	08 95       	ret

000011ce <ir_interruptService>:
{
  unsigned char irdata = 0;

  // timer is used for sampling IR signal

    ir_timerRst();
    11ce:	0e 94 47 00 	call	0x8e	; 0x8e <ir_timerRst>

    //irdata = (unsigned char)ir_digitalRead(irparams.recvpin);
	irdata = (IR_RECEIVE_PINx & (1<<IR_RECEIVE_PIN))>>IR_RECEIVE_PIN;
    11d2:	83 b1       	in	r24, 0x03	; 3
    11d4:	80 71       	andi	r24, 0x10	; 16
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	95 95       	asr	r25
    11da:	87 95       	ror	r24
    11dc:	95 95       	asr	r25
    11de:	87 95       	ror	r24
    11e0:	95 95       	asr	r25
    11e2:	87 95       	ror	r24
    11e4:	95 95       	asr	r25
    11e6:	87 95       	ror	r24

    irparams.timer++; // One more 50us tick
    11e8:	e0 e0       	ldi	r30, 0x00	; 0
    11ea:	f1 e0       	ldi	r31, 0x01	; 1
    11ec:	22 81       	ldd	r18, Z+2	; 0x02
    11ee:	33 81       	ldd	r19, Z+3	; 0x03
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	33 83       	std	Z+3, r19	; 0x03
    11f6:	22 83       	std	Z+2, r18	; 0x02
    if (irparams.rawlen >= RAWBUF) {
    11f8:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
    11fc:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
    1200:	24 36       	cpi	r18, 0x64	; 100
    1202:	31 05       	cpc	r19, r1
    1204:	18 f0       	brcs	.+6      	; 0x120c <ir_interruptService+0x3e>
        // Buffer overflow
        irparams.rcvstate = STATE_STOP;
    1206:	95 e0       	ldi	r25, 0x05	; 5
    1208:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
    }
    switch(irparams.rcvstate) {
    120c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
    1210:	93 30       	cpi	r25, 0x03	; 3
    1212:	d1 f1       	breq	.+116    	; 0x1288 <ir_interruptService+0xba>
    1214:	18 f4       	brcc	.+6      	; 0x121c <ir_interruptService+0x4e>
    1216:	92 30       	cpi	r25, 0x02	; 2
    1218:	41 f0       	breq	.+16     	; 0x122a <ir_interruptService+0x5c>
    121a:	08 95       	ret
    121c:	94 30       	cpi	r25, 0x04	; 4
    121e:	09 f4       	brne	.+2      	; 0x1222 <ir_interruptService+0x54>
    1220:	53 c0       	rjmp	.+166    	; 0x12c8 <ir_interruptService+0xfa>
    1222:	95 30       	cpi	r25, 0x05	; 5
    1224:	09 f4       	brne	.+2      	; 0x1228 <ir_interruptService+0x5a>
    1226:	7b c0       	rjmp	.+246    	; 0x131e <ir_interruptService+0x150>
    1228:	08 95       	ret
      case STATE_IDLE: // In the middle of a gap
        if (irdata == MARK) {
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	09 f0       	breq	.+2      	; 0x1230 <ir_interruptService+0x62>
    122e:	7d c0       	rjmp	.+250    	; 0x132a <ir_interruptService+0x15c>
        if (irparams.timer < GAP_TICKS) {
    1230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    1234:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    1238:	84 36       	cpi	r24, 0x64	; 100
    123a:	91 05       	cpc	r25, r1
    123c:	28 f4       	brcc	.+10     	; 0x1248 <ir_interruptService+0x7a>
            // Not big enough to be a gap.
            irparams.timer = 0;
    123e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
    1242:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
    1246:	08 95       	ret
        } 
        else {
            // gap just ended, record duration and start recording transmission
            irparams.rawlen = 0;
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b1 e0       	ldi	r27, 0x01	; 1
    124c:	ec ec       	ldi	r30, 0xCC	; 204
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	11 82       	std	Z+1, r1	; 0x01
    1252:	10 82       	st	Z, r1
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	9c 01       	movw	r18, r24
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	31 83       	std	Z+1, r19	; 0x01
    1260:	20 83       	st	Z, r18
    1262:	12 96       	adiw	r26, 0x02	; 2
    1264:	2d 91       	ld	r18, X+
    1266:	3c 91       	ld	r19, X
    1268:	13 97       	sbiw	r26, 0x03	; 3
    126a:	fc 01       	movw	r30, r24
    126c:	32 96       	adiw	r30, 0x02	; 2
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	e0 50       	subi	r30, 0x00	; 0
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	31 83       	std	Z+1, r19	; 0x01
    1278:	20 83       	st	Z, r18
            irparams.timer = 0;
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	1c 92       	st	X, r1
    127e:	1e 92       	st	-X, r1
    1280:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	8c 93       	st	X, r24
    1286:	08 95       	ret
        }
        }
        break;
      case STATE_MARK: // timing MARK
        if (irdata == SPACE) {   // MARK ended, record time
    1288:	81 11       	cpse	r24, r1
    128a:	4f c0       	rjmp	.+158    	; 0x132a <ir_interruptService+0x15c>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b1 e0       	ldi	r27, 0x01	; 1
    1290:	ec ec       	ldi	r30, 0xCC	; 204
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	9c 01       	movw	r18, r24
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	31 83       	std	Z+1, r19	; 0x01
    12a0:	20 83       	st	Z, r18
    12a2:	12 96       	adiw	r26, 0x02	; 2
    12a4:	2d 91       	ld	r18, X+
    12a6:	3c 91       	ld	r19, X
    12a8:	13 97       	sbiw	r26, 0x03	; 3
    12aa:	fc 01       	movw	r30, r24
    12ac:	32 96       	adiw	r30, 0x02	; 2
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	e0 50       	subi	r30, 0x00	; 0
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	31 83       	std	Z+1, r19	; 0x01
    12b8:	20 83       	st	Z, r18
            irparams.timer = 0;
    12ba:	13 96       	adiw	r26, 0x03	; 3
    12bc:	1c 92       	st	X, r1
    12be:	1e 92       	st	-X, r1
    12c0:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_SPACE;
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	8c 93       	st	X, r24
    12c6:	08 95       	ret
        }
        break;
      case STATE_SPACE: // timing SPACE
        if (irdata == MARK) { // SPACE just ended, record it
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	f1 f4       	brne	.+60     	; 0x1308 <ir_interruptService+0x13a>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b1 e0       	ldi	r27, 0x01	; 1
    12d0:	ec ec       	ldi	r30, 0xCC	; 204
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	9c 01       	movw	r18, r24
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	2d 91       	ld	r18, X+
    12e6:	3c 91       	ld	r19, X
    12e8:	13 97       	sbiw	r26, 0x03	; 3
    12ea:	fc 01       	movw	r30, r24
    12ec:	32 96       	adiw	r30, 0x02	; 2
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e0 50       	subi	r30, 0x00	; 0
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	31 83       	std	Z+1, r19	; 0x01
    12f8:	20 83       	st	Z, r18
            irparams.timer = 0;
    12fa:	13 96       	adiw	r26, 0x03	; 3
    12fc:	1c 92       	st	X, r1
    12fe:	1e 92       	st	-X, r1
    1300:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	8c 93       	st	X, r24
    1306:	08 95       	ret
        } 
        else { // SPACE
          if (irparams.timer > GAP_TICKS) {
    1308:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    130c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    1310:	85 36       	cpi	r24, 0x65	; 101
    1312:	91 05       	cpc	r25, r1
    1314:	50 f0       	brcs	.+20     	; 0x132a <ir_interruptService+0x15c>
            // big SPACE, indicates gap between codes
            // Mark current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting space width
            irparams.rcvstate = STATE_STOP;
    1316:	85 e0       	ldi	r24, 0x05	; 5
    1318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    131c:	08 95       	ret
          } 
        }
        break;
     case STATE_STOP: // waiting, measuring gap
        if (irdata == MARK) { // reset gap timer
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	21 f4       	brne	.+8      	; 0x132a <ir_interruptService+0x15c>
           irparams.timer = 0;
    1322:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
    1326:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
    132a:	08 95       	ret

0000132c <ir_resume>:
        }
    }*/
}

void ir_resume(void) {
  irparams.rcvstate = STATE_IDLE;
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  irparams.rawlen = 0;
    1332:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_edata+0xcd>
    1336:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_edata+0xcc>
    133a:	08 95       	ret

0000133c <ir_decode>:


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
  results->rawlen = irparams.rawlen;
    1340:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
    1344:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
    1348:	fc 01       	movw	r30, r24
    134a:	35 87       	std	Z+13, r19	; 0x0d
    134c:	24 87       	std	Z+12, r18	; 0x0c
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
    134e:	24 e0       	ldi	r18, 0x04	; 4
    1350:	31 e0       	ldi	r19, 0x01	; 1
    1352:	33 87       	std	Z+11, r19	; 0x0b
    1354:	22 87       	std	Z+10, r18	; 0x0a
  if (irparams.rcvstate != STATE_STOP) {
    1356:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
    135a:	25 30       	cpi	r18, 0x05	; 5
    135c:	09 f0       	breq	.+2      	; 0x1360 <ir_decode+0x24>
    135e:	45 c0       	rjmp	.+138    	; 0x13ea <ir_decode+0xae>
    1360:	ec 01       	movw	r28, r24
    return ERR;
  }
  if (ir_decodeSigma(results)) {
    1362:	c0 d8       	rcall	.-3712   	; 0x4e4 <ir_decodeSigma>
    1364:	67 2b       	or	r22, r23
    1366:	68 2b       	or	r22, r24
    1368:	69 2b       	or	r22, r25
    136a:	09 f0       	breq	.+2      	; 0x136e <ir_decode+0x32>
    136c:	41 c0       	rjmp	.+130    	; 0x13f0 <ir_decode+0xb4>
     return DECODED;
  }
  if (ir_decodeNEC(results)) {
    136e:	ce 01       	movw	r24, r28
    1370:	91 d9       	rcall	.-3294   	; 0x694 <ir_decodeNEC>
    1372:	67 2b       	or	r22, r23
    1374:	68 2b       	or	r22, r24
    1376:	69 2b       	or	r22, r25
    1378:	09 f0       	breq	.+2      	; 0x137c <ir_decode+0x40>
    137a:	3d c0       	rjmp	.+122    	; 0x13f6 <ir_decode+0xba>
    return DECODED;
  }
  if (ir_decodeSony(results)) {
    137c:	ce 01       	movw	r24, r28
    137e:	50 da       	rcall	.-2912   	; 0x820 <ir_decodeSony>
    1380:	67 2b       	or	r22, r23
    1382:	68 2b       	or	r22, r24
    1384:	69 2b       	or	r22, r25
    1386:	09 f0       	breq	.+2      	; 0x138a <ir_decode+0x4e>
    1388:	39 c0       	rjmp	.+114    	; 0x13fc <ir_decode+0xc0>
    return DECODED;
  }
  if (ir_decodeSanyo(results)) {
    138a:	ce 01       	movw	r24, r28
    138c:	f6 da       	rcall	.-2580   	; 0x97a <ir_decodeSanyo>
    138e:	67 2b       	or	r22, r23
    1390:	68 2b       	or	r22, r24
    1392:	69 2b       	or	r22, r25
    1394:	b1 f5       	brne	.+108    	; 0x1402 <ir_decode+0xc6>
    return DECODED;
  }
  if (ir_decodeMitsubishi(results)) {
    1396:	ce 01       	movw	r24, r28
    1398:	aa db       	rcall	.-2220   	; 0xaee <ir_decodeMitsubishi>
    139a:	67 2b       	or	r22, r23
    139c:	68 2b       	or	r22, r24
    139e:	69 2b       	or	r22, r25
    13a0:	99 f5       	brne	.+102    	; 0x1408 <ir_decode+0xcc>
    13a2:	ce 01       	movw	r24, r28
    return DECODED;
  }
  if (ir_decodeRC5(results)) {
    13a4:	0e 94 b4 01 	call	0x368	; 0x368 <ir_decodeRC5>
    13a8:	67 2b       	or	r22, r23
    13aa:	68 2b       	or	r22, r24
    13ac:	69 2b       	or	r22, r25
    13ae:	79 f5       	brne	.+94     	; 0x140e <ir_decode+0xd2>
    return DECODED;
  }
  if (ir_decodeRC6(results)) {
    13b0:	ce 01       	movw	r24, r28
    13b2:	3b dc       	rcall	.-1930   	; 0xc2a <ir_decodeRC6>
    13b4:	67 2b       	or	r22, r23
    13b6:	68 2b       	or	r22, r24
    13b8:	69 2b       	or	r22, r25
    13ba:	61 f5       	brne	.+88     	; 0x1414 <ir_decode+0xd8>
    return DECODED;
  }
  if (ir_decodePanasonic(results)) {
    13bc:	ce 01       	movw	r24, r28
    13be:	34 dd       	rcall	.-1432   	; 0xe28 <ir_decodePanasonic>
    13c0:	67 2b       	or	r22, r23
    13c2:	68 2b       	or	r22, r24
    13c4:	69 2b       	or	r22, r25
    13c6:	49 f5       	brne	.+82     	; 0x141a <ir_decode+0xde>
     return DECODED;
  }
  if (ir_decodeJVC(results)) {
    13c8:	ce 01       	movw	r24, r28
    13ca:	09 de       	rcall	.-1006   	; 0xfde <ir_decodeJVC>
    13cc:	67 2b       	or	r22, r23
    13ce:	68 2b       	or	r22, r24
    13d0:	69 2b       	or	r22, r25
    13d2:	31 f5       	brne	.+76     	; 0x1420 <ir_decode+0xe4>
  }

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 9b 00 	call	0x136	; 0x136 <ir_decodeHash>
    13da:	67 2b       	or	r22, r23
    13dc:	68 2b       	or	r22, r24
    13de:	69 2b       	or	r22, r25
    13e0:	11 f5       	brne	.+68     	; 0x1426 <ir_decode+0xea>
    return DECODED;
  }
  // Throw away and start over
  ir_resume();
    13e2:	a4 df       	rcall	.-184    	; 0x132c <ir_resume>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
  return ERR;
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <ir_decode+0xee>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
  results->rawlen = irparams.rawlen;
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
  if (irparams.rcvstate != STATE_STOP) {
    return ERR;
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <ir_decode+0xee>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSigma(results)) {
     return DECODED;
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	1a c0       	rjmp	.+52     	; 0x142a <ir_decode+0xee>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeNEC(results)) {
    return DECODED;
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	17 c0       	rjmp	.+46     	; 0x142a <ir_decode+0xee>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSony(results)) {
    return DECODED;
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	14 c0       	rjmp	.+40     	; 0x142a <ir_decode+0xee>
    1402:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSanyo(results)) {
    return DECODED;
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	11 c0       	rjmp	.+34     	; 0x142a <ir_decode+0xee>
    1408:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeMitsubishi(results)) {
    return DECODED;
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e c0       	rjmp	.+28     	; 0x142a <ir_decode+0xee>
    140e:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC5(results)) {
    return DECODED;
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0b c0       	rjmp	.+22     	; 0x142a <ir_decode+0xee>
    1414:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC6(results)) {
    return DECODED;
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	08 c0       	rjmp	.+16     	; 0x142a <ir_decode+0xee>
    141a:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodePanasonic(results)) {
     return DECODED;
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <ir_decode+0xee>
    1420:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeJVC(results)) {
     return DECODED;
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <ir_decode+0xee>
    1426:	81 e0       	ldi	r24, 0x01	; 1

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    return DECODED;
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	df 91       	pop	r29
  }
  // Throw away and start over
  ir_resume();
  return ERR;
}
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <main>:
#include <avr/interrupt.h>
#include "IRlib/IRremote.h"


int main(void)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	2e 97       	sbiw	r28, 0x0e	; 14
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0x21;
    1444:	84 b1       	in	r24, 0x04	; 4
    1446:	81 62       	ori	r24, 0x21	; 33
    1448:	84 b9       	out	0x04, r24	; 4
	DDRD |=0x08;
    144a:	8a b1       	in	r24, 0x0a	; 10
    144c:	88 60       	ori	r24, 0x08	; 8
    144e:	8a b9       	out	0x0a, r24	; 10
	 TCCR0B= 0b00001100; // /256
	 TIMSK0=0b00000010;
	 OCR0A=3; // division par 3
	//sei();*/
	decode_results dec_results;
    ir_enableIRIn();
    1450:	a8 de       	rcall	.-688    	; 0x11a2 <ir_enableIRIn>
    ir_blink13(0);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	b8 de       	rcall	.-656    	; 0x11c8 <ir_blink13>
	
	const uint16_t pwmval = (16000000 / 2000 / (1));
	TCCR2A = 0x02;
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0x01;
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 128;
    1464:	90 e8       	ldi	r25, 0x80	; 128
    1466:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	//OCR2B = (uint8_t)pwmval / 3;
	TIMSK2=0x02;
    146a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		}
		else
		{
			PORTB &= 0xEF;
		}*/
	    if (ir_decode(&dec_results)) {
    146e:	ce 01       	movw	r24, r28
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	64 df       	rcall	.-312    	; 0x133c <ir_decode>
    1474:	89 2b       	or	r24, r25
    1476:	d9 f3       	breq	.-10     	; 0x146e <main+0x3e>
		    switch(dec_results.decode_type)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	82 30       	cpi	r24, 0x02	; 2
    147e:	91 05       	cpc	r25, r1
    1480:	69 f0       	breq	.+26     	; 0x149c <main+0x6c>
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	31 f0       	breq	.+12     	; 0x1494 <main+0x64>
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	61 f4       	brne	.+24     	; 0x14a4 <main+0x74>
			{
				case NEC:
				PORTB |= 0x01;
    148c:	85 b1       	in	r24, 0x05	; 5
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	85 b9       	out	0x05, r24	; 5
				break;
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <main+0x7a>
				case RC5:
				PORTB |= 0x01;
    1494:	85 b1       	in	r24, 0x05	; 5
    1496:	81 60       	ori	r24, 0x01	; 1
    1498:	85 b9       	out	0x05, r24	; 5
				break;
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <main+0x7a>
				case SONY:
				PORTB |= 0x01;
    149c:	85 b1       	in	r24, 0x05	; 5
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	85 b9       	out	0x05, r24	; 5
				break;
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <main+0x7a>
				default:
				PORTB |= 0x01;
    14a4:	85 b1       	in	r24, 0x05	; 5
    14a6:	81 60       	ori	r24, 0x01	; 1
				break;
			}
		    //do something here
		    ir_resume(); // Receive the next value
    14a8:	85 b9       	out	0x05, r24	; 5
    14aa:	40 df       	rcall	.-384    	; 0x132c <ir_resume>
    14ac:	e0 cf       	rjmp	.-64     	; 0x146e <main+0x3e>

000014ae <__vector_14>:
	}

}

ISR(TIMER0_COMPA_vect)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
	ir_interruptService();
    14d0:	7e de       	rcall	.-772    	; 0x11ce <ir_interruptService>
}
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
 PORTB ^= 0x21;
    1502:	95 b1       	in	r25, 0x05	; 5
    1504:	81 e2       	ldi	r24, 0x21	; 33
    1506:	89 27       	eor	r24, r25
    1508:	85 b9       	out	0x05, r24	; 5
}
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__subsf3>:
    1518:	50 58       	subi	r21, 0x80	; 128

0000151a <__addsf3>:
    151a:	bb 27       	eor	r27, r27
    151c:	aa 27       	eor	r26, r26
    151e:	0e d0       	rcall	.+28     	; 0x153c <__addsf3x>
    1520:	75 c1       	rjmp	.+746    	; 0x180c <__fp_round>
    1522:	66 d1       	rcall	.+716    	; 0x17f0 <__fp_pscA>
    1524:	30 f0       	brcs	.+12     	; 0x1532 <__addsf3+0x18>
    1526:	6b d1       	rcall	.+726    	; 0x17fe <__fp_pscB>
    1528:	20 f0       	brcs	.+8      	; 0x1532 <__addsf3+0x18>
    152a:	31 f4       	brne	.+12     	; 0x1538 <__addsf3+0x1e>
    152c:	9f 3f       	cpi	r25, 0xFF	; 255
    152e:	11 f4       	brne	.+4      	; 0x1534 <__addsf3+0x1a>
    1530:	1e f4       	brtc	.+6      	; 0x1538 <__addsf3+0x1e>
    1532:	5b c1       	rjmp	.+694    	; 0x17ea <__fp_nan>
    1534:	0e f4       	brtc	.+2      	; 0x1538 <__addsf3+0x1e>
    1536:	e0 95       	com	r30
    1538:	e7 fb       	bst	r30, 7
    153a:	51 c1       	rjmp	.+674    	; 0x17de <__fp_inf>

0000153c <__addsf3x>:
    153c:	e9 2f       	mov	r30, r25
    153e:	77 d1       	rcall	.+750    	; 0x182e <__fp_split3>
    1540:	80 f3       	brcs	.-32     	; 0x1522 <__addsf3+0x8>
    1542:	ba 17       	cp	r27, r26
    1544:	62 07       	cpc	r22, r18
    1546:	73 07       	cpc	r23, r19
    1548:	84 07       	cpc	r24, r20
    154a:	95 07       	cpc	r25, r21
    154c:	18 f0       	brcs	.+6      	; 0x1554 <__addsf3x+0x18>
    154e:	71 f4       	brne	.+28     	; 0x156c <__addsf3x+0x30>
    1550:	9e f5       	brtc	.+102    	; 0x15b8 <__addsf3x+0x7c>
    1552:	8f c1       	rjmp	.+798    	; 0x1872 <__fp_zero>
    1554:	0e f4       	brtc	.+2      	; 0x1558 <__addsf3x+0x1c>
    1556:	e0 95       	com	r30
    1558:	0b 2e       	mov	r0, r27
    155a:	ba 2f       	mov	r27, r26
    155c:	a0 2d       	mov	r26, r0
    155e:	0b 01       	movw	r0, r22
    1560:	b9 01       	movw	r22, r18
    1562:	90 01       	movw	r18, r0
    1564:	0c 01       	movw	r0, r24
    1566:	ca 01       	movw	r24, r20
    1568:	a0 01       	movw	r20, r0
    156a:	11 24       	eor	r1, r1
    156c:	ff 27       	eor	r31, r31
    156e:	59 1b       	sub	r21, r25
    1570:	99 f0       	breq	.+38     	; 0x1598 <__addsf3x+0x5c>
    1572:	59 3f       	cpi	r21, 0xF9	; 249
    1574:	50 f4       	brcc	.+20     	; 0x158a <__addsf3x+0x4e>
    1576:	50 3e       	cpi	r21, 0xE0	; 224
    1578:	68 f1       	brcs	.+90     	; 0x15d4 <__addsf3x+0x98>
    157a:	1a 16       	cp	r1, r26
    157c:	f0 40       	sbci	r31, 0x00	; 0
    157e:	a2 2f       	mov	r26, r18
    1580:	23 2f       	mov	r18, r19
    1582:	34 2f       	mov	r19, r20
    1584:	44 27       	eor	r20, r20
    1586:	58 5f       	subi	r21, 0xF8	; 248
    1588:	f3 cf       	rjmp	.-26     	; 0x1570 <__addsf3x+0x34>
    158a:	46 95       	lsr	r20
    158c:	37 95       	ror	r19
    158e:	27 95       	ror	r18
    1590:	a7 95       	ror	r26
    1592:	f0 40       	sbci	r31, 0x00	; 0
    1594:	53 95       	inc	r21
    1596:	c9 f7       	brne	.-14     	; 0x158a <__addsf3x+0x4e>
    1598:	7e f4       	brtc	.+30     	; 0x15b8 <__addsf3x+0x7c>
    159a:	1f 16       	cp	r1, r31
    159c:	ba 0b       	sbc	r27, r26
    159e:	62 0b       	sbc	r22, r18
    15a0:	73 0b       	sbc	r23, r19
    15a2:	84 0b       	sbc	r24, r20
    15a4:	ba f0       	brmi	.+46     	; 0x15d4 <__addsf3x+0x98>
    15a6:	91 50       	subi	r25, 0x01	; 1
    15a8:	a1 f0       	breq	.+40     	; 0x15d2 <__addsf3x+0x96>
    15aa:	ff 0f       	add	r31, r31
    15ac:	bb 1f       	adc	r27, r27
    15ae:	66 1f       	adc	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	c2 f7       	brpl	.-16     	; 0x15a6 <__addsf3x+0x6a>
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <__addsf3x+0x98>
    15b8:	ba 0f       	add	r27, r26
    15ba:	62 1f       	adc	r22, r18
    15bc:	73 1f       	adc	r23, r19
    15be:	84 1f       	adc	r24, r20
    15c0:	48 f4       	brcc	.+18     	; 0x15d4 <__addsf3x+0x98>
    15c2:	87 95       	ror	r24
    15c4:	77 95       	ror	r23
    15c6:	67 95       	ror	r22
    15c8:	b7 95       	ror	r27
    15ca:	f7 95       	ror	r31
    15cc:	9e 3f       	cpi	r25, 0xFE	; 254
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <__addsf3x+0x96>
    15d0:	b3 cf       	rjmp	.-154    	; 0x1538 <__addsf3+0x1e>
    15d2:	93 95       	inc	r25
    15d4:	88 0f       	add	r24, r24
    15d6:	08 f0       	brcs	.+2      	; 0x15da <__addsf3x+0x9e>
    15d8:	99 27       	eor	r25, r25
    15da:	ee 0f       	add	r30, r30
    15dc:	97 95       	ror	r25
    15de:	87 95       	ror	r24
    15e0:	08 95       	ret

000015e2 <__cmpsf2>:
    15e2:	d9 d0       	rcall	.+434    	; 0x1796 <__fp_cmp>
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <__cmpsf2+0x6>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	08 95       	ret

000015ea <__divsf3>:
    15ea:	0c d0       	rcall	.+24     	; 0x1604 <__divsf3x>
    15ec:	0f c1       	rjmp	.+542    	; 0x180c <__fp_round>
    15ee:	07 d1       	rcall	.+526    	; 0x17fe <__fp_pscB>
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <__divsf3+0x18>
    15f2:	fe d0       	rcall	.+508    	; 0x17f0 <__fp_pscA>
    15f4:	30 f0       	brcs	.+12     	; 0x1602 <__divsf3+0x18>
    15f6:	21 f4       	brne	.+8      	; 0x1600 <__divsf3+0x16>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	19 f0       	breq	.+6      	; 0x1602 <__divsf3+0x18>
    15fc:	f0 c0       	rjmp	.+480    	; 0x17de <__fp_inf>
    15fe:	51 11       	cpse	r21, r1
    1600:	39 c1       	rjmp	.+626    	; 0x1874 <__fp_szero>
    1602:	f3 c0       	rjmp	.+486    	; 0x17ea <__fp_nan>

00001604 <__divsf3x>:
    1604:	14 d1       	rcall	.+552    	; 0x182e <__fp_split3>
    1606:	98 f3       	brcs	.-26     	; 0x15ee <__divsf3+0x4>

00001608 <__divsf3_pse>:
    1608:	99 23       	and	r25, r25
    160a:	c9 f3       	breq	.-14     	; 0x15fe <__divsf3+0x14>
    160c:	55 23       	and	r21, r21
    160e:	b1 f3       	breq	.-20     	; 0x15fc <__divsf3+0x12>
    1610:	95 1b       	sub	r25, r21
    1612:	55 0b       	sbc	r21, r21
    1614:	bb 27       	eor	r27, r27
    1616:	aa 27       	eor	r26, r26
    1618:	62 17       	cp	r22, r18
    161a:	73 07       	cpc	r23, r19
    161c:	84 07       	cpc	r24, r20
    161e:	38 f0       	brcs	.+14     	; 0x162e <__divsf3_pse+0x26>
    1620:	9f 5f       	subi	r25, 0xFF	; 255
    1622:	5f 4f       	sbci	r21, 0xFF	; 255
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	44 1f       	adc	r20, r20
    162a:	aa 1f       	adc	r26, r26
    162c:	a9 f3       	breq	.-22     	; 0x1618 <__divsf3_pse+0x10>
    162e:	33 d0       	rcall	.+102    	; 0x1696 <__divsf3_pse+0x8e>
    1630:	0e 2e       	mov	r0, r30
    1632:	3a f0       	brmi	.+14     	; 0x1642 <__divsf3_pse+0x3a>
    1634:	e0 e8       	ldi	r30, 0x80	; 128
    1636:	30 d0       	rcall	.+96     	; 0x1698 <__divsf3_pse+0x90>
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	50 40       	sbci	r21, 0x00	; 0
    163c:	e6 95       	lsr	r30
    163e:	00 1c       	adc	r0, r0
    1640:	ca f7       	brpl	.-14     	; 0x1634 <__divsf3_pse+0x2c>
    1642:	29 d0       	rcall	.+82     	; 0x1696 <__divsf3_pse+0x8e>
    1644:	fe 2f       	mov	r31, r30
    1646:	27 d0       	rcall	.+78     	; 0x1696 <__divsf3_pse+0x8e>
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	bb 1f       	adc	r27, r27
    1650:	26 17       	cp	r18, r22
    1652:	37 07       	cpc	r19, r23
    1654:	48 07       	cpc	r20, r24
    1656:	ab 07       	cpc	r26, r27
    1658:	b0 e8       	ldi	r27, 0x80	; 128
    165a:	09 f0       	breq	.+2      	; 0x165e <__divsf3_pse+0x56>
    165c:	bb 0b       	sbc	r27, r27
    165e:	80 2d       	mov	r24, r0
    1660:	bf 01       	movw	r22, r30
    1662:	ff 27       	eor	r31, r31
    1664:	93 58       	subi	r25, 0x83	; 131
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	2a f0       	brmi	.+10     	; 0x1674 <__divsf3_pse+0x6c>
    166a:	9e 3f       	cpi	r25, 0xFE	; 254
    166c:	51 05       	cpc	r21, r1
    166e:	68 f0       	brcs	.+26     	; 0x168a <__divsf3_pse+0x82>
    1670:	b6 c0       	rjmp	.+364    	; 0x17de <__fp_inf>
    1672:	00 c1       	rjmp	.+512    	; 0x1874 <__fp_szero>
    1674:	5f 3f       	cpi	r21, 0xFF	; 255
    1676:	ec f3       	brlt	.-6      	; 0x1672 <__divsf3_pse+0x6a>
    1678:	98 3e       	cpi	r25, 0xE8	; 232
    167a:	dc f3       	brlt	.-10     	; 0x1672 <__divsf3_pse+0x6a>
    167c:	86 95       	lsr	r24
    167e:	77 95       	ror	r23
    1680:	67 95       	ror	r22
    1682:	b7 95       	ror	r27
    1684:	f7 95       	ror	r31
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	c9 f7       	brne	.-14     	; 0x167c <__divsf3_pse+0x74>
    168a:	88 0f       	add	r24, r24
    168c:	91 1d       	adc	r25, r1
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	97 f9       	bld	r25, 7
    1694:	08 95       	ret
    1696:	e1 e0       	ldi	r30, 0x01	; 1
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	bb 1f       	adc	r27, r27
    16a0:	62 17       	cp	r22, r18
    16a2:	73 07       	cpc	r23, r19
    16a4:	84 07       	cpc	r24, r20
    16a6:	ba 07       	cpc	r27, r26
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <__divsf3_pse+0xaa>
    16aa:	62 1b       	sub	r22, r18
    16ac:	73 0b       	sbc	r23, r19
    16ae:	84 0b       	sbc	r24, r20
    16b0:	ba 0b       	sbc	r27, r26
    16b2:	ee 1f       	adc	r30, r30
    16b4:	88 f7       	brcc	.-30     	; 0x1698 <__divsf3_pse+0x90>
    16b6:	e0 95       	com	r30
    16b8:	08 95       	ret

000016ba <__fixsfsi>:
    16ba:	04 d0       	rcall	.+8      	; 0x16c4 <__fixunssfsi>
    16bc:	68 94       	set
    16be:	b1 11       	cpse	r27, r1
    16c0:	d9 c0       	rjmp	.+434    	; 0x1874 <__fp_szero>
    16c2:	08 95       	ret

000016c4 <__fixunssfsi>:
    16c4:	bc d0       	rcall	.+376    	; 0x183e <__fp_splitA>
    16c6:	88 f0       	brcs	.+34     	; 0x16ea <__fixunssfsi+0x26>
    16c8:	9f 57       	subi	r25, 0x7F	; 127
    16ca:	90 f0       	brcs	.+36     	; 0x16f0 <__fixunssfsi+0x2c>
    16cc:	b9 2f       	mov	r27, r25
    16ce:	99 27       	eor	r25, r25
    16d0:	b7 51       	subi	r27, 0x17	; 23
    16d2:	a0 f0       	brcs	.+40     	; 0x16fc <__fixunssfsi+0x38>
    16d4:	d1 f0       	breq	.+52     	; 0x170a <__fixunssfsi+0x46>
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a f0       	brmi	.+6      	; 0x16e6 <__fixunssfsi+0x22>
    16e0:	ba 95       	dec	r27
    16e2:	c9 f7       	brne	.-14     	; 0x16d6 <__fixunssfsi+0x12>
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <__fixunssfsi+0x46>
    16e6:	b1 30       	cpi	r27, 0x01	; 1
    16e8:	81 f0       	breq	.+32     	; 0x170a <__fixunssfsi+0x46>
    16ea:	c3 d0       	rcall	.+390    	; 0x1872 <__fp_zero>
    16ec:	b1 e0       	ldi	r27, 0x01	; 1
    16ee:	08 95       	ret
    16f0:	c0 c0       	rjmp	.+384    	; 0x1872 <__fp_zero>
    16f2:	67 2f       	mov	r22, r23
    16f4:	78 2f       	mov	r23, r24
    16f6:	88 27       	eor	r24, r24
    16f8:	b8 5f       	subi	r27, 0xF8	; 248
    16fa:	39 f0       	breq	.+14     	; 0x170a <__fixunssfsi+0x46>
    16fc:	b9 3f       	cpi	r27, 0xF9	; 249
    16fe:	cc f3       	brlt	.-14     	; 0x16f2 <__fixunssfsi+0x2e>
    1700:	86 95       	lsr	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	b3 95       	inc	r27
    1708:	d9 f7       	brne	.-10     	; 0x1700 <__fixunssfsi+0x3c>
    170a:	3e f4       	brtc	.+14     	; 0x171a <__fixunssfsi+0x56>
    170c:	90 95       	com	r25
    170e:	80 95       	com	r24
    1710:	70 95       	com	r23
    1712:	61 95       	neg	r22
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	8f 4f       	sbci	r24, 0xFF	; 255
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	08 95       	ret

0000171c <__floatunsisf>:
    171c:	e8 94       	clt
    171e:	09 c0       	rjmp	.+18     	; 0x1732 <__floatsisf+0x12>

00001720 <__floatsisf>:
    1720:	97 fb       	bst	r25, 7
    1722:	3e f4       	brtc	.+14     	; 0x1732 <__floatsisf+0x12>
    1724:	90 95       	com	r25
    1726:	80 95       	com	r24
    1728:	70 95       	com	r23
    172a:	61 95       	neg	r22
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	99 23       	and	r25, r25
    1734:	a9 f0       	breq	.+42     	; 0x1760 <__floatsisf+0x40>
    1736:	f9 2f       	mov	r31, r25
    1738:	96 e9       	ldi	r25, 0x96	; 150
    173a:	bb 27       	eor	r27, r27
    173c:	93 95       	inc	r25
    173e:	f6 95       	lsr	r31
    1740:	87 95       	ror	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f1 11       	cpse	r31, r1
    174a:	f8 cf       	rjmp	.-16     	; 0x173c <__floatsisf+0x1c>
    174c:	fa f4       	brpl	.+62     	; 0x178c <__floatsisf+0x6c>
    174e:	bb 0f       	add	r27, r27
    1750:	11 f4       	brne	.+4      	; 0x1756 <__floatsisf+0x36>
    1752:	60 ff       	sbrs	r22, 0
    1754:	1b c0       	rjmp	.+54     	; 0x178c <__floatsisf+0x6c>
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	8f 4f       	sbci	r24, 0xFF	; 255
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	16 c0       	rjmp	.+44     	; 0x178c <__floatsisf+0x6c>
    1760:	88 23       	and	r24, r24
    1762:	11 f0       	breq	.+4      	; 0x1768 <__floatsisf+0x48>
    1764:	96 e9       	ldi	r25, 0x96	; 150
    1766:	11 c0       	rjmp	.+34     	; 0x178a <__floatsisf+0x6a>
    1768:	77 23       	and	r23, r23
    176a:	21 f0       	breq	.+8      	; 0x1774 <__floatsisf+0x54>
    176c:	9e e8       	ldi	r25, 0x8E	; 142
    176e:	87 2f       	mov	r24, r23
    1770:	76 2f       	mov	r23, r22
    1772:	05 c0       	rjmp	.+10     	; 0x177e <__floatsisf+0x5e>
    1774:	66 23       	and	r22, r22
    1776:	71 f0       	breq	.+28     	; 0x1794 <__floatsisf+0x74>
    1778:	96 e8       	ldi	r25, 0x86	; 134
    177a:	86 2f       	mov	r24, r22
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	2a f0       	brmi	.+10     	; 0x178c <__floatsisf+0x6c>
    1782:	9a 95       	dec	r25
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	da f7       	brpl	.-10     	; 0x1782 <__floatsisf+0x62>
    178c:	88 0f       	add	r24, r24
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	97 f9       	bld	r25, 7
    1794:	08 95       	ret

00001796 <__fp_cmp>:
    1796:	99 0f       	add	r25, r25
    1798:	00 08       	sbc	r0, r0
    179a:	55 0f       	add	r21, r21
    179c:	aa 0b       	sbc	r26, r26
    179e:	e0 e8       	ldi	r30, 0x80	; 128
    17a0:	fe ef       	ldi	r31, 0xFE	; 254
    17a2:	16 16       	cp	r1, r22
    17a4:	17 06       	cpc	r1, r23
    17a6:	e8 07       	cpc	r30, r24
    17a8:	f9 07       	cpc	r31, r25
    17aa:	c0 f0       	brcs	.+48     	; 0x17dc <__fp_cmp+0x46>
    17ac:	12 16       	cp	r1, r18
    17ae:	13 06       	cpc	r1, r19
    17b0:	e4 07       	cpc	r30, r20
    17b2:	f5 07       	cpc	r31, r21
    17b4:	98 f0       	brcs	.+38     	; 0x17dc <__fp_cmp+0x46>
    17b6:	62 1b       	sub	r22, r18
    17b8:	73 0b       	sbc	r23, r19
    17ba:	84 0b       	sbc	r24, r20
    17bc:	95 0b       	sbc	r25, r21
    17be:	39 f4       	brne	.+14     	; 0x17ce <__fp_cmp+0x38>
    17c0:	0a 26       	eor	r0, r26
    17c2:	61 f0       	breq	.+24     	; 0x17dc <__fp_cmp+0x46>
    17c4:	23 2b       	or	r18, r19
    17c6:	24 2b       	or	r18, r20
    17c8:	25 2b       	or	r18, r21
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <__fp_cmp+0x3e>
    17cc:	08 95       	ret
    17ce:	0a 26       	eor	r0, r26
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <__fp_cmp+0x3e>
    17d2:	a1 40       	sbci	r26, 0x01	; 1
    17d4:	a6 95       	lsr	r26
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	81 1d       	adc	r24, r1
    17da:	81 1d       	adc	r24, r1
    17dc:	08 95       	ret

000017de <__fp_inf>:
    17de:	97 f9       	bld	r25, 7
    17e0:	9f 67       	ori	r25, 0x7F	; 127
    17e2:	80 e8       	ldi	r24, 0x80	; 128
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	08 95       	ret

000017ea <__fp_nan>:
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	80 ec       	ldi	r24, 0xC0	; 192
    17ee:	08 95       	ret

000017f0 <__fp_pscA>:
    17f0:	00 24       	eor	r0, r0
    17f2:	0a 94       	dec	r0
    17f4:	16 16       	cp	r1, r22
    17f6:	17 06       	cpc	r1, r23
    17f8:	18 06       	cpc	r1, r24
    17fa:	09 06       	cpc	r0, r25
    17fc:	08 95       	ret

000017fe <__fp_pscB>:
    17fe:	00 24       	eor	r0, r0
    1800:	0a 94       	dec	r0
    1802:	12 16       	cp	r1, r18
    1804:	13 06       	cpc	r1, r19
    1806:	14 06       	cpc	r1, r20
    1808:	05 06       	cpc	r0, r21
    180a:	08 95       	ret

0000180c <__fp_round>:
    180c:	09 2e       	mov	r0, r25
    180e:	03 94       	inc	r0
    1810:	00 0c       	add	r0, r0
    1812:	11 f4       	brne	.+4      	; 0x1818 <__fp_round+0xc>
    1814:	88 23       	and	r24, r24
    1816:	52 f0       	brmi	.+20     	; 0x182c <__fp_round+0x20>
    1818:	bb 0f       	add	r27, r27
    181a:	40 f4       	brcc	.+16     	; 0x182c <__fp_round+0x20>
    181c:	bf 2b       	or	r27, r31
    181e:	11 f4       	brne	.+4      	; 0x1824 <__fp_round+0x18>
    1820:	60 ff       	sbrs	r22, 0
    1822:	04 c0       	rjmp	.+8      	; 0x182c <__fp_round+0x20>
    1824:	6f 5f       	subi	r22, 0xFF	; 255
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	8f 4f       	sbci	r24, 0xFF	; 255
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	08 95       	ret

0000182e <__fp_split3>:
    182e:	57 fd       	sbrc	r21, 7
    1830:	90 58       	subi	r25, 0x80	; 128
    1832:	44 0f       	add	r20, r20
    1834:	55 1f       	adc	r21, r21
    1836:	59 f0       	breq	.+22     	; 0x184e <__fp_splitA+0x10>
    1838:	5f 3f       	cpi	r21, 0xFF	; 255
    183a:	71 f0       	breq	.+28     	; 0x1858 <__fp_splitA+0x1a>
    183c:	47 95       	ror	r20

0000183e <__fp_splitA>:
    183e:	88 0f       	add	r24, r24
    1840:	97 fb       	bst	r25, 7
    1842:	99 1f       	adc	r25, r25
    1844:	61 f0       	breq	.+24     	; 0x185e <__fp_splitA+0x20>
    1846:	9f 3f       	cpi	r25, 0xFF	; 255
    1848:	79 f0       	breq	.+30     	; 0x1868 <__fp_splitA+0x2a>
    184a:	87 95       	ror	r24
    184c:	08 95       	ret
    184e:	12 16       	cp	r1, r18
    1850:	13 06       	cpc	r1, r19
    1852:	14 06       	cpc	r1, r20
    1854:	55 1f       	adc	r21, r21
    1856:	f2 cf       	rjmp	.-28     	; 0x183c <__fp_split3+0xe>
    1858:	46 95       	lsr	r20
    185a:	f1 df       	rcall	.-30     	; 0x183e <__fp_splitA>
    185c:	08 c0       	rjmp	.+16     	; 0x186e <__fp_splitA+0x30>
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	18 06       	cpc	r1, r24
    1864:	99 1f       	adc	r25, r25
    1866:	f1 cf       	rjmp	.-30     	; 0x184a <__fp_splitA+0xc>
    1868:	86 95       	lsr	r24
    186a:	71 05       	cpc	r23, r1
    186c:	61 05       	cpc	r22, r1
    186e:	08 94       	sec
    1870:	08 95       	ret

00001872 <__fp_zero>:
    1872:	e8 94       	clt

00001874 <__fp_szero>:
    1874:	bb 27       	eor	r27, r27
    1876:	66 27       	eor	r22, r22
    1878:	77 27       	eor	r23, r23
    187a:	cb 01       	movw	r24, r22
    187c:	97 f9       	bld	r25, 7
    187e:	08 95       	ret

00001880 <__mulsf3>:
    1880:	0b d0       	rcall	.+22     	; 0x1898 <__mulsf3x>
    1882:	c4 cf       	rjmp	.-120    	; 0x180c <__fp_round>
    1884:	b5 df       	rcall	.-150    	; 0x17f0 <__fp_pscA>
    1886:	28 f0       	brcs	.+10     	; 0x1892 <__mulsf3+0x12>
    1888:	ba df       	rcall	.-140    	; 0x17fe <__fp_pscB>
    188a:	18 f0       	brcs	.+6      	; 0x1892 <__mulsf3+0x12>
    188c:	95 23       	and	r25, r21
    188e:	09 f0       	breq	.+2      	; 0x1892 <__mulsf3+0x12>
    1890:	a6 cf       	rjmp	.-180    	; 0x17de <__fp_inf>
    1892:	ab cf       	rjmp	.-170    	; 0x17ea <__fp_nan>
    1894:	11 24       	eor	r1, r1
    1896:	ee cf       	rjmp	.-36     	; 0x1874 <__fp_szero>

00001898 <__mulsf3x>:
    1898:	ca df       	rcall	.-108    	; 0x182e <__fp_split3>
    189a:	a0 f3       	brcs	.-24     	; 0x1884 <__mulsf3+0x4>

0000189c <__mulsf3_pse>:
    189c:	95 9f       	mul	r25, r21
    189e:	d1 f3       	breq	.-12     	; 0x1894 <__mulsf3+0x14>
    18a0:	95 0f       	add	r25, r21
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	55 1f       	adc	r21, r21
    18a6:	62 9f       	mul	r22, r18
    18a8:	f0 01       	movw	r30, r0
    18aa:	72 9f       	mul	r23, r18
    18ac:	bb 27       	eor	r27, r27
    18ae:	f0 0d       	add	r31, r0
    18b0:	b1 1d       	adc	r27, r1
    18b2:	63 9f       	mul	r22, r19
    18b4:	aa 27       	eor	r26, r26
    18b6:	f0 0d       	add	r31, r0
    18b8:	b1 1d       	adc	r27, r1
    18ba:	aa 1f       	adc	r26, r26
    18bc:	64 9f       	mul	r22, r20
    18be:	66 27       	eor	r22, r22
    18c0:	b0 0d       	add	r27, r0
    18c2:	a1 1d       	adc	r26, r1
    18c4:	66 1f       	adc	r22, r22
    18c6:	82 9f       	mul	r24, r18
    18c8:	22 27       	eor	r18, r18
    18ca:	b0 0d       	add	r27, r0
    18cc:	a1 1d       	adc	r26, r1
    18ce:	62 1f       	adc	r22, r18
    18d0:	73 9f       	mul	r23, r19
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	62 1f       	adc	r22, r18
    18d8:	83 9f       	mul	r24, r19
    18da:	a0 0d       	add	r26, r0
    18dc:	61 1d       	adc	r22, r1
    18de:	22 1f       	adc	r18, r18
    18e0:	74 9f       	mul	r23, r20
    18e2:	33 27       	eor	r19, r19
    18e4:	a0 0d       	add	r26, r0
    18e6:	61 1d       	adc	r22, r1
    18e8:	23 1f       	adc	r18, r19
    18ea:	84 9f       	mul	r24, r20
    18ec:	60 0d       	add	r22, r0
    18ee:	21 1d       	adc	r18, r1
    18f0:	82 2f       	mov	r24, r18
    18f2:	76 2f       	mov	r23, r22
    18f4:	6a 2f       	mov	r22, r26
    18f6:	11 24       	eor	r1, r1
    18f8:	9f 57       	subi	r25, 0x7F	; 127
    18fa:	50 40       	sbci	r21, 0x00	; 0
    18fc:	8a f0       	brmi	.+34     	; 0x1920 <__mulsf3_pse+0x84>
    18fe:	e1 f0       	breq	.+56     	; 0x1938 <__mulsf3_pse+0x9c>
    1900:	88 23       	and	r24, r24
    1902:	4a f0       	brmi	.+18     	; 0x1916 <__mulsf3_pse+0x7a>
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	bb 1f       	adc	r27, r27
    190a:	66 1f       	adc	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	91 50       	subi	r25, 0x01	; 1
    1912:	50 40       	sbci	r21, 0x00	; 0
    1914:	a9 f7       	brne	.-22     	; 0x1900 <__mulsf3_pse+0x64>
    1916:	9e 3f       	cpi	r25, 0xFE	; 254
    1918:	51 05       	cpc	r21, r1
    191a:	70 f0       	brcs	.+28     	; 0x1938 <__mulsf3_pse+0x9c>
    191c:	60 cf       	rjmp	.-320    	; 0x17de <__fp_inf>
    191e:	aa cf       	rjmp	.-172    	; 0x1874 <__fp_szero>
    1920:	5f 3f       	cpi	r21, 0xFF	; 255
    1922:	ec f3       	brlt	.-6      	; 0x191e <__mulsf3_pse+0x82>
    1924:	98 3e       	cpi	r25, 0xE8	; 232
    1926:	dc f3       	brlt	.-10     	; 0x191e <__mulsf3_pse+0x82>
    1928:	86 95       	lsr	r24
    192a:	77 95       	ror	r23
    192c:	67 95       	ror	r22
    192e:	b7 95       	ror	r27
    1930:	f7 95       	ror	r31
    1932:	e7 95       	ror	r30
    1934:	9f 5f       	subi	r25, 0xFF	; 255
    1936:	c1 f7       	brne	.-16     	; 0x1928 <__mulsf3_pse+0x8c>
    1938:	fe 2b       	or	r31, r30
    193a:	88 0f       	add	r24, r24
    193c:	91 1d       	adc	r25, r1
    193e:	96 95       	lsr	r25
    1940:	87 95       	ror	r24
    1942:	97 f9       	bld	r25, 7
    1944:	08 95       	ret

00001946 <__mulsi3>:
    1946:	db 01       	movw	r26, r22
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	0b d0       	rcall	.+22     	; 0x1964 <__muluhisi3>
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	a2 9f       	mul	r26, r18
    1954:	80 0d       	add	r24, r0
    1956:	91 1d       	adc	r25, r1
    1958:	a3 9f       	mul	r26, r19
    195a:	90 0d       	add	r25, r0
    195c:	b2 9f       	mul	r27, r18
    195e:	90 0d       	add	r25, r0
    1960:	11 24       	eor	r1, r1
    1962:	08 95       	ret

00001964 <__muluhisi3>:
    1964:	09 d0       	rcall	.+18     	; 0x1978 <__umulhisi3>
    1966:	a5 9f       	mul	r26, r21
    1968:	90 0d       	add	r25, r0
    196a:	b4 9f       	mul	r27, r20
    196c:	90 0d       	add	r25, r0
    196e:	a4 9f       	mul	r26, r20
    1970:	80 0d       	add	r24, r0
    1972:	91 1d       	adc	r25, r1
    1974:	11 24       	eor	r1, r1
    1976:	08 95       	ret

00001978 <__umulhisi3>:
    1978:	a2 9f       	mul	r26, r18
    197a:	b0 01       	movw	r22, r0
    197c:	b3 9f       	mul	r27, r19
    197e:	c0 01       	movw	r24, r0
    1980:	a3 9f       	mul	r26, r19
    1982:	70 0d       	add	r23, r0
    1984:	81 1d       	adc	r24, r1
    1986:	11 24       	eor	r1, r1
    1988:	91 1d       	adc	r25, r1
    198a:	b2 9f       	mul	r27, r18
    198c:	70 0d       	add	r23, r0
    198e:	81 1d       	adc	r24, r1
    1990:	11 24       	eor	r1, r1
    1992:	91 1d       	adc	r25, r1
    1994:	08 95       	ret

00001996 <_exit>:
    1996:	f8 94       	cli

00001998 <__stop_program>:
    1998:	ff cf       	rjmp	.-2      	; 0x1998 <__stop_program>
