
HackIRRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800104  00800104  000008b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003523  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00004103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000205c  00000000  00000000  00004ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a68  00000000  00000000  00007054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099a  00000000  00000000  00007abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003696  00000000  00000000  00008456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000baec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	11 c3       	rjmp	.+1570   	; 0x65c <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3d       	cpi	r26, 0xDB	; 219
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9e d2       	rcall	.+1340   	; 0x5d8 <main>
  9c:	bb c3       	rjmp	.+1910   	; 0x814 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  a4:	88 e8       	ldi	r24, 0x88	; 136
  a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  aa:	08 95       	ret

000000ac <i2c_start>:
  ac:	94 ea       	ldi	r25, 0xA4	; 164
  ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b6:	99 23       	and	r25, r25
  b8:	e4 f7       	brge	.-8      	; 0xb2 <i2c_start+0x6>
  ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  be:	98 7f       	andi	r25, 0xF8	; 248
  c0:	98 30       	cpi	r25, 0x08	; 8
  c2:	11 f0       	breq	.+4      	; 0xc8 <i2c_start+0x1c>
  c4:	90 31       	cpi	r25, 0x10	; 16
  c6:	91 f4       	brne	.+36     	; 0xec <i2c_start+0x40>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d6:	88 23       	and	r24, r24
  d8:	e4 f7       	brge	.-8      	; 0xd2 <i2c_start+0x26>
  da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	88 31       	cpi	r24, 0x18	; 24
  e2:	31 f0       	breq	.+12     	; 0xf0 <i2c_start+0x44>
  e4:	80 34       	cpi	r24, 0x40	; 64
  e6:	31 f4       	brne	.+12     	; 0xf4 <i2c_start+0x48>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <i2c_stop>:
  f8:	84 e9       	ldi	r24, 0x94	; 148
  fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	84 fd       	sbrc	r24, 4
 104:	fc cf       	rjmp	.-8      	; 0xfe <i2c_stop+0x6>
 106:	08 95       	ret

00000108 <i2c_write>:
 108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 116:	88 23       	and	r24, r24
 118:	e4 f7       	brge	.-8      	; 0x112 <i2c_write+0xa>
 11a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	88 32       	cpi	r24, 0x28	; 40
 122:	11 f0       	breq	.+4      	; 0x128 <i2c_write+0x20>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret

0000012c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 132:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <i2c_readNak+0x6>
	
    return TWDR;
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 13e:	08 95       	ret

00000140 <ir_timerRst>:
}

// enable/disable blinking of pin 13 on IR processing
void ir_blink13(int blinkflag)
{
  irparams.blinkflag = blinkflag;
 140:	16 bc       	out	0x26, r1	; 38
 142:	08 95       	ret

00000144 <ir_interruptService>:
{
  unsigned char irdata = 0;

  // timer is used for sampling IR signal

    ir_timerRst();
 144:	fd df       	rcall	.-6      	; 0x140 <ir_timerRst>

    //irdata = (unsigned char)ir_digitalRead(irparams.recvpin);
	irdata = (IR_RECEIVE_PINx & (1<<IR_RECEIVE_PIN))>>IR_RECEIVE_PIN;
 146:	89 b1       	in	r24, 0x09	; 9
 148:	28 2f       	mov	r18, r24
 14a:	22 1f       	adc	r18, r18
 14c:	22 27       	eor	r18, r18
 14e:	22 1f       	adc	r18, r18

    irparams.timer++; // One more 50us tick
 150:	e5 e0       	ldi	r30, 0x05	; 5
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	82 81       	ldd	r24, Z+2	; 0x02
 156:	93 81       	ldd	r25, Z+3	; 0x03
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	93 83       	std	Z+3, r25	; 0x03
 15c:	82 83       	std	Z+2, r24	; 0x02
    if (irparams.rawlen >= RAWBUF) {
 15e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <irparams+0xcc>
 162:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <irparams+0xcd>
 166:	84 36       	cpi	r24, 0x64	; 100
 168:	91 05       	cpc	r25, r1
 16a:	18 f0       	brcs	.+6      	; 0x172 <ir_interruptService+0x2e>
        // Buffer overflow
        irparams.rcvstate = STATE_STOP;
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <irparams>
    }
    switch(irparams.rcvstate) {
 172:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <irparams>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	d1 f1       	breq	.+116    	; 0x1ee <ir_interruptService+0xaa>
 17a:	18 f4       	brcc	.+6      	; 0x182 <ir_interruptService+0x3e>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	41 f0       	breq	.+16     	; 0x190 <ir_interruptService+0x4c>
 180:	08 95       	ret
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	09 f4       	brne	.+2      	; 0x188 <ir_interruptService+0x44>
 186:	53 c0       	rjmp	.+166    	; 0x22e <ir_interruptService+0xea>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	09 f4       	brne	.+2      	; 0x18e <ir_interruptService+0x4a>
 18c:	7b c0       	rjmp	.+246    	; 0x284 <ir_interruptService+0x140>
 18e:	08 95       	ret
      case STATE_IDLE: // In the middle of a gap
        if (irdata == MARK) {
 190:	21 30       	cpi	r18, 0x01	; 1
 192:	09 f0       	breq	.+2      	; 0x196 <ir_interruptService+0x52>
 194:	7d c0       	rjmp	.+250    	; 0x290 <ir_interruptService+0x14c>
        if (irparams.timer < GAP_TICKS) {
 196:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <irparams+0x2>
 19a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <irparams+0x3>
 19e:	84 36       	cpi	r24, 0x64	; 100
 1a0:	91 05       	cpc	r25, r1
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <ir_interruptService+0x6a>
            // Not big enough to be a gap.
            irparams.timer = 0;
 1a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <irparams+0x3>
 1a8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <irparams+0x2>
 1ac:	08 95       	ret
        } 
        else {
            // gap just ended, record duration and start recording transmission
            irparams.rawlen = 0;
 1ae:	a5 e0       	ldi	r26, 0x05	; 5
 1b0:	b1 e0       	ldi	r27, 0x01	; 1
 1b2:	e1 ed       	ldi	r30, 0xD1	; 209
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	11 82       	std	Z+1, r1	; 0x01
 1b8:	10 82       	st	Z, r1
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 1ba:	80 81       	ld	r24, Z
 1bc:	91 81       	ldd	r25, Z+1	; 0x01
 1be:	9c 01       	movw	r18, r24
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	31 83       	std	Z+1, r19	; 0x01
 1c6:	20 83       	st	Z, r18
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	2d 91       	ld	r18, X+
 1cc:	3c 91       	ld	r19, X
 1ce:	13 97       	sbiw	r26, 0x03	; 3
 1d0:	fc 01       	movw	r30, r24
 1d2:	32 96       	adiw	r30, 0x02	; 2
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	eb 5f       	subi	r30, 0xFB	; 251
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	31 83       	std	Z+1, r19	; 0x01
 1de:	20 83       	st	Z, r18
            irparams.timer = 0;
 1e0:	13 96       	adiw	r26, 0x03	; 3
 1e2:	1c 92       	st	X, r1
 1e4:	1e 92       	st	-X, r1
 1e6:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	8c 93       	st	X, r24
 1ec:	08 95       	ret
        }
        }
        break;
      case STATE_MARK: // timing MARK
        if (irdata == SPACE) {   // MARK ended, record time
 1ee:	21 11       	cpse	r18, r1
 1f0:	4f c0       	rjmp	.+158    	; 0x290 <ir_interruptService+0x14c>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 1f2:	a5 e0       	ldi	r26, 0x05	; 5
 1f4:	b1 e0       	ldi	r27, 0x01	; 1
 1f6:	e1 ed       	ldi	r30, 0xD1	; 209
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	80 81       	ld	r24, Z
 1fc:	91 81       	ldd	r25, Z+1	; 0x01
 1fe:	9c 01       	movw	r18, r24
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	31 83       	std	Z+1, r19	; 0x01
 206:	20 83       	st	Z, r18
 208:	12 96       	adiw	r26, 0x02	; 2
 20a:	2d 91       	ld	r18, X+
 20c:	3c 91       	ld	r19, X
 20e:	13 97       	sbiw	r26, 0x03	; 3
 210:	fc 01       	movw	r30, r24
 212:	32 96       	adiw	r30, 0x02	; 2
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	eb 5f       	subi	r30, 0xFB	; 251
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	31 83       	std	Z+1, r19	; 0x01
 21e:	20 83       	st	Z, r18
            irparams.timer = 0;
 220:	13 96       	adiw	r26, 0x03	; 3
 222:	1c 92       	st	X, r1
 224:	1e 92       	st	-X, r1
 226:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_SPACE;
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	8c 93       	st	X, r24
 22c:	08 95       	ret
        }
        break;
      case STATE_SPACE: // timing SPACE
        if (irdata == MARK) { // SPACE just ended, record it
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	f1 f4       	brne	.+60     	; 0x26e <ir_interruptService+0x12a>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 232:	a5 e0       	ldi	r26, 0x05	; 5
 234:	b1 e0       	ldi	r27, 0x01	; 1
 236:	e1 ed       	ldi	r30, 0xD1	; 209
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	9c 01       	movw	r18, r24
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	31 83       	std	Z+1, r19	; 0x01
 246:	20 83       	st	Z, r18
 248:	12 96       	adiw	r26, 0x02	; 2
 24a:	2d 91       	ld	r18, X+
 24c:	3c 91       	ld	r19, X
 24e:	13 97       	sbiw	r26, 0x03	; 3
 250:	fc 01       	movw	r30, r24
 252:	32 96       	adiw	r30, 0x02	; 2
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	eb 5f       	subi	r30, 0xFB	; 251
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	31 83       	std	Z+1, r19	; 0x01
 25e:	20 83       	st	Z, r18
            irparams.timer = 0;
 260:	13 96       	adiw	r26, 0x03	; 3
 262:	1c 92       	st	X, r1
 264:	1e 92       	st	-X, r1
 266:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	8c 93       	st	X, r24
 26c:	08 95       	ret
        } 
        else { // SPACE
          if (irparams.timer > GAP_TICKS) {
 26e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <irparams+0x2>
 272:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <irparams+0x3>
 276:	85 36       	cpi	r24, 0x65	; 101
 278:	91 05       	cpc	r25, r1
 27a:	50 f0       	brcs	.+20     	; 0x290 <ir_interruptService+0x14c>
            // big SPACE, indicates gap between codes
            // Mark current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting space width
            irparams.rcvstate = STATE_STOP;
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <irparams>
 282:	08 95       	ret
          } 
        }
        break;
     case STATE_STOP: // waiting, measuring gap
        if (irdata == MARK) { // reset gap timer
 284:	21 30       	cpi	r18, 0x01	; 1
 286:	21 f4       	brne	.+8      	; 0x290 <ir_interruptService+0x14c>
           irparams.timer = 0;
 288:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <irparams+0x3>
 28c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <irparams+0x2>
 290:	08 95       	ret

00000292 <lcd_read>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 292:	cf 93       	push	r28
 294:	88 23       	and	r24, r24
 296:	31 f0       	breq	.+12     	; 0x2a4 <lcd_read+0x12>
 298:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <lcd_read+0x1c>
 2a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2b8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	01 d2       	rcall	.+1026   	; 0x6c2 <pcf8574_setoutput>
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	44 d2       	rcall	.+1160   	; 0x74e <pcf8574_setoutputpinhigh>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_read+0x36>
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	58 d2       	rcall	.+1200   	; 0x77e <pcf8574_getinputpin>
 2ce:	88 23       	and	r24, r24
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <lcd_read+0x44>
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <lcd_read+0x46>
 2d6:	c0 e1       	ldi	r28, 0x10	; 16
 2d8:	65 e0       	ldi	r22, 0x05	; 5
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	50 d2       	rcall	.+1184   	; 0x77e <pcf8574_getinputpin>
 2de:	81 11       	cpse	r24, r1
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <lcd_read+0x52>
 2e2:	c0 62       	ori	r28, 0x20	; 32
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	4a d2       	rcall	.+1172   	; 0x77e <pcf8574_getinputpin>
 2ea:	81 11       	cpse	r24, r1
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <lcd_read+0x5e>
 2ee:	c0 64       	ori	r28, 0x40	; 64
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	44 d2       	rcall	.+1160   	; 0x77e <pcf8574_getinputpin>
 2f6:	81 11       	cpse	r24, r1
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <lcd_read+0x6a>
 2fa:	c0 68       	ori	r28, 0x80	; 128
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	29 d2       	rcall	.+1106   	; 0x754 <pcf8574_setoutputpinlow>
 302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_read+0x72>
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	22 d2       	rcall	.+1092   	; 0x74e <pcf8574_setoutputpinhigh>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_read+0x7a>
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	36 d2       	rcall	.+1132   	; 0x77e <pcf8574_getinputpin>
 312:	81 11       	cpse	r24, r1
 314:	01 c0       	rjmp	.+2      	; 0x318 <lcd_read+0x86>
 316:	c1 60       	ori	r28, 0x01	; 1
 318:	65 e0       	ldi	r22, 0x05	; 5
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	30 d2       	rcall	.+1120   	; 0x77e <pcf8574_getinputpin>
 31e:	81 11       	cpse	r24, r1
 320:	01 c0       	rjmp	.+2      	; 0x324 <lcd_read+0x92>
 322:	c2 60       	ori	r28, 0x02	; 2
 324:	66 e0       	ldi	r22, 0x06	; 6
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	2a d2       	rcall	.+1108   	; 0x77e <pcf8574_getinputpin>
 32a:	81 11       	cpse	r24, r1
 32c:	01 c0       	rjmp	.+2      	; 0x330 <lcd_read+0x9e>
 32e:	c4 60       	ori	r28, 0x04	; 4
 330:	67 e0       	ldi	r22, 0x07	; 7
 332:	87 e0       	ldi	r24, 0x07	; 7
 334:	24 d2       	rcall	.+1096   	; 0x77e <pcf8574_getinputpin>
 336:	81 11       	cpse	r24, r1
 338:	01 c0       	rjmp	.+2      	; 0x33c <lcd_read+0xaa>
 33a:	c8 60       	ori	r28, 0x08	; 8
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	09 d2       	rcall	.+1042   	; 0x754 <pcf8574_setoutputpinlow>
 342:	8c 2f       	mov	r24, r28
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <lcd_waitbusy>:
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	a3 df       	rcall	.-186    	; 0x292 <lcd_read>
 34c:	88 23       	and	r24, r24
 34e:	e4 f3       	brlt	.-8      	; 0x348 <lcd_waitbusy>
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_waitbusy+0xc>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	9b cf       	rjmp	.-202    	; 0x292 <lcd_read>
 35c:	08 95       	ret

0000035e <toggle_e>:
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	f5 d1       	rcall	.+1002   	; 0x74e <pcf8574_setoutputpinhigh>
 364:	00 c0       	rjmp	.+0      	; 0x366 <toggle_e+0x8>
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	f4 c1       	rjmp	.+1000   	; 0x754 <pcf8574_setoutputpinlow>
 36c:	08 95       	ret

0000036e <lcd_write>:
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
 372:	66 23       	and	r22, r22
 374:	31 f0       	breq	.+12     	; 0x382 <lcd_write+0x14>
 376:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 380:	05 c0       	rjmp	.+10     	; 0x38c <lcd_write+0x1e>
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 386:	8e 7f       	andi	r24, 0xFE	; 254
 388:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 38c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 390:	8d 7f       	andi	r24, 0xFD	; 253
 392:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 396:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 39a:	87 e0       	ldi	r24, 0x07	; 7
 39c:	92 d1       	rcall	.+804    	; 0x6c2 <pcf8574_setoutput>
 39e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3a2:	8f 77       	andi	r24, 0x7F	; 127
 3a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3ac:	8f 7b       	andi	r24, 0xBF	; 191
 3ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3c0:	8f 7e       	andi	r24, 0xEF	; 239
 3c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3c6:	cc 23       	and	r28, r28
 3c8:	2c f4       	brge	.+10     	; 0x3d4 <lcd_write+0x66>
 3ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3d4:	c6 ff       	sbrs	r28, 6
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <lcd_write+0x74>
 3d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3e2:	c5 ff       	sbrs	r28, 5
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <lcd_write+0x82>
 3e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3f0:	c4 ff       	sbrs	r28, 4
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <lcd_write+0x90>
 3f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3f8:	80 61       	ori	r24, 0x10	; 16
 3fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3fe:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	5e d1       	rcall	.+700    	; 0x6c2 <pcf8574_setoutput>
 406:	ab df       	rcall	.-170    	; 0x35e <toggle_e>
 408:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 412:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 416:	8f 7b       	andi	r24, 0xBF	; 191
 418:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 41c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 426:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 42a:	8f 7e       	andi	r24, 0xEF	; 239
 42c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 430:	c3 ff       	sbrs	r28, 3
 432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 43e:	c2 ff       	sbrs	r28, 2
 440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 446:	80 64       	ori	r24, 0x40	; 64
 448:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 44c:	c1 ff       	sbrs	r28, 1
 44e:	05 c0       	rjmp	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 454:	80 62       	ori	r24, 0x20	; 32
 456:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 45a:	c0 ff       	sbrs	r28, 0
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 462:	80 61       	ori	r24, 0x10	; 16
 464:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 468:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	29 d1       	rcall	.+594    	; 0x6c2 <pcf8574_setoutput>
 470:	76 df       	rcall	.-276    	; 0x35e <toggle_e>
 472:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 476:	80 61       	ori	r24, 0x10	; 16
 478:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 47c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 480:	80 62       	ori	r24, 0x20	; 32
 482:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 486:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 48a:	80 64       	ori	r24, 0x40	; 64
 48c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 490:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 49a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 49e:	87 e0       	ldi	r24, 0x07	; 7
 4a0:	10 d1       	rcall	.+544    	; 0x6c2 <pcf8574_setoutput>
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <lcd_command>:
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
 4aa:	4e df       	rcall	.-356    	; 0x348 <lcd_waitbusy>
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8c 2f       	mov	r24, r28
 4b0:	5e df       	rcall	.-324    	; 0x36e <lcd_write>
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <lcd_gotoxy>:
 4b6:	61 11       	cpse	r22, r1
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <lcd_gotoxy+0xa>
 4ba:	80 58       	subi	r24, 0x80	; 128
 4bc:	f4 cf       	rjmp	.-24     	; 0x4a6 <lcd_command>
 4be:	08 95       	ret
 4c0:	80 54       	subi	r24, 0x40	; 64
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <lcd_command>
 4c4:	08 95       	ret

000004c6 <lcd_clrscr>:
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	ee cf       	rjmp	.-36     	; 0x4a6 <lcd_command>
 4ca:	08 95       	ret

000004cc <lcd_led>:
 4cc:	88 23       	and	r24, r24
 4ce:	31 f0       	breq	.+12     	; 0x4dc <lcd_led+0x10>
 4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4d4:	87 7f       	andi	r24, 0xF7	; 247
 4d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <lcd_led+0x1a>
 4dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4e0:	88 60       	ori	r24, 0x08	; 8
 4e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 4e6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 4ea:	87 e0       	ldi	r24, 0x07	; 7
 4ec:	ea c0       	rjmp	.+468    	; 0x6c2 <pcf8574_setoutput>
 4ee:	08 95       	ret

000004f0 <lcd_home>:
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	d9 cf       	rjmp	.-78     	; 0x4a6 <lcd_command>
 4f4:	08 95       	ret

000004f6 <lcd_putc>:
 4f6:	cf 93       	push	r28
 4f8:	c8 2f       	mov	r28, r24
 4fa:	26 df       	rcall	.-436    	; 0x348 <lcd_waitbusy>
 4fc:	ca 30       	cpi	r28, 0x0A	; 10
 4fe:	41 f4       	brne	.+16     	; 0x510 <lcd_putc+0x1a>
 500:	80 34       	cpi	r24, 0x40	; 64
 502:	10 f4       	brcc	.+4      	; 0x508 <lcd_putc+0x12>
 504:	80 e4       	ldi	r24, 0x40	; 64
 506:	01 c0       	rjmp	.+2      	; 0x50a <lcd_putc+0x14>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	80 58       	subi	r24, 0x80	; 128
 50c:	cc df       	rcall	.-104    	; 0x4a6 <lcd_command>
 50e:	0f c0       	rjmp	.+30     	; 0x52e <lcd_putc+0x38>
 510:	80 31       	cpi	r24, 0x10	; 16
 512:	21 f4       	brne	.+8      	; 0x51c <lcd_putc+0x26>
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	80 ec       	ldi	r24, 0xC0	; 192
 518:	2a df       	rcall	.-428    	; 0x36e <lcd_write>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <lcd_putc+0x30>
 51c:	80 35       	cpi	r24, 0x50	; 80
 51e:	19 f4       	brne	.+6      	; 0x526 <lcd_putc+0x30>
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	24 df       	rcall	.-440    	; 0x36e <lcd_write>
 526:	10 df       	rcall	.-480    	; 0x348 <lcd_waitbusy>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	8c 2f       	mov	r24, r28
 52c:	20 df       	rcall	.-448    	; 0x36e <lcd_write>
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <lcd_puts>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	fc 01       	movw	r30, r24
 538:	02 c0       	rjmp	.+4      	; 0x53e <lcd_puts+0xc>
 53a:	dd df       	rcall	.-70     	; 0x4f6 <lcd_putc>
 53c:	fe 01       	movw	r30, r28
 53e:	ef 01       	movw	r28, r30
 540:	21 96       	adiw	r28, 0x01	; 1
 542:	80 81       	ld	r24, Z
 544:	81 11       	cpse	r24, r1
 546:	f9 cf       	rjmp	.-14     	; 0x53a <lcd_puts+0x8>
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	18 2f       	mov	r17, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
 556:	a5 d0       	rcall	.+330    	; 0x6a2 <pcf8574_init>
	#endif

	dataport = 0;
 558:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 55c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	af d0       	rcall	.+350    	; 0x6c2 <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	9d e7       	ldi	r25, 0x7D	; 125
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

	delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 56c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 570:	80 62       	ori	r24, 0x20	; 32
 572:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 576:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 57a:	80 61       	ori	r24, 0x10	; 16
 57c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 580:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 584:	87 e0       	ldi	r24, 0x07	; 7

    lcd_e_toggle();
 586:	9d d0       	rcall	.+314    	; 0x6c2 <pcf8574_setoutput>
 588:	ea de       	rcall	.-556    	; 0x35e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	97 e2       	ldi	r25, 0x27	; 39
 58e:	01 97       	sbiw	r24, 0x01	; 1

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */ 
    lcd_e_toggle();      
 590:	f1 f7       	brne	.-4      	; 0x58e <lcd_init+0x40>
 592:	e5 de       	rcall	.-566    	; 0x35e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 594:	c0 e8       	ldi	r28, 0x80	; 128
 596:	d0 e0       	ldi	r29, 0x00	; 0
 598:	ce 01       	movw	r24, r28
 59a:	01 97       	sbiw	r24, 0x01	; 1
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_init+0x4c>
 59e:	df de       	rcall	.-578    	; 0x35e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <lcd_init+0x54>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
 5a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5aa:	8f 7e       	andi	r24, 0xEF	; 239
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 5ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 5b0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
    lcd_e_toggle();
 5b4:	87 e0       	ldi	r24, 0x07	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5b6:	85 d0       	rcall	.+266    	; 0x6c2 <pcf8574_setoutput>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 5b8:	d2 de       	rcall	.-604    	; 0x35e <toggle_e>
 5ba:	21 97       	sbiw	r28, 0x01	; 1

    lcd_command(LCD_DISP_OFF);              /* display off                  */
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <lcd_init+0x6c>
 5be:	88 e2       	ldi	r24, 0x28	; 40
 5c0:	72 df       	rcall	.-284    	; 0x4a6 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	70 df       	rcall	.-288    	; 0x4a6 <lcd_command>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 5c6:	7f df       	rcall	.-258    	; 0x4c6 <lcd_clrscr>
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	6d df       	rcall	.-294    	; 0x4a6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 5cc:	81 2f       	mov	r24, r17
 5ce:	6b df       	rcall	.-298    	; 0x4a6 <lcd_command>
 5d0:	df 91       	pop	r29

}/* lcd_init */
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	08 95       	ret

000005d8 <main>:

//char keypad[4][3]={1,2,3,4,5,6,7,8,9,'*','0','#'};


int main(void)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2a 97       	sbiw	r28, 0x0a	; 10
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
	//DDRB |= 1<<3;
	DDRD |= 1<<6;
 5ec:	8a b1       	in	r24, 0x0a	; 10
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	8a b9       	out	0x0a, r24	; 10
	}*/
	
	
	
	//init lcd
	lcd_init(LCD_DISP_ON_BLINK);
 5f2:	8d e0       	ldi	r24, 0x0D	; 13
 5f4:	ac df       	rcall	.-168    	; 0x54e <lcd_init>
	//lcd go home
	lcd_home();
 5f6:	7c df       	rcall	.-264    	; 0x4f0 <lcd_home>
	uint8_t led = 0;
	lcd_led(led); //set led
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	68 df       	rcall	.-304    	; 0x4cc <lcd_led>
 5fc:	00 e0       	ldi	r16, 0x00	; 0
		//lcd_led(led); //set led
		//led = !led; //invert led for next loop

		//test loop
		int i = 0;
		int line = 0;
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	e1 2c       	mov	r14, r1
		for(i=0; i<10; i++) {
 602:	f1 2c       	mov	r15, r1
 604:	26 c0       	rjmp	.+76     	; 0x652 <main+0x7a>
 606:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 608:	be 01       	movw	r22, r28
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	c7 01       	movw	r24, r14
 610:	ce d0       	rcall	.+412    	; 0x7ae <__itoa_ncheck>
			char buf[10];
			itoa(i, buf, 10);
			lcd_gotoxy(1, line);
 612:	60 2f       	mov	r22, r16
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	4f df       	rcall	.-354    	; 0x4b6 <lcd_gotoxy>
			lcd_puts("i= ");
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	8a df       	rcall	.-236    	; 0x532 <lcd_puts>
 61e:	4a e0       	ldi	r20, 0x0A	; 10
 620:	be 01       	movw	r22, r28
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	c7 01       	movw	r24, r14
			itoa(i, buf, 10);
			lcd_gotoxy(4, line);
 628:	c2 d0       	rcall	.+388    	; 0x7ae <__itoa_ncheck>
 62a:	60 2f       	mov	r22, r16
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	43 df       	rcall	.-378    	; 0x4b6 <lcd_gotoxy>
			lcd_puts(buf);
 630:	ce 01       	movw	r24, r28
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	7e df       	rcall	.-260    	; 0x532 <lcd_puts>
 636:	c8 01       	movw	r24, r16
			line++;
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	81 70       	andi	r24, 0x01	; 1
			line %= 2;
 63c:	90 78       	andi	r25, 0x80	; 128
 63e:	99 23       	and	r25, r25
 640:	24 f4       	brge	.+8      	; 0x64a <main+0x72>
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	8e 6f       	ori	r24, 0xFE	; 254
 646:	9f 6f       	ori	r25, 0xFF	; 255
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	8c 01       	movw	r16, r24
 64c:	8f ef       	ldi	r24, 0xFF	; 255
		//led = !led; //invert led for next loop

		//test loop
		int i = 0;
		int line = 0;
		for(i=0; i<10; i++) {
 64e:	e8 1a       	sub	r14, r24
 650:	f8 0a       	sbc	r15, r24
 652:	8a e0       	ldi	r24, 0x0A	; 10
 654:	e8 16       	cp	r14, r24
 656:	f1 04       	cpc	r15, r1
 658:	b4 f2       	brlt	.-84     	; 0x606 <main+0x2e>
 65a:	d0 cf       	rjmp	.-96     	; 0x5fc <main+0x24>

0000065c <__vector_14>:
 65c:	1f 92       	push	r1
	}

}

ISR(TIMER0_COMPA_vect)
{
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	2f 93       	push	r18
 668:	3f 93       	push	r19
 66a:	4f 93       	push	r20
 66c:	5f 93       	push	r21
 66e:	6f 93       	push	r22
 670:	7f 93       	push	r23
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	af 93       	push	r26
 678:	bf 93       	push	r27
 67a:	ef 93       	push	r30
 67c:	ff 93       	push	r31
	ir_interruptService();
 67e:	62 dd       	rcall	.-1340   	; 0x144 <ir_interruptService>
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
 6a2:	fe dc       	rcall	.-1540   	; 0xa0 <i2c_init>
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	8a 95       	dec	r24
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <pcf8574_init+0x4>
 6aa:	00 00       	nop
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <pcf8574_init+0x1a>
 6b0:	e8 2f       	mov	r30, r24
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	ed 52       	subi	r30, 0x2D	; 45
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	10 82       	st	Z, r1
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	88 30       	cpi	r24, 0x08	; 8
 6be:	c0 f3       	brcs	.-16     	; 0x6b0 <pcf8574_init+0xe>
 6c0:	08 95       	ret

000006c2 <pcf8574_setoutput>:
 6c2:	cf 93       	push	r28
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	70 f4       	brcc	.+28     	; 0x6e4 <pcf8574_setoutput+0x22>
 6c8:	c6 2f       	mov	r28, r22
 6ca:	e8 2f       	mov	r30, r24
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	ed 52       	subi	r30, 0x2D	; 45
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	60 83       	st	Z, r22
 6d4:	80 5e       	subi	r24, 0xE0	; 224
 6d6:	88 0f       	add	r24, r24
 6d8:	e9 dc       	rcall	.-1582   	; 0xac <i2c_start>
 6da:	8c 2f       	mov	r24, r28
 6dc:	15 dd       	rcall	.-1494   	; 0x108 <i2c_write>
 6de:	0c dd       	rcall	.-1512   	; 0xf8 <i2c_stop>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <pcf8574_setoutput+0x24>
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 6ee:	88 30       	cpi	r24, 0x08	; 8
 6f0:	40 f5       	brcc	.+80     	; 0x742 <pcf8574_setoutputpin+0x58>
 6f2:	68 30       	cpi	r22, 0x08	; 8
 6f4:	40 f5       	brcc	.+80     	; 0x746 <pcf8574_setoutputpin+0x5c>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	ed 52       	subi	r30, 0x2D	; 45
 6fe:	fe 4f       	sbci	r31, 0xFE	; 254
 700:	90 81       	ld	r25, Z
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
 702:	44 23       	and	r20, r20
 704:	49 f0       	breq	.+18     	; 0x718 <pcf8574_setoutputpin+0x2e>
 706:	c1 e0       	ldi	r28, 0x01	; 1
 708:	d0 e0       	ldi	r29, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <pcf8574_setoutputpin+0x26>
 70c:	cc 0f       	add	r28, r28
 70e:	dd 1f       	adc	r29, r29
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <pcf8574_setoutputpin+0x22>
 714:	c9 2b       	or	r28, r25
 716:	09 c0       	rjmp	.+18     	; 0x72a <pcf8574_setoutputpin+0x40>
 718:	c1 e0       	ldi	r28, 0x01	; 1
 71a:	d0 e0       	ldi	r29, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <pcf8574_setoutputpin+0x38>
 71e:	cc 0f       	add	r28, r28
 720:	dd 1f       	adc	r29, r29
 722:	6a 95       	dec	r22
 724:	e2 f7       	brpl	.-8      	; 0x71e <pcf8574_setoutputpin+0x34>
 726:	c0 95       	com	r28
 728:	c9 23       	and	r28, r25
	    pcf8574_pinstatus[deviceid] = b;
 72a:	f9 01       	movw	r30, r18
 72c:	ed 52       	subi	r30, 0x2D	; 45
 72e:	fe 4f       	sbci	r31, 0xFE	; 254
 730:	c0 83       	st	Z, r28
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 732:	80 5e       	subi	r24, 0xE0	; 224
 734:	88 0f       	add	r24, r24
 736:	ba dc       	rcall	.-1676   	; 0xac <i2c_start>
		i2c_write(b);
 738:	8c 2f       	mov	r24, r28
		i2c_stop();
 73a:	e6 dc       	rcall	.-1588   	; 0x108 <i2c_write>
 73c:	dd dc       	rcall	.-1606   	; 0xf8 <i2c_stop>
		return 0;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	03 c0       	rjmp	.+6      	; 0x748 <pcf8574_setoutputpin+0x5e>
	}
	return -1;
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	01 c0       	rjmp	.+2      	; 0x748 <pcf8574_setoutputpin+0x5e>
 746:	8f ef       	ldi	r24, 0xFF	; 255
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	cc cf       	rjmp	.-104    	; 0x6ea <pcf8574_setoutputpin>
}
 752:	08 95       	ret

00000754 <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	c9 cf       	rjmp	.-110    	; 0x6ea <pcf8574_setoutputpin>
}
 758:	08 95       	ret

0000075a <pcf8574_getinput>:


/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
 75a:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
 75c:	88 30       	cpi	r24, 0x08	; 8
 75e:	58 f4       	brcc	.+22     	; 0x776 <pcf8574_getinput+0x1c>
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	80 96       	adiw	r24, 0x20	; 32
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	a0 dc       	rcall	.-1728   	; 0xac <i2c_start>
		data = ~i2c_readNak();
 76c:	df dc       	rcall	.-1602   	; 0x12c <i2c_readNak>
 76e:	c8 2f       	mov	r28, r24
 770:	c0 95       	com	r28
		i2c_stop();
 772:	c2 dc       	rcall	.-1660   	; 0xf8 <i2c_stop>
 774:	01 c0       	rjmp	.+2      	; 0x778 <pcf8574_getinput+0x1e>
 776:	cf ef       	ldi	r28, 0xFF	; 255

/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
	int8_t data = -1;
 778:	8c 2f       	mov	r24, r28
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
		data = ~i2c_readNak();
		i2c_stop();
	}
	return data;
}
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <pcf8574_getinputpin>:
 77e:	cf 93       	push	r28
/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 780:	88 30       	cpi	r24, 0x08	; 8
 782:	80 f4       	brcc	.+32     	; 0x7a4 <pcf8574_getinputpin+0x26>
 784:	68 30       	cpi	r22, 0x08	; 8
 786:	80 f4       	brcc	.+32     	; 0x7a8 <pcf8574_getinputpin+0x2a>
 788:	c6 2f       	mov	r28, r22
		data = pcf8574_getinput(deviceid);
 78a:	e7 df       	rcall	.-50     	; 0x75a <pcf8574_getinput>
		if(data != -1) {
 78c:	8f 3f       	cpi	r24, 0xFF	; 255
 78e:	69 f0       	breq	.+26     	; 0x7aa <pcf8574_getinputpin+0x2c>
			data = (data >> pin) & 0b00000001;
 790:	08 2e       	mov	r0, r24
 792:	00 0c       	add	r0, r0
 794:	99 0b       	sbc	r25, r25
 796:	02 c0       	rjmp	.+4      	; 0x79c <pcf8574_getinputpin+0x1e>
 798:	95 95       	asr	r25
 79a:	87 95       	ror	r24
 79c:	ca 95       	dec	r28
 79e:	e2 f7       	brpl	.-8      	; 0x798 <pcf8574_getinputpin+0x1a>
 7a0:	81 70       	andi	r24, 0x01	; 1
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <pcf8574_getinputpin+0x2c>

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <pcf8574_getinputpin+0x2c>
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
		if(data != -1) {
			data = (data >> pin) & 0b00000001;
		}
	}
	return data;
}
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <__itoa_ncheck>:
 7ae:	bb 27       	eor	r27, r27
 7b0:	4a 30       	cpi	r20, 0x0A	; 10
 7b2:	31 f4       	brne	.+12     	; 0x7c0 <__itoa_ncheck+0x12>
 7b4:	99 23       	and	r25, r25
 7b6:	22 f4       	brpl	.+8      	; 0x7c0 <__itoa_ncheck+0x12>
 7b8:	bd e2       	ldi	r27, 0x2D	; 45
 7ba:	90 95       	com	r25
 7bc:	81 95       	neg	r24
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <__utoa_common>

000007c2 <__utoa_ncheck>:
 7c2:	bb 27       	eor	r27, r27

000007c4 <__utoa_common>:
 7c4:	fb 01       	movw	r30, r22
 7c6:	55 27       	eor	r21, r21
 7c8:	aa 27       	eor	r26, r26
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	aa 1f       	adc	r26, r26
 7d0:	a4 17       	cp	r26, r20
 7d2:	10 f0       	brcs	.+4      	; 0x7d8 <__utoa_common+0x14>
 7d4:	a4 1b       	sub	r26, r20
 7d6:	83 95       	inc	r24
 7d8:	50 51       	subi	r21, 0x10	; 16
 7da:	b9 f7       	brne	.-18     	; 0x7ca <__utoa_common+0x6>
 7dc:	a0 5d       	subi	r26, 0xD0	; 208
 7de:	aa 33       	cpi	r26, 0x3A	; 58
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <__utoa_common+0x20>
 7e2:	a9 5d       	subi	r26, 0xD9	; 217
 7e4:	a1 93       	st	Z+, r26
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	79 f7       	brne	.-34     	; 0x7c8 <__utoa_common+0x4>
 7ea:	b1 11       	cpse	r27, r1
 7ec:	b1 93       	st	Z+, r27
 7ee:	11 92       	st	Z+, r1
 7f0:	cb 01       	movw	r24, r22
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <strrev>

000007f4 <strrev>:
 7f4:	dc 01       	movw	r26, r24
 7f6:	fc 01       	movw	r30, r24
 7f8:	67 2f       	mov	r22, r23
 7fa:	71 91       	ld	r23, Z+
 7fc:	77 23       	and	r23, r23
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <strrev+0x4>
 800:	32 97       	sbiw	r30, 0x02	; 2
 802:	04 c0       	rjmp	.+8      	; 0x80c <strrev+0x18>
 804:	7c 91       	ld	r23, X
 806:	6d 93       	st	X+, r22
 808:	70 83       	st	Z, r23
 80a:	62 91       	ld	r22, -Z
 80c:	ae 17       	cp	r26, r30
 80e:	bf 07       	cpc	r27, r31
 810:	c8 f3       	brcs	.-14     	; 0x804 <strrev+0x10>
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
