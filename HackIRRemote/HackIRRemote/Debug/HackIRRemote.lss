
HackIRRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000019ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001978  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800100  00800100  000019ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018aa  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd9  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00004a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ce9  00000000  00000000  00005512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000071fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_14>
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c0       	rjmp	.+54     	; 0x8c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c0       	rjmp	.+50     	; 0x8c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c0       	rjmp	.+46     	; 0x8c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c0       	rjmp	.+42     	; 0x8c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c0       	rjmp	.+38     	; 0x8c <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ae 3c       	cpi	r26, 0xCE	; 206
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 39 0a 	call	0x1472	; 0x1472 <main>
      88:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <ir_timerRst>:

static void ir_timerRst(void) {
    /*timer 3 for ir-receiving*/
    //TMR3H = (MAX_TMR_VAL - (USECPERTICK*(SYSCLOCK/US_PER_SEC)))/256;
    //TMR3L = (MAX_TMR_VAL - (USECPERTICK*(SYSCLOCK/US_PER_SEC)))%256;
	TCNT0=0;
      8e:	16 bc       	out	0x26, r1	; 38
      90:	08 95       	ret

00000092 <ir_timerCfgNorm>:
}

static void ir_timerCfgNorm(void) {
  /*timer 4A for ir-receiving*/
  TCCR0A=0;
      92:	14 bc       	out	0x24, r1	; 36
  TCCR0B= 0b00001100; // /256
      94:	8c e0       	ldi	r24, 0x0C	; 12
      96:	85 bd       	out	0x25, r24	; 37
  TIMSK0=0b00000010;
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  OCR0A=3; // division par 3
      9e:	83 e0       	ldi	r24, 0x03	; 3
      a0:	87 bd       	out	0x27, r24	; 39
      a2:	08 95       	ret

000000a4 <ir_compare>:
 */

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
static int ir_compare(unsigned int oldval, unsigned int newval) {
      a4:	8f 92       	push	r8
      a6:	9f 92       	push	r9
      a8:	af 92       	push	r10
      aa:	bf 92       	push	r11
      ac:	cf 92       	push	r12
      ae:	df 92       	push	r13
      b0:	ef 92       	push	r14
      b2:	ff 92       	push	r15
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	ec 01       	movw	r28, r24
  if (newval < oldval * .8) {
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
      c2:	4b 01       	movw	r8, r22
      c4:	5c 01       	movw	r10, r24
      c6:	be 01       	movw	r22, r28
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
      d0:	6b 01       	movw	r12, r22
      d2:	7c 01       	movw	r14, r24
      d4:	2d ec       	ldi	r18, 0xCD	; 205
      d6:	3c ec       	ldi	r19, 0xCC	; 204
      d8:	4c e4       	ldi	r20, 0x4C	; 76
      da:	5f e3       	ldi	r21, 0x3F	; 63
      dc:	0e 94 2f 0c 	call	0x185e	; 0x185e <__mulsf3>
      e0:	9b 01       	movw	r18, r22
      e2:	ac 01       	movw	r20, r24
      e4:	c5 01       	movw	r24, r10
      e6:	b4 01       	movw	r22, r8
      e8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__cmpsf2>
      ec:	88 23       	and	r24, r24
      ee:	9c f0       	brlt	.+38     	; 0x116 <ir_compare+0x72>
    return 0;
  } 
  else if (oldval < newval * .8) {
      f0:	2d ec       	ldi	r18, 0xCD	; 205
      f2:	3c ec       	ldi	r19, 0xCC	; 204
      f4:	4c e4       	ldi	r20, 0x4C	; 76
      f6:	5f e3       	ldi	r21, 0x3F	; 63
      f8:	c5 01       	movw	r24, r10
      fa:	b4 01       	movw	r22, r8
      fc:	0e 94 2f 0c 	call	0x185e	; 0x185e <__mulsf3>
     100:	9b 01       	movw	r18, r22
     102:	ac 01       	movw	r20, r24
     104:	c7 01       	movw	r24, r14
     106:	b6 01       	movw	r22, r12
     108:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__cmpsf2>
     10c:	88 23       	and	r24, r24
     10e:	34 f4       	brge	.+12     	; 0x11c <ir_compare+0x78>
    return 2;
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	05 c0       	rjmp	.+10     	; 0x120 <ir_compare+0x7c>
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
static int ir_compare(unsigned int oldval, unsigned int newval) {
  if (newval < oldval * .8) {
    return 0;
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <ir_compare+0x7c>
  } 
  else if (oldval < newval * .8) {
    return 2;
  } 
  else {
    return 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	ff 90       	pop	r15
     126:	ef 90       	pop	r14
     128:	df 90       	pop	r13
     12a:	cf 90       	pop	r12
     12c:	bf 90       	pop	r11
     12e:	af 90       	pop	r10
     130:	9f 90       	pop	r9
     132:	8f 90       	pop	r8
     134:	08 95       	ret

00000136 <ir_decodeHash>:
/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
static long ir_decodeHash(decode_results *results)
{
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
  long hash = FNV_BASIS_32;
  int i = 0;
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
     14a:	fc 01       	movw	r30, r24
     14c:	a4 84       	ldd	r10, Z+12	; 0x0c
     14e:	b5 84       	ldd	r11, Z+13	; 0x0d
     150:	f6 e0       	ldi	r31, 0x06	; 6
     152:	af 16       	cp	r10, r31
     154:	b1 04       	cpc	r11, r1
     156:	0c f4       	brge	.+2      	; 0x15a <ir_decodeHash+0x24>
     158:	49 c0       	rjmp	.+146    	; 0x1ec <ir_decodeHash+0xb6>
     15a:	ec 01       	movw	r28, r24
     15c:	01 e0       	ldi	r16, 0x01	; 1
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	0f 2e       	mov	r0, r31
     162:	f5 ec       	ldi	r31, 0xC5	; 197
     164:	cf 2e       	mov	r12, r31
     166:	fd e9       	ldi	r31, 0x9D	; 157
     168:	df 2e       	mov	r13, r31
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	ef 2e       	mov	r14, r31
     16e:	f1 e8       	ldi	r31, 0x81	; 129
     170:	ff 2e       	mov	r15, r31
     172:	f0 2d       	mov	r31, r0
     174:	25 c0       	rjmp	.+74     	; 0x1c0 <ir_decodeHash+0x8a>
    return ERR;
  }

  for (i = 1; i+2 < results->rawlen; i++) {
    int value =  ir_compare(results->rawbuf[i], results->rawbuf[i+2]);
     176:	8a 85       	ldd	r24, Y+10	; 0x0a
     178:	9b 85       	ldd	r25, Y+11	; 0x0b
     17a:	f8 01       	movw	r30, r16
     17c:	32 96       	adiw	r30, 0x02	; 2
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 0f       	add	r30, r24
     184:	f9 1f       	adc	r31, r25
     186:	60 81       	ld	r22, Z
     188:	71 81       	ldd	r23, Z+1	; 0x01
     18a:	f8 01       	movw	r30, r16
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e8 0f       	add	r30, r24
     192:	f9 1f       	adc	r31, r25
     194:	80 81       	ld	r24, Z
     196:	91 81       	ldd	r25, Z+1	; 0x01
     198:	85 df       	rcall	.-246    	; 0xa4 <ir_compare>
     19a:	fc 01       	movw	r30, r24
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
     19c:	a7 01       	movw	r20, r14
     19e:	96 01       	movw	r18, r12
     1a0:	63 e9       	ldi	r22, 0x93	; 147
     1a2:	71 e0       	ldi	r23, 0x01	; 1
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 92 0c 	call	0x1924	; 0x1924 <__mulsi3>
     1ac:	6f 01       	movw	r12, r30
     1ae:	ff 0f       	add	r31, r31
     1b0:	ee 08       	sbc	r14, r14
     1b2:	ff 08       	sbc	r15, r15
     1b4:	c6 26       	eor	r12, r22
     1b6:	d7 26       	eor	r13, r23
     1b8:	e8 26       	eor	r14, r24
     1ba:	f9 26       	eor	r15, r25
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
  }

  for (i = 1; i+2 < results->rawlen; i++) {
     1bc:	0f 5f       	subi	r16, 0xFF	; 255
     1be:	1f 4f       	sbci	r17, 0xFF	; 255
     1c0:	c8 01       	movw	r24, r16
     1c2:	02 96       	adiw	r24, 0x02	; 2
     1c4:	8a 15       	cp	r24, r10
     1c6:	9b 05       	cpc	r25, r11
     1c8:	b4 f2       	brlt	.-84     	; 0x176 <ir_decodeHash+0x40>
    int value =  ir_compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
     1ca:	cc 82       	std	Y+4, r12	; 0x04
     1cc:	dd 82       	std	Y+5, r13	; 0x05
     1ce:	ee 82       	std	Y+6, r14	; 0x06
     1d0:	ff 82       	std	Y+7, r15	; 0x07
  results->bits = 32;
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	99 87       	std	Y+9, r25	; 0x09
     1d8:	88 87       	std	Y+8, r24	; 0x08
  results->decode_type = UNKNOWN;
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	9f ef       	ldi	r25, 0xFF	; 255
     1de:	99 83       	std	Y+1, r25	; 0x01
     1e0:	88 83       	st	Y, r24
  return DECODED;
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <ir_decodeHash+0xbc>
{
  long hash = FNV_BASIS_32;
  int i = 0;
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	cb 01       	movw	r24, r22
  }
  results->value = hash;
  results->bits = 32;
  results->decode_type = UNKNOWN;
  return DECODED;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	08 95       	ret

00000208 <MATCH>:
  }
}*/


static int MATCH(int measured, int desired)
{
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
    return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);
     216:	07 2e       	mov	r0, r23
     218:	00 0c       	add	r0, r0
     21a:	88 0b       	sbc	r24, r24
     21c:	99 0b       	sbc	r25, r25
     21e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatsisf>
     222:	6b 01       	movw	r12, r22
     224:	7c 01       	movw	r14, r24
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e4       	ldi	r20, 0x40	; 64
     22c:	5f e3       	ldi	r21, 0x3F	; 63
     22e:	0e 94 2f 0c 	call	0x185e	; 0x185e <__mulsf3>
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	48 e4       	ldi	r20, 0x48	; 72
     238:	52 e4       	ldi	r21, 0x42	; 66
     23a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__divsf3>
     23e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixsfsi>
     242:	c6 17       	cp	r28, r22
     244:	d7 07       	cpc	r29, r23
     246:	e4 f0       	brlt	.+56     	; 0x280 <MATCH+0x78>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 ea       	ldi	r20, 0xA0	; 160
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 2f 0c 	call	0x185e	; 0x185e <__mulsf3>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	48 e4       	ldi	r20, 0x48	; 72
     25e:	52 e4       	ldi	r21, 0x42	; 66
     260:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__divsf3>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e8       	ldi	r20, 0x80	; 128
     26a:	5f e3       	ldi	r21, 0x3F	; 63
     26c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__addsf3>
     270:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixsfsi>
     274:	6c 17       	cp	r22, r28
     276:	7d 07       	cpc	r23, r29
     278:	34 f4       	brge	.+12     	; 0x286 <MATCH+0x7e>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	05 c0       	rjmp	.+10     	; 0x28a <MATCH+0x82>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <MATCH+0x82>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <ir_getRClevel>:
// E.g. if the buffer has MARK for 2 time intervals and SPACE for 1,
// successive calls to getRClevel will return MARK, MARK, SPACE.
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
static int ir_getRClevel(decode_results *results, int *offset, int *used, int t1) {
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
  int width = 0;
  int val = 0;
  int correction = 0;
  int avail = 0;
  if (*offset >= results->rawlen) {
     2b0:	db 01       	movw	r26, r22
     2b2:	ed 91       	ld	r30, X+
     2b4:	fc 91       	ld	r31, X
     2b6:	ec 01       	movw	r28, r24
     2b8:	ac 85       	ldd	r26, Y+12	; 0x0c
     2ba:	bd 85       	ldd	r27, Y+13	; 0x0d
     2bc:	ea 17       	cp	r30, r26
     2be:	fb 07       	cpc	r31, r27
     2c0:	0c f0       	brlt	.+2      	; 0x2c4 <ir_getRClevel+0x2c>
     2c2:	5a c0       	rjmp	.+180    	; 0x378 <ir_getRClevel+0xe0>
    // After end of recorded buffer, assume SPACE.
    return SPACE;
  }
  width = results->rawbuf[*offset];
     2c4:	aa 85       	ldd	r26, Y+10	; 0x0a
     2c6:	bb 85       	ldd	r27, Y+11	; 0x0b
     2c8:	cf 01       	movw	r24, r30
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	a8 0f       	add	r26, r24
     2d0:	b9 1f       	adc	r27, r25
     2d2:	cd 90       	ld	r12, X+
     2d4:	dc 90       	ld	r13, X
  val = ((*offset) % 2) ? MARK : SPACE;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	df 01       	movw	r26, r30
     2da:	a1 70       	andi	r26, 0x01	; 1
     2dc:	bb 27       	eor	r27, r27
     2de:	e0 ff       	sbrs	r30, 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	e8 2e       	mov	r14, r24
     2e4:	f1 2c       	mov	r15, r1
  correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
     2e6:	ab 2b       	or	r26, r27
     2e8:	31 f0       	breq	.+12     	; 0x2f6 <ir_getRClevel+0x5e>
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f4 e6       	ldi	r31, 0x64	; 100
     2ee:	af 2e       	mov	r10, r31
     2f0:	b1 2c       	mov	r11, r1
     2f2:	f0 2d       	mov	r31, r0
     2f4:	06 c0       	rjmp	.+12     	; 0x302 <ir_getRClevel+0x6a>
     2f6:	0f 2e       	mov	r0, r31
     2f8:	fc e9       	ldi	r31, 0x9C	; 156
     2fa:	af 2e       	mov	r10, r31
     2fc:	bb 24       	eor	r11, r11
     2fe:	ba 94       	dec	r11
     300:	f0 2d       	mov	r31, r0
     302:	e9 01       	movw	r28, r18
     304:	8a 01       	movw	r16, r20
     306:	4b 01       	movw	r8, r22

  if (MATCH(width, t1 + correction)) {
     308:	b5 01       	movw	r22, r10
     30a:	62 0f       	add	r22, r18
     30c:	73 1f       	adc	r23, r19
     30e:	c6 01       	movw	r24, r12
     310:	7b df       	rcall	.-266    	; 0x208 <MATCH>
     312:	89 2b       	or	r24, r25
     314:	b9 f4       	brne	.+46     	; 0x344 <ir_getRClevel+0xac>
    avail = 1;
  } 
  else if (MATCH(width, 2*t1 + correction)) {
     316:	be 01       	movw	r22, r28
     318:	66 0f       	add	r22, r22
     31a:	77 1f       	adc	r23, r23
     31c:	6a 0d       	add	r22, r10
     31e:	7b 1d       	adc	r23, r11
     320:	c6 01       	movw	r24, r12
     322:	72 df       	rcall	.-284    	; 0x208 <MATCH>
     324:	89 2b       	or	r24, r25
     326:	89 f4       	brne	.+34     	; 0x34a <ir_getRClevel+0xb2>
    avail = 2;
  } 
  else if (MATCH(width, 3*t1 + correction)) {
     328:	be 01       	movw	r22, r28
     32a:	66 0f       	add	r22, r22
     32c:	77 1f       	adc	r23, r23
     32e:	6c 0f       	add	r22, r28
     330:	7d 1f       	adc	r23, r29
     332:	6a 0d       	add	r22, r10
     334:	7b 1d       	adc	r23, r11
     336:	c6 01       	movw	r24, r12
     338:	67 df       	rcall	.-306    	; 0x208 <MATCH>
     33a:	89 2b       	or	r24, r25
     33c:	01 f1       	breq	.+64     	; 0x37e <ir_getRClevel+0xe6>
    avail = 3;
     33e:	23 e0       	ldi	r18, 0x03	; 3
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	05 c0       	rjmp	.+10     	; 0x34e <ir_getRClevel+0xb6>
  width = results->rawbuf[*offset];
  val = ((*offset) % 2) ? MARK : SPACE;
  correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

  if (MATCH(width, t1 + correction)) {
    avail = 1;
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <ir_getRClevel+0xb6>
  } 
  else if (MATCH(width, 2*t1 + correction)) {
    avail = 2;
     34a:	22 e0       	ldi	r18, 0x02	; 2
     34c:	30 e0       	ldi	r19, 0x00	; 0
  } 
  else {
    return -1;
  }

  (*used)++;
     34e:	f8 01       	movw	r30, r16
     350:	80 81       	ld	r24, Z
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	80 83       	st	Z, r24
  if (*used >= avail) {
     35a:	82 17       	cp	r24, r18
     35c:	93 07       	cpc	r25, r19
     35e:	94 f0       	brlt	.+36     	; 0x384 <ir_getRClevel+0xec>
    *used = 0;
     360:	11 82       	std	Z+1, r1	; 0x01
     362:	10 82       	st	Z, r1
    (*offset)++;
     364:	d4 01       	movw	r26, r8
     366:	8d 91       	ld	r24, X+
     368:	9c 91       	ld	r25, X
     36a:	11 97       	sbiw	r26, 0x01	; 1
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	8d 93       	st	X+, r24
     370:	9c 93       	st	X, r25
  }
  return val;   
     372:	8e 2d       	mov	r24, r14
     374:	9f 2d       	mov	r25, r15
     376:	08 c0       	rjmp	.+16     	; 0x388 <ir_getRClevel+0xf0>
  int val = 0;
  int correction = 0;
  int avail = 0;
  if (*offset >= results->rawlen) {
    // After end of recorded buffer, assume SPACE.
    return SPACE;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	05 c0       	rjmp	.+10     	; 0x388 <ir_getRClevel+0xf0>
  } 
  else if (MATCH(width, 3*t1 + correction)) {
    avail = 3;
  } 
  else {
    return -1;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	9f ef       	ldi	r25, 0xFF	; 255
     382:	02 c0       	rjmp	.+4      	; 0x388 <ir_getRClevel+0xf0>
  (*used)++;
  if (*used >= avail) {
    *used = 0;
    (*offset)++;
  }
  return val;   
     384:	8e 2d       	mov	r24, r14
     386:	9f 2d       	mov	r25, r15
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	9f 90       	pop	r9
     39e:	8f 90       	pop	r8
     3a0:	08 95       	ret

000003a2 <ir_decodeRC5>:

static long ir_decodeRC5(decode_results *results) {
     3a2:	8f 92       	push	r8
     3a4:	9f 92       	push	r9
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <ir_decodeRC5+0x1a>
     3bc:	00 d0       	rcall	.+0      	; 0x3be <ir_decodeRC5+0x1c>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
  int offset = 1; // Skip gap space
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	3a 83       	std	Y+2, r19	; 0x02
     3c8:	29 83       	std	Y+1, r18	; 0x01
  long data = 0;
  int used = 0;
     3ca:	1c 82       	std	Y+4, r1	; 0x04
     3cc:	1b 82       	std	Y+3, r1	; 0x03
  int nbits = 0;
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
     3ce:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     3d2:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     3d6:	2d 30       	cpi	r18, 0x0D	; 13
     3d8:	31 05       	cpc	r19, r1
     3da:	08 f4       	brcc	.+2      	; 0x3de <ir_decodeRC5+0x3c>
     3dc:	74 c0       	rjmp	.+232    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     3de:	8c 01       	movw	r16, r24
    return ERR;
  }

  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     3e0:	29 e7       	ldi	r18, 0x79	; 121
     3e2:	33 e0       	ldi	r19, 0x03	; 3
     3e4:	ae 01       	movw	r20, r28
     3e6:	4d 5f       	subi	r20, 0xFD	; 253
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	53 df       	rcall	.-346    	; 0x298 <ir_getRClevel>
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <ir_decodeRC5+0x56>
     3f6:	6b c0       	rjmp	.+214    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
     3f8:	29 e7       	ldi	r18, 0x79	; 121
     3fa:	33 e0       	ldi	r19, 0x03	; 3
     3fc:	ae 01       	movw	r20, r28
     3fe:	4d 5f       	subi	r20, 0xFD	; 253
     400:	5f 4f       	sbci	r21, 0xFF	; 255
     402:	be 01       	movw	r22, r28
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	c8 01       	movw	r24, r16
     40a:	46 df       	rcall	.-372    	; 0x298 <ir_getRClevel>
     40c:	89 2b       	or	r24, r25
     40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	62 c0       	rjmp	.+196    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     412:	29 e7       	ldi	r18, 0x79	; 121
     414:	33 e0       	ldi	r19, 0x03	; 3
     416:	ae 01       	movw	r20, r28
     418:	4d 5f       	subi	r20, 0xFD	; 253
     41a:	5f 4f       	sbci	r21, 0xFF	; 255
     41c:	be 01       	movw	r22, r28
     41e:	6f 5f       	subi	r22, 0xFF	; 255
     420:	7f 4f       	sbci	r23, 0xFF	; 255
     422:	c8 01       	movw	r24, r16
     424:	39 df       	rcall	.-398    	; 0x298 <ir_getRClevel>
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	59 c0       	rjmp	.+178    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     42c:	c1 2c       	mov	r12, r1
     42e:	d1 2c       	mov	r13, r1
     430:	81 2c       	mov	r8, r1
     432:	91 2c       	mov	r9, r1
     434:	54 01       	movw	r10, r8
     436:	2e c0       	rjmp	.+92     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>

  for (nbits = 0; offset < irparams.rawlen; nbits++) {
    int levelA = ir_getRClevel(results, &offset, &used, RC5_T1);
     438:	29 e7       	ldi	r18, 0x79	; 121
     43a:	33 e0       	ldi	r19, 0x03	; 3
     43c:	ae 01       	movw	r20, r28
     43e:	4d 5f       	subi	r20, 0xFD	; 253
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	c8 01       	movw	r24, r16
     44a:	26 df       	rcall	.-436    	; 0x298 <ir_getRClevel>
     44c:	7c 01       	movw	r14, r24
    int levelB = ir_getRClevel(results, &offset, &used, RC5_T1);
     44e:	29 e7       	ldi	r18, 0x79	; 121
     450:	33 e0       	ldi	r19, 0x03	; 3
     452:	ae 01       	movw	r20, r28
     454:	4d 5f       	subi	r20, 0xFD	; 253
     456:	5f 4f       	sbci	r21, 0xFF	; 255
     458:	be 01       	movw	r22, r28
     45a:	6f 5f       	subi	r22, 0xFF	; 255
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	c8 01       	movw	r24, r16
     460:	1b df       	rcall	.-458    	; 0x298 <ir_getRClevel>
    if (levelA == SPACE && levelB == MARK) {
     462:	e1 14       	cp	r14, r1
     464:	f1 04       	cpc	r15, r1
     466:	51 f4       	brne	.+20     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	91 05       	cpc	r25, r1
     46c:	39 f4       	brne	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
      // 1 bit
      data = (data << 1) | 1;
     46e:	88 0c       	add	r8, r8
     470:	99 1c       	adc	r9, r9
     472:	aa 1c       	adc	r10, r10
     474:	bb 1c       	adc	r11, r11
     476:	68 94       	set
     478:	80 f8       	bld	r8, 0
     47a:	09 c0       	rjmp	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
    } 
    else if (levelA == MARK && levelB == SPACE) {
     47c:	ea 94       	dec	r14
     47e:	ef 28       	or	r14, r15
     480:	91 f5       	brne	.+100    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     482:	89 2b       	or	r24, r25
     484:	a1 f5       	brne	.+104    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
      // zero bit
      data <<= 1;
     486:	88 0c       	add	r8, r8
     488:	99 1c       	adc	r9, r9
     48a:	aa 1c       	adc	r10, r10
     48c:	bb 1c       	adc	r11, r11
  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;

  for (nbits = 0; offset < irparams.rawlen; nbits++) {
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	c8 1a       	sub	r12, r24
     492:	d8 0a       	sbc	r13, r24
     494:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     498:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	82 17       	cp	r24, r18
     4a2:	93 07       	cpc	r25, r19
     4a4:	48 f2       	brcs	.-110    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
      return ERR;
    } 
  }

  // Success
  results->bits = nbits;
     4a6:	f8 01       	movw	r30, r16
     4a8:	d1 86       	std	Z+9, r13	; 0x09
     4aa:	c0 86       	std	Z+8, r12	; 0x08
  results->value = data;
     4ac:	84 82       	std	Z+4, r8	; 0x04
     4ae:	95 82       	std	Z+5, r9	; 0x05
     4b0:	a6 82       	std	Z+6, r10	; 0x06
     4b2:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = RC5;
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
  return DECODED;
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
  int offset = 1; // Skip gap space
  long data = 0;
  int used = 0;
  int nbits = 0;
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	cb 01       	movw	r24, r22
     4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
  }

  // Get start bits
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	cb 01       	movw	r24, r22
     4d4:	0f c0       	rjmp	.+30     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	cb 01       	movw	r24, r22
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
  if (ir_getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	cb 01       	movw	r24, r22
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
    else if (levelA == MARK && levelB == SPACE) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR;
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	cb 01       	movw	r24, r22
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	cb 01       	movw	r24, r22
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	df 90       	pop	r13
     50a:	cf 90       	pop	r12
     50c:	bf 90       	pop	r11
     50e:	af 90       	pop	r10
     510:	9f 90       	pop	r9
     512:	8f 90       	pop	r8
     514:	08 95       	ret

00000516 <MATCH_MARK>:
    return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);
}

static int MATCH_MARK(int measured_ticks, int desired_us)
{
    return MATCH(measured_ticks, (desired_us + MARK_EXCESS));
     516:	6c 59       	subi	r22, 0x9C	; 156
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	76 ce       	rjmp	.-788    	; 0x208 <MATCH>
}
     51c:	08 95       	ret

0000051e <MATCH_SPACE>:

static int MATCH_SPACE(int measured_ticks, int desired_us)
{
    return MATCH(measured_ticks, (desired_us - MARK_EXCESS));
     51e:	64 56       	subi	r22, 0x64	; 100
     520:	71 09       	sbc	r23, r1
     522:	72 ce       	rjmp	.-796    	; 0x208 <MATCH>
}
     524:	08 95       	ret

00000526 <ir_decodeSigma>:
  return DECODED;
}


// SIGMA ASC 333
static long ir_decodeSigma(decode_results *results) {
     526:	6f 92       	push	r6
     528:	7f 92       	push	r7
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	3c 01       	movw	r6, r24
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_HDR_MARK)) {
     544:	fc 01       	movw	r30, r24
     546:	c2 84       	ldd	r12, Z+10	; 0x0a
     548:	d3 84       	ldd	r13, Z+11	; 0x0b
     54a:	f6 01       	movw	r30, r12
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	93 81       	ldd	r25, Z+3	; 0x03
     550:	68 ef       	ldi	r22, 0xF8	; 248
     552:	70 e2       	ldi	r23, 0x20	; 32
     554:	e0 df       	rcall	.-64     	; 0x516 <MATCH_MARK>
     556:	89 2b       	or	r24, r25
     558:	09 f4       	brne	.+2      	; 0x55c <ir_decodeSigma+0x36>
     55a:	8f c0       	rjmp	.+286    	; 0x67a <ir_decodeSigma+0x154>
    return ERR;
  }
  offset++;

  
  if (irparams.rawlen < 2 * SIGMA_BITS + 6) {
     55c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     560:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     564:	86 97       	sbiw	r24, 0x26	; 38
     566:	08 f4       	brcc	.+2      	; 0x56a <ir_decodeSigma+0x44>
     568:	8c c0       	rjmp	.+280    	; 0x682 <ir_decodeSigma+0x15c>
    return ERR;
  }
  
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_HDR_SPACE)) {
     56a:	f6 01       	movw	r30, r12
     56c:	84 81       	ldd	r24, Z+4	; 0x04
     56e:	95 81       	ldd	r25, Z+5	; 0x05
     570:	60 e9       	ldi	r22, 0x90	; 144
     572:	70 e1       	ldi	r23, 0x10	; 16
     574:	d4 df       	rcall	.-88     	; 0x51e <MATCH_SPACE>
     576:	89 2b       	or	r24, r25
     578:	09 f4       	brne	.+2      	; 0x57c <ir_decodeSigma+0x56>
     57a:	87 c0       	rjmp	.+270    	; 0x68a <ir_decodeSigma+0x164>
     57c:	03 e0       	ldi	r16, 0x03	; 3
     57e:	10 e0       	ldi	r17, 0x00	; 0
     580:	81 2c       	mov	r8, r1
     582:	91 2c       	mov	r9, r1
     584:	54 01       	movw	r10, r8
     586:	e1 2c       	mov	r14, r1
     588:	f1 2c       	mov	r15, r1
     58a:	54 c0       	rjmp	.+168    	; 0x634 <ir_decodeSigma+0x10e>
  }
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     58c:	f8 01       	movw	r30, r16
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	ec 0d       	add	r30, r12
     594:	fd 1d       	adc	r31, r13
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	68 e0       	ldi	r22, 0x08	; 8
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	bb df       	rcall	.-138    	; 0x516 <MATCH_MARK>
     5a0:	89 2b       	or	r24, r25
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <ir_decodeSigma+0x80>
     5a4:	76 c0       	rjmp	.+236    	; 0x692 <ir_decodeSigma+0x16c>
      return ERR;
    }
    offset++;
     5a6:	e8 01       	movw	r28, r16
     5a8:	21 96       	adiw	r28, 0x01	; 1
    if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ONE_SPACE)) {
     5aa:	cc 0f       	add	r28, r28
     5ac:	dd 1f       	adc	r29, r29
     5ae:	cc 0d       	add	r28, r12
     5b0:	dd 1d       	adc	r29, r13
     5b2:	88 81       	ld	r24, Y
     5b4:	99 81       	ldd	r25, Y+1	; 0x01
     5b6:	60 e4       	ldi	r22, 0x40	; 64
     5b8:	76 e0       	ldi	r23, 0x06	; 6
     5ba:	b1 df       	rcall	.-158    	; 0x51e <MATCH_SPACE>
     5bc:	89 2b       	or	r24, r25
     5be:	39 f0       	breq	.+14     	; 0x5ce <ir_decodeSigma+0xa8>
      data = (data << 1) | 1;
     5c0:	88 0c       	add	r8, r8
     5c2:	99 1c       	adc	r9, r9
     5c4:	aa 1c       	adc	r10, r10
     5c6:	bb 1c       	adc	r11, r11
     5c8:	68 94       	set
     5ca:	80 f8       	bld	r8, 0
     5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <ir_decodeSigma+0xc0>
    }
    else if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ZERO_SPACE)) {
     5ce:	88 81       	ld	r24, Y
     5d0:	99 81       	ldd	r25, Y+1	; 0x01
     5d2:	68 e0       	ldi	r22, 0x08	; 8
     5d4:	72 e0       	ldi	r23, 0x02	; 2
     5d6:	a3 df       	rcall	.-186    	; 0x51e <MATCH_SPACE>
     5d8:	89 2b       	or	r24, r25
     5da:	09 f4       	brne	.+2      	; 0x5de <ir_decodeSigma+0xb8>
     5dc:	5e c0       	rjmp	.+188    	; 0x69a <ir_decodeSigma+0x174>
      data <<= 1;
     5de:	88 0c       	add	r8, r8
     5e0:	99 1c       	adc	r9, r9
     5e2:	aa 1c       	adc	r10, r10
     5e4:	bb 1c       	adc	r11, r11
    }
    else {
      return ERR;
    }
    offset++;
     5e6:	c8 01       	movw	r24, r16
     5e8:	02 96       	adiw	r24, 0x02	; 2

    // between the two bytes is an extra space
    if (i == 7)
     5ea:	f7 e0       	ldi	r31, 0x07	; 7
     5ec:	ef 16       	cp	r14, r31
     5ee:	f1 04       	cpc	r15, r1
     5f0:	e9 f4       	brne	.+58     	; 0x62c <ir_decodeSigma+0x106>
    {
        // next space
        if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	f6 01       	movw	r30, r12
     5f8:	e8 0f       	add	r30, r24
     5fa:	f9 1f       	adc	r31, r25
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	68 e0       	ldi	r22, 0x08	; 8
     602:	72 e0       	ldi	r23, 0x02	; 2
     604:	88 df       	rcall	.-240    	; 0x516 <MATCH_MARK>
     606:	89 2b       	or	r24, r25
     608:	09 f4       	brne	.+2      	; 0x60c <ir_decodeSigma+0xe6>
     60a:	4b c0       	rjmp	.+150    	; 0x6a2 <ir_decodeSigma+0x17c>
            return ERR;
        }
        offset++;
     60c:	f8 01       	movw	r30, r16
     60e:	33 96       	adiw	r30, 0x03	; 3
        if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_NEXT_SPACE)) {
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ec 0d       	add	r30, r12
     616:	fd 1d       	adc	r31, r13
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	60 e9       	ldi	r22, 0x90	; 144
     61e:	70 e1       	ldi	r23, 0x10	; 16
     620:	7e df       	rcall	.-260    	; 0x51e <MATCH_SPACE>
     622:	89 2b       	or	r24, r25
     624:	09 f4       	brne	.+2      	; 0x628 <ir_decodeSigma+0x102>
     626:	41 c0       	rjmp	.+130    	; 0x6aa <ir_decodeSigma+0x184>
            return ERR;
        }
        offset++;
     628:	c8 01       	movw	r24, r16
     62a:	04 96       	adiw	r24, 0x04	; 4
    return ERR;
  }
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	e2 1a       	sub	r14, r18
     630:	f2 0a       	sbc	r15, r18
     632:	8c 01       	movw	r16, r24
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	e8 16       	cp	r14, r24
     638:	f1 04       	cpc	r15, r1
     63a:	0c f4       	brge	.+2      	; 0x63e <ir_decodeSigma+0x118>
     63c:	a7 cf       	rjmp	.-178    	; 0x58c <ir_decodeSigma+0x66>
        offset++;
    }
  }

  //final mark bit
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
     63e:	00 0f       	add	r16, r16
     640:	11 1f       	adc	r17, r17
     642:	f6 01       	movw	r30, r12
     644:	e0 0f       	add	r30, r16
     646:	f1 1f       	adc	r31, r17
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	68 e0       	ldi	r22, 0x08	; 8
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	62 df       	rcall	.-316    	; 0x516 <MATCH_MARK>
     652:	89 2b       	or	r24, r25
     654:	71 f1       	breq	.+92     	; 0x6b2 <ir_decodeSigma+0x18c>
    return ERR;
  }

  // Success
  results->bits = 2 * SIGMA_BITS;
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	f3 01       	movw	r30, r6
     65c:	91 87       	std	Z+9, r25	; 0x09
     65e:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
     660:	84 82       	std	Z+4, r8	; 0x04
     662:	95 82       	std	Z+5, r9	; 0x05
     664:	a6 82       	std	Z+6, r10	; 0x06
     666:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SIGMA;
     668:	8b e0       	ldi	r24, 0x0B	; 11
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
  return DECODED;
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	1f c0       	rjmp	.+62     	; 0x6b8 <ir_decodeSigma+0x192>
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_HDR_MARK)) {
    return ERR;
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	cb 01       	movw	r24, r22
     680:	1b c0       	rjmp	.+54     	; 0x6b8 <ir_decodeSigma+0x192>
  }
  offset++;

  
  if (irparams.rawlen < 2 * SIGMA_BITS + 6) {
    return ERR;
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	17 c0       	rjmp	.+46     	; 0x6b8 <ir_decodeSigma+0x192>
  }
  
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_HDR_SPACE)) {
    return ERR;
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	cb 01       	movw	r24, r22
     690:	13 c0       	rjmp	.+38     	; 0x6b8 <ir_decodeSigma+0x192>
  offset++;

  //first byte
  for (i = 0; i < SIGMA_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
      return ERR;
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	cb 01       	movw	r24, r22
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <ir_decodeSigma+0x192>
    }
    else if (MATCH_SPACE(results->rawbuf[offset], SIGMA_ZERO_SPACE)) {
      data <<= 1;
    }
    else {
      return ERR;
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	cb 01       	movw	r24, r22
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <ir_decodeSigma+0x192>
    // between the two bytes is an extra space
    if (i == 7)
    {
        // next space
        if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
            return ERR;
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	cb 01       	movw	r24, r22
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <ir_decodeSigma+0x192>
        }
        offset++;
        if (!MATCH_SPACE(results->rawbuf[offset], SIGMA_NEXT_SPACE)) {
            return ERR;
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	cb 01       	movw	r24, r22
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <ir_decodeSigma+0x192>
    }
  }

  //final mark bit
  if (!MATCH_MARK(results->rawbuf[offset], SIGMA_BIT_MARK)) {
    return ERR;
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	cb 01       	movw	r24, r22
  // Success
  results->bits = 2 * SIGMA_BITS;
  results->value = data;
  results->decode_type = SIGMA;
  return DECODED;
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	af 90       	pop	r10
     6cc:	9f 90       	pop	r9
     6ce:	8f 90       	pop	r8
     6d0:	7f 90       	pop	r7
     6d2:	6f 90       	pop	r6
     6d4:	08 95       	ret

000006d6 <ir_decodeNEC>:
  ir_resume();
  return ERR;
}

// NECs have a repeat only 4 items long
static long ir_decodeNEC(decode_results *results) {
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	3c 01       	movw	r6, r24
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
     6f4:	fc 01       	movw	r30, r24
     6f6:	c2 84       	ldd	r12, Z+10	; 0x0a
     6f8:	d3 84       	ldd	r13, Z+11	; 0x0b
     6fa:	f6 01       	movw	r30, r12
     6fc:	82 81       	ldd	r24, Z+2	; 0x02
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	68 e2       	ldi	r22, 0x28	; 40
     702:	73 e2       	ldi	r23, 0x23	; 35
     704:	08 df       	rcall	.-496    	; 0x516 <MATCH_MARK>
     706:	89 2b       	or	r24, r25
     708:	09 f4       	brne	.+2      	; 0x70c <ir_decodeNEC+0x36>
     70a:	89 c0       	rjmp	.+274    	; 0x81e <ir_decodeNEC+0x148>
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
     70c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     710:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     714:	04 97       	sbiw	r24, 0x04	; 4
     716:	19 f5       	brne	.+70     	; 0x75e <ir_decodeNEC+0x88>
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
     718:	f6 01       	movw	r30, r12
     71a:	84 81       	ldd	r24, Z+4	; 0x04
     71c:	95 81       	ldd	r25, Z+5	; 0x05
     71e:	6a ec       	ldi	r22, 0xCA	; 202
     720:	78 e0       	ldi	r23, 0x08	; 8
     722:	fd de       	rcall	.-518    	; 0x51e <MATCH_SPACE>
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
     724:	89 2b       	or	r24, r25
     726:	d9 f0       	breq	.+54     	; 0x75e <ir_decodeNEC+0x88>
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
     728:	f6 01       	movw	r30, r12
     72a:	86 81       	ldd	r24, Z+6	; 0x06
     72c:	97 81       	ldd	r25, Z+7	; 0x07
     72e:	60 e3       	ldi	r22, 0x30	; 48
     730:	72 e0       	ldi	r23, 0x02	; 2
     732:	f1 de       	rcall	.-542    	; 0x516 <MATCH_MARK>
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
     734:	89 2b       	or	r24, r25
     736:	99 f0       	breq	.+38     	; 0x75e <ir_decodeNEC+0x88>
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
    results->bits = 0;
     738:	f3 01       	movw	r30, r6
     73a:	11 86       	std	Z+9, r1	; 0x09
     73c:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	9f ef       	ldi	r25, 0xFF	; 255
     742:	dc 01       	movw	r26, r24
     744:	84 83       	std	Z+4, r24	; 0x04
     746:	95 83       	std	Z+5, r25	; 0x05
     748:	a6 83       	std	Z+6, r26	; 0x06
     74a:	b7 83       	std	Z+7, r27	; 0x07
    results->decode_type = NEC;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	80 83       	st	Z, r24
    return DECODED;
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	73 c0       	rjmp	.+230    	; 0x844 <ir_decodeNEC+0x16e>
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
     75e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     762:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     766:	84 34       	cpi	r24, 0x44	; 68
     768:	91 05       	cpc	r25, r1
     76a:	08 f4       	brcc	.+2      	; 0x76e <ir_decodeNEC+0x98>
     76c:	5c c0       	rjmp	.+184    	; 0x826 <ir_decodeNEC+0x150>
    return ERR;
  }
  // Initial space  
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
     76e:	f6 01       	movw	r30, r12
     770:	84 81       	ldd	r24, Z+4	; 0x04
     772:	95 81       	ldd	r25, Z+5	; 0x05
     774:	64 e9       	ldi	r22, 0x94	; 148
     776:	71 e1       	ldi	r23, 0x11	; 17
     778:	d2 de       	rcall	.-604    	; 0x51e <MATCH_SPACE>
     77a:	89 2b       	or	r24, r25
     77c:	09 f4       	brne	.+2      	; 0x780 <ir_decodeNEC+0xaa>
     77e:	57 c0       	rjmp	.+174    	; 0x82e <ir_decodeNEC+0x158>
     780:	03 e0       	ldi	r16, 0x03	; 3
     782:	10 e0       	ldi	r17, 0x00	; 0
     784:	81 2c       	mov	r8, r1
     786:	91 2c       	mov	r9, r1
     788:	54 01       	movw	r10, r8
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
     78e:	31 c0       	rjmp	.+98     	; 0x7f2 <ir_decodeNEC+0x11c>
    return ERR;
  }
  offset++;
  for (i = 0; i < NEC_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
     790:	f8 01       	movw	r30, r16
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ec 0d       	add	r30, r12
     798:	fd 1d       	adc	r31, r13
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	60 e3       	ldi	r22, 0x30	; 48
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	b9 de       	rcall	.-654    	; 0x516 <MATCH_MARK>
     7a4:	89 2b       	or	r24, r25
     7a6:	09 f4       	brne	.+2      	; 0x7aa <ir_decodeNEC+0xd4>
     7a8:	46 c0       	rjmp	.+140    	; 0x836 <ir_decodeNEC+0x160>
      return ERR;
    }
    offset++;
     7aa:	e8 01       	movw	r28, r16
     7ac:	21 96       	adiw	r28, 0x01	; 1
    if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
     7ae:	cc 0f       	add	r28, r28
     7b0:	dd 1f       	adc	r29, r29
     7b2:	cc 0d       	add	r28, r12
     7b4:	dd 1d       	adc	r29, r13
     7b6:	88 81       	ld	r24, Y
     7b8:	99 81       	ldd	r25, Y+1	; 0x01
     7ba:	60 e4       	ldi	r22, 0x40	; 64
     7bc:	76 e0       	ldi	r23, 0x06	; 6
     7be:	af de       	rcall	.-674    	; 0x51e <MATCH_SPACE>
     7c0:	89 2b       	or	r24, r25
     7c2:	39 f0       	breq	.+14     	; 0x7d2 <ir_decodeNEC+0xfc>
      data = (data << 1) | 1;
     7c4:	88 0c       	add	r8, r8
     7c6:	99 1c       	adc	r9, r9
     7c8:	aa 1c       	adc	r10, r10
     7ca:	bb 1c       	adc	r11, r11
     7cc:	68 94       	set
     7ce:	80 f8       	bld	r8, 0
    } 
    else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <ir_decodeNEC+0x112>
     7d2:	88 81       	ld	r24, Y
     7d4:	99 81       	ldd	r25, Y+1	; 0x01
     7d6:	60 e3       	ldi	r22, 0x30	; 48
     7d8:	72 e0       	ldi	r23, 0x02	; 2
     7da:	a1 de       	rcall	.-702    	; 0x51e <MATCH_SPACE>
     7dc:	89 2b       	or	r24, r25
     7de:	79 f1       	breq	.+94     	; 0x83e <ir_decodeNEC+0x168>
      data <<= 1;
     7e0:	88 0c       	add	r8, r8
     7e2:	99 1c       	adc	r9, r9
     7e4:	aa 1c       	adc	r10, r10
     7e6:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
     7e8:	0e 5f       	subi	r16, 0xFE	; 254
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
  // Initial space  
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  for (i = 0; i < NEC_BITS; i++) {
     7ec:	ff ef       	ldi	r31, 0xFF	; 255
     7ee:	ef 1a       	sub	r14, r31
     7f0:	ff 0a       	sbc	r15, r31
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	e8 16       	cp	r14, r24
     7f6:	f1 04       	cpc	r15, r1
     7f8:	5c f2       	brlt	.-106    	; 0x790 <ir_decodeNEC+0xba>
      return ERR;
    }
    offset++;
  }
  // Success
  results->bits = NEC_BITS;
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	f3 01       	movw	r30, r6
     800:	91 87       	std	Z+9, r25	; 0x09
     802:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
     804:	84 82       	std	Z+4, r8	; 0x04
     806:	95 82       	std	Z+5, r9	; 0x05
     808:	a6 82       	std	Z+6, r10	; 0x06
     80a:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = NEC;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	80 83       	st	Z, r24
  return DECODED;
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	13 c0       	rjmp	.+38     	; 0x844 <ir_decodeNEC+0x16e>
  int i = 0;
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    return ERR;
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	cb 01       	movw	r24, r22
     824:	0f c0       	rjmp	.+30     	; 0x844 <ir_decodeNEC+0x16e>
    results->value = REPEAT;
    results->decode_type = NEC;
    return DECODED;
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
    return ERR;
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	cb 01       	movw	r24, r22
     82c:	0b c0       	rjmp	.+22     	; 0x844 <ir_decodeNEC+0x16e>
  }
  // Initial space  
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    return ERR;
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	cb 01       	movw	r24, r22
     834:	07 c0       	rjmp	.+14     	; 0x844 <ir_decodeNEC+0x16e>
  }
  offset++;
  for (i = 0; i < NEC_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
      return ERR;
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cb 01       	movw	r24, r22
     83c:	03 c0       	rjmp	.+6      	; 0x844 <ir_decodeNEC+0x16e>
    } 
    else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
      data <<= 1;
    } 
    else {
      return ERR;
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	cb 01       	movw	r24, r22
  // Success
  results->bits = NEC_BITS;
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	7f 90       	pop	r7
     85e:	6f 90       	pop	r6
     860:	08 95       	ret

00000862 <ir_decodeSony>:
  results->decode_type = SIGMA;
  return DECODED;
}


static long ir_decodeSony(decode_results *results) {
     862:	8f 92       	push	r8
     864:	9f 92       	push	r9
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Dont skip first space, check its size
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
     87a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     87e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     882:	2a 31       	cpi	r18, 0x1A	; 26
     884:	31 05       	cpc	r19, r1
     886:	08 f4       	brcc	.+2      	; 0x88a <ir_decodeSony+0x28>
     888:	81 c0       	rjmp	.+258    	; 0x98c <__stack+0x8d>
  }
  

  // Some Sony's deliver repeats fast after first
  // unfortunately can't spot difference from of repeat from two fast clicks
  if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
     88a:	fc 01       	movw	r30, r24
     88c:	e2 84       	ldd	r14, Z+10	; 0x0a
     88e:	f3 84       	ldd	r15, Z+11	; 0x0b
     890:	f7 01       	movw	r30, r14
     892:	20 81       	ld	r18, Z
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	24 3f       	cpi	r18, 0xF4	; 244
     898:	31 40       	sbci	r19, 0x01	; 1
     89a:	98 f4       	brcc	.+38     	; 0x8c2 <ir_decodeSony+0x60>
    results->bits = 0;
     89c:	fc 01       	movw	r30, r24
     89e:	11 86       	std	Z+9, r1	; 0x09
     8a0:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     8a2:	4f ef       	ldi	r20, 0xFF	; 255
     8a4:	5f ef       	ldi	r21, 0xFF	; 255
     8a6:	ba 01       	movw	r22, r20
     8a8:	44 83       	std	Z+4, r20	; 0x04
     8aa:	55 83       	std	Z+5, r21	; 0x05
     8ac:	66 83       	std	Z+6, r22	; 0x06
     8ae:	77 83       	std	Z+7, r23	; 0x07
    results->decode_type = SANYO;
     8b0:	29 e0       	ldi	r18, 0x09	; 9
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	31 83       	std	Z+1, r19	; 0x01
     8b6:	20 83       	st	Z, r18
    return DECODED;
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	70 c0       	rjmp	.+224    	; 0x9a2 <__stack+0xa3>
     8c2:	6c 01       	movw	r12, r24
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
     8c4:	f7 01       	movw	r30, r14
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	93 81       	ldd	r25, Z+3	; 0x03
     8ca:	60 e6       	ldi	r22, 0x60	; 96
     8cc:	79 e0       	ldi	r23, 0x09	; 9
     8ce:	23 de       	rcall	.-954    	; 0x516 <MATCH_MARK>
     8d0:	89 2b       	or	r24, r25
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <ir_decodeSony+0x74>
     8d4:	5f c0       	rjmp	.+190    	; 0x994 <__stack+0x95>
     8d6:	02 e0       	ldi	r16, 0x02	; 2
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	81 2c       	mov	r8, r1
     8dc:	91 2c       	mov	r9, r1
     8de:	54 01       	movw	r10, r8
     8e0:	2b c0       	rjmp	.+86     	; 0x938 <__stack+0x39>
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
     8e2:	f8 01       	movw	r30, r16
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ee 0d       	add	r30, r14
     8ea:	ff 1d       	adc	r31, r15
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	68 e5       	ldi	r22, 0x58	; 88
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	14 de       	rcall	.-984    	; 0x51e <MATCH_SPACE>
     8f6:	89 2b       	or	r24, r25
     8f8:	41 f1       	breq	.+80     	; 0x94a <__stack+0x4b>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
     8fa:	cc 0f       	add	r28, r28
     8fc:	dd 1f       	adc	r29, r29
     8fe:	ce 0d       	add	r28, r14
     900:	df 1d       	adc	r29, r15
     902:	88 81       	ld	r24, Y
     904:	99 81       	ldd	r25, Y+1	; 0x01
     906:	60 eb       	ldi	r22, 0xB0	; 176
     908:	74 e0       	ldi	r23, 0x04	; 4
     90a:	05 de       	rcall	.-1014   	; 0x516 <MATCH_MARK>
     90c:	89 2b       	or	r24, r25
     90e:	39 f0       	breq	.+14     	; 0x91e <__stack+0x1f>
      data = (data << 1) | 1;
     910:	88 0c       	add	r8, r8
     912:	99 1c       	adc	r9, r9
     914:	aa 1c       	adc	r10, r10
     916:	bb 1c       	adc	r11, r11
     918:	68 94       	set
     91a:	80 f8       	bld	r8, 0
     91c:	0b c0       	rjmp	.+22     	; 0x934 <__stack+0x35>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
     91e:	88 81       	ld	r24, Y
     920:	99 81       	ldd	r25, Y+1	; 0x01
     922:	68 e5       	ldi	r22, 0x58	; 88
     924:	72 e0       	ldi	r23, 0x02	; 2
     926:	f7 dd       	rcall	.-1042   	; 0x516 <MATCH_MARK>
     928:	89 2b       	or	r24, r25
     92a:	c1 f1       	breq	.+112    	; 0x99c <__stack+0x9d>
      data <<= 1;
     92c:	88 0c       	add	r8, r8
     92e:	99 1c       	adc	r9, r9
     930:	aa 1c       	adc	r10, r10
     932:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
     934:	0e 5f       	subi	r16, 0xFE	; 254
     936:	1f 4f       	sbci	r17, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     938:	e8 01       	movw	r28, r16
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     940:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     944:	c8 17       	cp	r28, r24
     946:	d9 07       	cpc	r29, r25
     948:	60 f2       	brcs	.-104    	; 0x8e2 <ir_decodeSony+0x80>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     94a:	01 50       	subi	r16, 0x01	; 1
     94c:	11 09       	sbc	r17, r1
     94e:	c8 01       	movw	r24, r16
     950:	99 23       	and	r25, r25
     952:	0c f4       	brge	.+2      	; 0x956 <__stack+0x57>
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	95 95       	asr	r25
     958:	87 95       	ror	r24
     95a:	f6 01       	movw	r30, r12
     95c:	91 87       	std	Z+9, r25	; 0x09
     95e:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     960:	0c 97       	sbiw	r24, 0x0c	; 12
     962:	34 f4       	brge	.+12     	; 0x970 <__stack+0x71>
    results->bits = 0;
     964:	11 86       	std	Z+9, r1	; 0x09
     966:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	cb 01       	movw	r24, r22
     96e:	19 c0       	rjmp	.+50     	; 0x9a2 <__stack+0xa3>
  }
  results->value = data;
     970:	f6 01       	movw	r30, r12
     972:	84 82       	std	Z+4, r8	; 0x04
     974:	95 82       	std	Z+5, r9	; 0x05
     976:	a6 82       	std	Z+6, r10	; 0x06
     978:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SONY;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
  return DECODED;
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <__stack+0xa3>

static long ir_decodeSony(decode_results *results) {
  long data = 0;
  int offset = 0; // Dont skip first space, check its size
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
    return ERR;
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	cb 01       	movw	r24, r22
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <__stack+0xa3>
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	cb 01       	movw	r24, r22
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__stack+0xa3>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = SONY;
  return DECODED;
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	08 95       	ret

000009bc <ir_decodeSanyo>:

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeSanyo(decode_results *results) {
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
     9d4:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     9d8:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     9dc:	2a 31       	cpi	r18, 0x1A	; 26
     9de:	31 05       	cpc	r19, r1
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <ir_decodeSanyo+0x28>
     9e2:	8a c0       	rjmp	.+276    	; 0xaf8 <ir_decodeSanyo+0x13c>
    return ERR;
  }
 
  // Initial space  
  if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
     9e4:	fc 01       	movw	r30, r24
     9e6:	e2 84       	ldd	r14, Z+10	; 0x0a
     9e8:	f3 84       	ldd	r15, Z+11	; 0x0b
     9ea:	f7 01       	movw	r30, r14
     9ec:	20 81       	ld	r18, Z
     9ee:	31 81       	ldd	r19, Z+1	; 0x01
     9f0:	20 32       	cpi	r18, 0x20	; 32
     9f2:	33 40       	sbci	r19, 0x03	; 3
     9f4:	98 f4       	brcc	.+38     	; 0xa1c <ir_decodeSanyo+0x60>
    results->bits = 0;
     9f6:	fc 01       	movw	r30, r24
     9f8:	11 86       	std	Z+9, r1	; 0x09
     9fa:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     9fc:	4f ef       	ldi	r20, 0xFF	; 255
     9fe:	5f ef       	ldi	r21, 0xFF	; 255
     a00:	ba 01       	movw	r22, r20
     a02:	44 83       	std	Z+4, r20	; 0x04
     a04:	55 83       	std	Z+5, r21	; 0x05
     a06:	66 83       	std	Z+6, r22	; 0x06
     a08:	77 83       	std	Z+7, r23	; 0x07
    results->decode_type = SANYO;
     a0a:	29 e0       	ldi	r18, 0x09	; 9
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	31 83       	std	Z+1, r19	; 0x01
     a10:	20 83       	st	Z, r18
    return DECODED;
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	7d c0       	rjmp	.+250    	; 0xb16 <ir_decodeSanyo+0x15a>
     a1c:	6c 01       	movw	r12, r24
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     a1e:	f7 01       	movw	r30, r14
     a20:	82 81       	ldd	r24, Z+2	; 0x02
     a22:	93 81       	ldd	r25, Z+3	; 0x03
     a24:	6c ea       	ldi	r22, 0xAC	; 172
     a26:	7d e0       	ldi	r23, 0x0D	; 13
     a28:	76 dd       	rcall	.-1300   	; 0x516 <MATCH_MARK>
     a2a:	89 2b       	or	r24, r25
     a2c:	09 f4       	brne	.+2      	; 0xa30 <ir_decodeSanyo+0x74>
     a2e:	68 c0       	rjmp	.+208    	; 0xb00 <ir_decodeSanyo+0x144>
    return ERR;
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     a30:	f7 01       	movw	r30, r14
     a32:	84 81       	ldd	r24, Z+4	; 0x04
     a34:	95 81       	ldd	r25, Z+5	; 0x05
     a36:	6c ea       	ldi	r22, 0xAC	; 172
     a38:	7d e0       	ldi	r23, 0x0D	; 13
     a3a:	6d dd       	rcall	.-1318   	; 0x516 <MATCH_MARK>
     a3c:	89 2b       	or	r24, r25
     a3e:	09 f4       	brne	.+2      	; 0xa42 <ir_decodeSanyo+0x86>
     a40:	63 c0       	rjmp	.+198    	; 0xb08 <ir_decodeSanyo+0x14c>
     a42:	03 e0       	ldi	r16, 0x03	; 3
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	81 2c       	mov	r8, r1
     a48:	91 2c       	mov	r9, r1
     a4a:	54 01       	movw	r10, r8
     a4c:	2b c0       	rjmp	.+86     	; 0xaa4 <ir_decodeSanyo+0xe8>
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
     a4e:	f8 01       	movw	r30, r16
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ee 0d       	add	r30, r14
     a56:	ff 1d       	adc	r31, r15
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	66 eb       	ldi	r22, 0xB6	; 182
     a5e:	73 e0       	ldi	r23, 0x03	; 3
     a60:	5e dd       	rcall	.-1348   	; 0x51e <MATCH_SPACE>
     a62:	89 2b       	or	r24, r25
     a64:	41 f1       	breq	.+80     	; 0xab6 <ir_decodeSanyo+0xfa>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
     a66:	cc 0f       	add	r28, r28
     a68:	dd 1f       	adc	r29, r29
     a6a:	ce 0d       	add	r28, r14
     a6c:	df 1d       	adc	r29, r15
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	60 e6       	ldi	r22, 0x60	; 96
     a74:	79 e0       	ldi	r23, 0x09	; 9
     a76:	4f dd       	rcall	.-1378   	; 0x516 <MATCH_MARK>
     a78:	89 2b       	or	r24, r25
     a7a:	39 f0       	breq	.+14     	; 0xa8a <ir_decodeSanyo+0xce>
      data = (data << 1) | 1;
     a7c:	88 0c       	add	r8, r8
     a7e:	99 1c       	adc	r9, r9
     a80:	aa 1c       	adc	r10, r10
     a82:	bb 1c       	adc	r11, r11
     a84:	68 94       	set
     a86:	80 f8       	bld	r8, 0
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <ir_decodeSanyo+0xe4>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
     a8a:	88 81       	ld	r24, Y
     a8c:	99 81       	ldd	r25, Y+1	; 0x01
     a8e:	6c eb       	ldi	r22, 0xBC	; 188
     a90:	72 e0       	ldi	r23, 0x02	; 2
     a92:	41 dd       	rcall	.-1406   	; 0x516 <MATCH_MARK>
     a94:	89 2b       	or	r24, r25
     a96:	e1 f1       	breq	.+120    	; 0xb10 <ir_decodeSanyo+0x154>
      data <<= 1;
     a98:	88 0c       	add	r8, r8
     a9a:	99 1c       	adc	r9, r9
     a9c:	aa 1c       	adc	r10, r10
     a9e:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
     aa0:	0e 5f       	subi	r16, 0xFE	; 254
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     aa4:	e8 01       	movw	r28, r16
     aa6:	21 96       	adiw	r28, 0x01	; 1
     aa8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     aac:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     ab0:	c8 17       	cp	r28, r24
     ab2:	d9 07       	cpc	r29, r25
     ab4:	60 f2       	brcs	.-104    	; 0xa4e <ir_decodeSanyo+0x92>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     ab6:	01 50       	subi	r16, 0x01	; 1
     ab8:	11 09       	sbc	r17, r1
     aba:	c8 01       	movw	r24, r16
     abc:	99 23       	and	r25, r25
     abe:	0c f4       	brge	.+2      	; 0xac2 <ir_decodeSanyo+0x106>
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	95 95       	asr	r25
     ac4:	87 95       	ror	r24
     ac6:	f6 01       	movw	r30, r12
     ac8:	91 87       	std	Z+9, r25	; 0x09
     aca:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     acc:	0c 97       	sbiw	r24, 0x0c	; 12
     ace:	34 f4       	brge	.+12     	; 0xadc <ir_decodeSanyo+0x120>
    results->bits = 0;
     ad0:	11 86       	std	Z+9, r1	; 0x09
     ad2:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	cb 01       	movw	r24, r22
     ada:	1d c0       	rjmp	.+58     	; 0xb16 <ir_decodeSanyo+0x15a>
  }
  results->value = data;
     adc:	f6 01       	movw	r30, r12
     ade:	84 82       	std	Z+4, r8	; 0x04
     ae0:	95 82       	std	Z+5, r9	; 0x05
     ae2:	a6 82       	std	Z+6, r10	; 0x06
     ae4:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = SANYO;
     ae6:	89 e0       	ldi	r24, 0x09	; 9
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
  return DECODED;
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0f c0       	rjmp	.+30     	; 0xb16 <ir_decodeSanyo+0x15a>
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeSanyo(decode_results *results) {
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
    return ERR;
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	cb 01       	movw	r24, r22
     afe:	0b c0       	rjmp	.+22     	; 0xb16 <ir_decodeSanyo+0x15a>
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	cb 01       	movw	r24, r22
     b06:	07 c0       	rjmp	.+14     	; 0xb16 <ir_decodeSanyo+0x15a>
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	cb 01       	movw	r24, r22
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <ir_decodeSanyo+0x15a>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = SANYO;
  return DECODED;
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <ir_decodeMitsubishi>:

// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeMitsubishi(decode_results *results) {
     b30:	6f 92       	push	r6
     b32:	7f 92       	push	r7
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
     b4c:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
     b50:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
     b54:	22 32       	cpi	r18, 0x22	; 34
     b56:	31 05       	cpc	r19, r1
     b58:	08 f4       	brcc	.+2      	; 0xb5c <ir_decodeMitsubishi+0x2c>
     b5a:	6e c0       	rjmp	.+220    	; 0xc38 <ir_decodeMitsubishi+0x108>
     b5c:	3c 01       	movw	r6, r24

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7 

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     b5e:	fc 01       	movw	r30, r24
     b60:	c2 84       	ldd	r12, Z+10	; 0x0a
     b62:	d3 84       	ldd	r13, Z+11	; 0x0b
     b64:	f6 01       	movw	r30, r12
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	6e e5       	ldi	r22, 0x5E	; 94
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	d3 dc       	rcall	.-1626   	; 0x516 <MATCH_MARK>
     b70:	89 2b       	or	r24, r25
     b72:	09 f4       	brne	.+2      	; 0xb76 <ir_decodeMitsubishi+0x46>
     b74:	65 c0       	rjmp	.+202    	; 0xc40 <ir_decodeMitsubishi+0x110>
     b76:	02 e0       	ldi	r16, 0x02	; 2
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	81 2c       	mov	r8, r1
     b7c:	91 2c       	mov	r9, r1
     b7e:	54 01       	movw	r10, r8
     b80:	2d c0       	rjmp	.+90     	; 0xbdc <ir_decodeMitsubishi+0xac>
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
    if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK)) {
     b82:	e8 01       	movw	r28, r16
     b84:	cc 0f       	add	r28, r28
     b86:	dd 1f       	adc	r29, r29
     b88:	cc 0d       	add	r28, r12
     b8a:	dd 1d       	adc	r29, r13
     b8c:	88 81       	ld	r24, Y
     b8e:	99 81       	ldd	r25, Y+1	; 0x01
     b90:	6e e9       	ldi	r22, 0x9E	; 158
     b92:	77 e0       	ldi	r23, 0x07	; 7
     b94:	c0 dc       	rcall	.-1664   	; 0x516 <MATCH_MARK>
     b96:	89 2b       	or	r24, r25
     b98:	39 f0       	breq	.+14     	; 0xba8 <ir_decodeMitsubishi+0x78>
      data = (data << 1) | 1;
     b9a:	88 0c       	add	r8, r8
     b9c:	99 1c       	adc	r9, r9
     b9e:	aa 1c       	adc	r10, r10
     ba0:	bb 1c       	adc	r11, r11
     ba2:	68 94       	set
     ba4:	80 f8       	bld	r8, 0
     ba6:	0c c0       	rjmp	.+24     	; 0xbc0 <ir_decodeMitsubishi+0x90>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
     ba8:	88 81       	ld	r24, Y
     baa:	99 81       	ldd	r25, Y+1	; 0x01
     bac:	6e ee       	ldi	r22, 0xEE	; 238
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	b2 dc       	rcall	.-1692   	; 0x516 <MATCH_MARK>
     bb2:	89 2b       	or	r24, r25
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <ir_decodeMitsubishi+0x88>
     bb6:	48 c0       	rjmp	.+144    	; 0xc48 <ir_decodeMitsubishi+0x118>
      data <<= 1;
     bb8:	88 0c       	add	r8, r8
     bba:	99 1c       	adc	r9, r9
     bbc:	aa 1c       	adc	r10, r10
     bbe:	bb 1c       	adc	r11, r11
    } 
    else {
      return ERR;
    }
    offset++;
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     bc0:	f7 01       	movw	r30, r14
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	ec 0d       	add	r30, r12
     bc8:	fd 1d       	adc	r31, r13
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	6e e5       	ldi	r22, 0x5E	; 94
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	a5 dc       	rcall	.-1718   	; 0x51e <MATCH_SPACE>
     bd4:	89 2b       	or	r24, r25
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <ir_decodeMitsubishi+0xc4>
      break;
    }
    offset++;
     bd8:	0e 5f       	subi	r16, 0xFE	; 254
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
     bdc:	78 01       	movw	r14, r16
     bde:	ff ef       	ldi	r31, 0xFF	; 255
     be0:	ef 1a       	sub	r14, r31
     be2:	ff 0a       	sbc	r15, r31
     be4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
     be8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
     bec:	e8 16       	cp	r14, r24
     bee:	f9 06       	cpc	r15, r25
     bf0:	40 f2       	brcs	.-112    	; 0xb82 <ir_decodeMitsubishi+0x52>
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <ir_decodeMitsubishi+0xc6>
      data <<= 1;
    } 
    else {
      return ERR;
    }
    offset++;
     bf4:	87 01       	movw	r16, r14
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     bf6:	01 50       	subi	r16, 0x01	; 1
     bf8:	11 09       	sbc	r17, r1
     bfa:	c8 01       	movw	r24, r16
     bfc:	99 23       	and	r25, r25
     bfe:	0c f4       	brge	.+2      	; 0xc02 <ir_decodeMitsubishi+0xd2>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	f3 01       	movw	r30, r6
     c08:	91 87       	std	Z+9, r25	; 0x09
     c0a:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < MITSUBISHI_BITS) {
     c0c:	40 97       	sbiw	r24, 0x10	; 16
     c0e:	34 f4       	brge	.+12     	; 0xc1c <ir_decodeMitsubishi+0xec>
    results->bits = 0;
     c10:	11 86       	std	Z+9, r1	; 0x09
     c12:	10 86       	std	Z+8, r1	; 0x08
    return ERR;
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	cb 01       	movw	r24, r22
     c1a:	19 c0       	rjmp	.+50     	; 0xc4e <ir_decodeMitsubishi+0x11e>
  }
  results->value = data;
     c1c:	f3 01       	movw	r30, r6
     c1e:	84 82       	std	Z+4, r8	; 0x04
     c20:	95 82       	std	Z+5, r9	; 0x05
     c22:	a6 82       	std	Z+6, r10	; 0x06
     c24:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = MITSUBISHI;
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
  return DECODED;
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <ir_decodeMitsubishi+0x11e>
// Looks like Sony except for timings, 48 chars of data and time/space different
static long ir_decodeMitsubishi(decode_results *results) {
  long data = 0;
  int offset = 0; // Skip first space
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
    return ERR;
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	cb 01       	movw	r24, r22
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <ir_decodeMitsubishi+0x11e>
  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7 

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	cb 01       	movw	r24, r22
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <ir_decodeMitsubishi+0x11e>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	cb 01       	movw	r24, r22
    return ERR;
  }
  results->value = data;
  results->decode_type = MITSUBISHI;
  return DECODED;
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	08 95       	ret

00000c6c <ir_decodeRC6>:
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}

static long ir_decodeRC6(decode_results *results) {
     c6c:	4f 92       	push	r4
     c6e:	5f 92       	push	r5
     c70:	6f 92       	push	r6
     c72:	7f 92       	push	r7
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	00 d0       	rcall	.+0      	; 0xc8a <ir_decodeRC6+0x1e>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <ir_decodeRC6+0x20>
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
  int offset = 1; // Skip first space
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	3a 83       	std	Y+2, r19	; 0x02
     c96:	29 83       	std	Y+1, r18	; 0x01
  long data = 0;
  int used = 0;
     c98:	1c 82       	std	Y+4, r1	; 0x04
     c9a:	1b 82       	std	Y+3, r1	; 0x03
  int nbits = 0;
  
  if (results->rawlen < MIN_RC6_SAMPLES) {
     c9c:	fc 01       	movw	r30, r24
     c9e:	24 85       	ldd	r18, Z+12	; 0x0c
     ca0:	35 85       	ldd	r19, Z+13	; 0x0d
     ca2:	12 16       	cp	r1, r18
     ca4:	13 06       	cpc	r1, r19
     ca6:	0c f0       	brlt	.+2      	; 0xcaa <ir_decodeRC6+0x3e>
     ca8:	aa c0       	rjmp	.+340    	; 0xdfe <ir_decodeRC6+0x192>
     caa:	8c 01       	movw	r16, r24
    return ERR;
  }
  
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
     cac:	e2 84       	ldd	r14, Z+10	; 0x0a
     cae:	f3 84       	ldd	r15, Z+11	; 0x0b
     cb0:	f7 01       	movw	r30, r14
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	6a e6       	ldi	r22, 0x6A	; 106
     cb8:	7a e0       	ldi	r23, 0x0A	; 10
     cba:	2d dc       	rcall	.-1958   	; 0x516 <MATCH_MARK>
     cbc:	89 2b       	or	r24, r25
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <ir_decodeRC6+0x56>
     cc0:	a2 c0       	rjmp	.+324    	; 0xe06 <ir_decodeRC6+0x19a>
    return ERR;
  }
  offset++;
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
     cca:	f7 01       	movw	r30, r14
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
     cce:	95 81       	ldd	r25, Z+5	; 0x05
     cd0:	69 e7       	ldi	r22, 0x79	; 121
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	24 dc       	rcall	.-1976   	; 0x51e <MATCH_SPACE>
     cd6:	89 2b       	or	r24, r25
     cd8:	09 f4       	brne	.+2      	; 0xcdc <ir_decodeRC6+0x70>
     cda:	99 c0       	rjmp	.+306    	; 0xe0e <ir_decodeRC6+0x1a2>
    return ERR;
  }
  offset++;
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
     ce4:	2c eb       	ldi	r18, 0xBC	; 188
     ce6:	31 e0       	ldi	r19, 0x01	; 1
     ce8:	ae 01       	movw	r20, r28
     cea:	4d 5f       	subi	r20, 0xFD	; 253
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	c8 01       	movw	r24, r16
     cf6:	d0 da       	rcall	.-2656   	; 0x298 <ir_getRClevel>
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	09 f0       	breq	.+2      	; 0xcfe <ir_decodeRC6+0x92>
     cfc:	8c c0       	rjmp	.+280    	; 0xe16 <ir_decodeRC6+0x1aa>
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
     cfe:	2c eb       	ldi	r18, 0xBC	; 188
     d00:	31 e0       	ldi	r19, 0x01	; 1
     d02:	ae 01       	movw	r20, r28
     d04:	4d 5f       	subi	r20, 0xFD	; 253
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	be 01       	movw	r22, r28
     d0a:	6f 5f       	subi	r22, 0xFF	; 255
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	c8 01       	movw	r24, r16
     d10:	c3 da       	rcall	.-2682   	; 0x298 <ir_getRClevel>
     d12:	89 2b       	or	r24, r25
     d14:	09 f0       	breq	.+2      	; 0xd18 <ir_decodeRC6+0xac>
     d16:	83 c0       	rjmp	.+262    	; 0xe1e <ir_decodeRC6+0x1b2>
     d18:	e1 2c       	mov	r14, r1
     d1a:	f1 2c       	mov	r15, r1
     d1c:	41 2c       	mov	r4, r1
     d1e:	51 2c       	mov	r5, r1
     d20:	32 01       	movw	r6, r4
     d22:	55 c0       	rjmp	.+170    	; 0xdce <ir_decodeRC6+0x162>

  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = ir_getRClevel(results, &offset, &used, RC6_T1);
     d24:	2c eb       	ldi	r18, 0xBC	; 188
     d26:	31 e0       	ldi	r19, 0x01	; 1
     d28:	ae 01       	movw	r20, r28
     d2a:	4d 5f       	subi	r20, 0xFD	; 253
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	c8 01       	movw	r24, r16
     d36:	b0 da       	rcall	.-2720   	; 0x298 <ir_getRClevel>
     d38:	5c 01       	movw	r10, r24
    if (nbits == 3) {
     d3a:	f3 e0       	ldi	r31, 0x03	; 3
     d3c:	ef 16       	cp	r14, r31
     d3e:	f1 04       	cpc	r15, r1
     d40:	71 f4       	brne	.+28     	; 0xd5e <ir_decodeRC6+0xf2>
      // T bit is double wide; make sure second half matches
      if (levelA != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     d42:	2c eb       	ldi	r18, 0xBC	; 188
     d44:	31 e0       	ldi	r19, 0x01	; 1
     d46:	ae 01       	movw	r20, r28
     d48:	4d 5f       	subi	r20, 0xFD	; 253
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	be 01       	movw	r22, r28
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	c8 01       	movw	r24, r16
     d54:	a1 da       	rcall	.-2750   	; 0x298 <ir_getRClevel>
     d56:	a8 16       	cp	r10, r24
     d58:	b9 06       	cpc	r11, r25
     d5a:	09 f0       	breq	.+2      	; 0xd5e <ir_decodeRC6+0xf2>
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <ir_decodeRC6+0x1ba>
    } 
    levelB = ir_getRClevel(results, &offset, &used, RC6_T1);
     d5e:	2c eb       	ldi	r18, 0xBC	; 188
     d60:	31 e0       	ldi	r19, 0x01	; 1
     d62:	ae 01       	movw	r20, r28
     d64:	4d 5f       	subi	r20, 0xFD	; 253
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	c8 01       	movw	r24, r16
     d70:	93 da       	rcall	.-2778   	; 0x298 <ir_getRClevel>
     d72:	6c 01       	movw	r12, r24
    if (nbits == 3) {
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	e8 16       	cp	r14, r24
     d78:	f1 04       	cpc	r15, r1
     d7a:	71 f4       	brne	.+28     	; 0xd98 <ir_decodeRC6+0x12c>
      // T bit is double wide; make sure second half matches
      if (levelB != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     d7c:	2c eb       	ldi	r18, 0xBC	; 188
     d7e:	31 e0       	ldi	r19, 0x01	; 1
     d80:	ae 01       	movw	r20, r28
     d82:	4d 5f       	subi	r20, 0xFD	; 253
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	be 01       	movw	r22, r28
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	c8 01       	movw	r24, r16
     d8e:	84 da       	rcall	.-2808   	; 0x298 <ir_getRClevel>
     d90:	c8 16       	cp	r12, r24
     d92:	d9 06       	cpc	r13, r25
     d94:	09 f0       	breq	.+2      	; 0xd98 <ir_decodeRC6+0x12c>
     d96:	4b c0       	rjmp	.+150    	; 0xe2e <ir_decodeRC6+0x1c2>
    } 
    if (levelA == MARK && levelB == SPACE) { // reversed compared to RC5
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	ae 16       	cp	r10, r30
     d9c:	b1 04       	cpc	r11, r1
     d9e:	51 f4       	brne	.+20     	; 0xdb4 <ir_decodeRC6+0x148>
     da0:	c1 14       	cp	r12, r1
     da2:	d1 04       	cpc	r13, r1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <ir_decodeRC6+0x148>
      // 1 bit
      data = (data << 1) | 1;
     da6:	44 0c       	add	r4, r4
     da8:	55 1c       	adc	r5, r5
     daa:	66 1c       	adc	r6, r6
     dac:	77 1c       	adc	r7, r7
     dae:	68 94       	set
     db0:	40 f8       	bld	r4, 0
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <ir_decodeRC6+0x15c>
    } 
    else if (levelA == SPACE && levelB == MARK) {
     db4:	ab 28       	or	r10, r11
     db6:	f9 f5       	brne	.+126    	; 0xe36 <ir_decodeRC6+0x1ca>
     db8:	ca 94       	dec	r12
     dba:	cd 28       	or	r12, r13
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <ir_decodeRC6+0x154>
     dbe:	3f c0       	rjmp	.+126    	; 0xe3e <ir_decodeRC6+0x1d2>
      // zero bit
      data <<= 1;
     dc0:	44 0c       	add	r4, r4
     dc2:	55 1c       	adc	r5, r5
     dc4:	66 1c       	adc	r6, r6
     dc6:	77 1c       	adc	r7, r7

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;

  for (nbits = 0; offset < results->rawlen; nbits++) {
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	e8 1a       	sub	r14, r24
     dcc:	f8 0a       	sbc	r15, r24
     dce:	f8 01       	movw	r30, r16
     dd0:	24 85       	ldd	r18, Z+12	; 0x0c
     dd2:	35 85       	ldd	r19, Z+13	; 0x0d
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	82 17       	cp	r24, r18
     dda:	93 07       	cpc	r25, r19
     ddc:	0c f4       	brge	.+2      	; 0xde0 <ir_decodeRC6+0x174>
     dde:	a2 cf       	rjmp	.-188    	; 0xd24 <ir_decodeRC6+0xb8>
    else {
      return ERR; // Error
    } 
  }
  // Success
  results->bits = nbits;
     de0:	f1 86       	std	Z+9, r15	; 0x09
     de2:	e0 86       	std	Z+8, r14	; 0x08
  results->value = data;
     de4:	44 82       	std	Z+4, r4	; 0x04
     de6:	55 82       	std	Z+5, r5	; 0x05
     de8:	66 82       	std	Z+6, r6	; 0x06
     dea:	77 82       	std	Z+7, r7	; 0x07
  results->decode_type = RC6;
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
  return DECODED;
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	23 c0       	rjmp	.+70     	; 0xe44 <ir_decodeRC6+0x1d8>
  long data = 0;
  int used = 0;
  int nbits = 0;
  
  if (results->rawlen < MIN_RC6_SAMPLES) {
    return ERR;
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	cb 01       	movw	r24, r22
     e04:	1f c0       	rjmp	.+62     	; 0xe44 <ir_decodeRC6+0x1d8>
  }
  
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
    return ERR;
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	cb 01       	movw	r24, r22
     e0c:	1b c0       	rjmp	.+54     	; 0xe44 <ir_decodeRC6+0x1d8>
  }
  offset++;
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
    return ERR;
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	cb 01       	movw	r24, r22
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <ir_decodeRC6+0x1d8>
  }
  offset++;

  // Get start bit (1)
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	cb 01       	movw	r24, r22
     e1c:	13 c0       	rjmp	.+38     	; 0xe44 <ir_decodeRC6+0x1d8>
  if (ir_getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	cb 01       	movw	r24, r22
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <ir_decodeRC6+0x1d8>
  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = ir_getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelA != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	cb 01       	movw	r24, r22
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <ir_decodeRC6+0x1d8>
    } 
    levelB = ir_getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelB != ir_getRClevel(results, &offset, &used, RC6_T1)) return ERR;
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	cb 01       	movw	r24, r22
     e34:	07 c0       	rjmp	.+14     	; 0xe44 <ir_decodeRC6+0x1d8>
    else if (levelA == SPACE && levelB == MARK) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR; // Error
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	cb 01       	movw	r24, r22
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <ir_decodeRC6+0x1d8>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC6;
  return DECODED;
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	7f 90       	pop	r7
     e62:	6f 90       	pop	r6
     e64:	5f 90       	pop	r5
     e66:	4f 90       	pop	r4
     e68:	08 95       	ret

00000e6a <ir_decodePanasonic>:

static long ir_decodePanasonic(decode_results *results) {
     e6a:	6f 92       	push	r6
     e6c:	7f 92       	push	r7
     e6e:	8f 92       	push	r8
     e70:	9f 92       	push	r9
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	4c 01       	movw	r8, r24
    unsigned long data = 0;
    int offset = 1;
    int i = 0;
    
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
     e88:	fc 01       	movw	r30, r24
     e8a:	02 85       	ldd	r16, Z+10	; 0x0a
     e8c:	13 85       	ldd	r17, Z+11	; 0x0b
     e8e:	f8 01       	movw	r30, r16
     e90:	82 81       	ldd	r24, Z+2	; 0x02
     e92:	93 81       	ldd	r25, Z+3	; 0x03
     e94:	6e ea       	ldi	r22, 0xAE	; 174
     e96:	7d e0       	ldi	r23, 0x0D	; 13
     e98:	3e db       	rcall	.-2436   	; 0x516 <MATCH_MARK>
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f4       	brne	.+2      	; 0xea0 <ir_decodePanasonic+0x36>
     e9e:	9a c0       	rjmp	.+308    	; 0xfd4 <ir_decodePanasonic+0x16a>
        return ERR;
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
     ea0:	f8 01       	movw	r30, r16
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	95 81       	ldd	r25, Z+5	; 0x05
     ea6:	66 ed       	ldi	r22, 0xD6	; 214
     ea8:	76 e0       	ldi	r23, 0x06	; 6
     eaa:	35 db       	rcall	.-2454   	; 0x516 <MATCH_MARK>
     eac:	89 2b       	or	r24, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <ir_decodePanasonic+0x48>
     eb0:	95 c0       	rjmp	.+298    	; 0xfdc <ir_decodePanasonic+0x172>
     eb2:	61 2c       	mov	r6, r1
     eb4:	71 2c       	mov	r7, r1
     eb6:	c3 e0       	ldi	r28, 0x03	; 3
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
     eba:	c1 2c       	mov	r12, r1
     ebc:	d1 2c       	mov	r13, r1
     ebe:	76 01       	movw	r14, r12
     ec0:	35 c0       	rjmp	.+106    	; 0xf2c <ir_decodePanasonic+0xc2>
    }
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
     ec2:	5e 01       	movw	r10, r28
     ec4:	ff ef       	ldi	r31, 0xFF	; 255
     ec6:	af 1a       	sub	r10, r31
     ec8:	bf 0a       	sbc	r11, r31
     eca:	fe 01       	movw	r30, r28
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	e0 0f       	add	r30, r16
     ed2:	f1 1f       	adc	r31, r17
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	66 ef       	ldi	r22, 0xF6	; 246
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	1c db       	rcall	.-2504   	; 0x516 <MATCH_MARK>
     ede:	89 2b       	or	r24, r25
     ee0:	09 f4       	brne	.+2      	; 0xee4 <ir_decodePanasonic+0x7a>
     ee2:	80 c0       	rjmp	.+256    	; 0xfe4 <ir_decodePanasonic+0x17a>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
     ee4:	aa 0c       	add	r10, r10
     ee6:	bb 1c       	adc	r11, r11
     ee8:	a0 0e       	add	r10, r16
     eea:	b1 1e       	adc	r11, r17
     eec:	f5 01       	movw	r30, r10
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	6c ed       	ldi	r22, 0xDC	; 220
     ef4:	74 e0       	ldi	r23, 0x04	; 4
     ef6:	13 db       	rcall	.-2522   	; 0x51e <MATCH_SPACE>
     ef8:	89 2b       	or	r24, r25
     efa:	39 f0       	breq	.+14     	; 0xf0a <ir_decodePanasonic+0xa0>
            data = (data << 1) | 1;
     efc:	cc 0c       	add	r12, r12
     efe:	dd 1c       	adc	r13, r13
     f00:	ee 1c       	adc	r14, r14
     f02:	ff 1c       	adc	r15, r15
     f04:	68 94       	set
     f06:	c0 f8       	bld	r12, 0
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <ir_decodePanasonic+0xba>
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
     f0a:	f5 01       	movw	r30, r10
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	60 e9       	ldi	r22, 0x90	; 144
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	04 db       	rcall	.-2552   	; 0x51e <MATCH_SPACE>
     f16:	89 2b       	or	r24, r25
     f18:	09 f4       	brne	.+2      	; 0xf1c <ir_decodePanasonic+0xb2>
     f1a:	68 c0       	rjmp	.+208    	; 0xfec <ir_decodePanasonic+0x182>
            data <<= 1;
     f1c:	cc 0c       	add	r12, r12
     f1e:	dd 1c       	adc	r13, r13
     f20:	ee 1c       	adc	r14, r14
     f22:	ff 1c       	adc	r15, r15
        } else {
            return ERR;
        }
        offset++;
     f24:	22 96       	adiw	r28, 0x02	; 2
        return ERR;
    }
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
     f26:	ff ef       	ldi	r31, 0xFF	; 255
     f28:	6f 1a       	sub	r6, r31
     f2a:	7f 0a       	sbc	r7, r31
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	68 16       	cp	r6, r24
     f30:	71 04       	cpc	r7, r1
     f32:	3c f2       	brlt	.-114    	; 0xec2 <ir_decodePanasonic+0x58>
        } else {
            return ERR;
        }
        offset++;
    }
    results->panasonicAddress = (unsigned int)(data);
     f34:	f4 01       	movw	r30, r8
     f36:	d3 82       	std	Z+3, r13	; 0x03
     f38:	c2 82       	std	Z+2, r12	; 0x02
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
     f3a:	61 2c       	mov	r6, r1
     f3c:	71 2c       	mov	r7, r1
     f3e:	34 c0       	rjmp	.+104    	; 0xfa8 <ir_decodePanasonic+0x13e>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
     f40:	5e 01       	movw	r10, r28
     f42:	ff ef       	ldi	r31, 0xFF	; 255
     f44:	af 1a       	sub	r10, r31
     f46:	bf 0a       	sbc	r11, r31
     f48:	fe 01       	movw	r30, r28
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e0 0f       	add	r30, r16
     f50:	f1 1f       	adc	r31, r17
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	66 ef       	ldi	r22, 0xF6	; 246
     f58:	71 e0       	ldi	r23, 0x01	; 1
     f5a:	dd da       	rcall	.-2630   	; 0x516 <MATCH_MARK>
     f5c:	89 2b       	or	r24, r25
     f5e:	09 f4       	brne	.+2      	; 0xf62 <ir_decodePanasonic+0xf8>
     f60:	49 c0       	rjmp	.+146    	; 0xff4 <ir_decodePanasonic+0x18a>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
     f62:	aa 0c       	add	r10, r10
     f64:	bb 1c       	adc	r11, r11
     f66:	a0 0e       	add	r10, r16
     f68:	b1 1e       	adc	r11, r17
     f6a:	f5 01       	movw	r30, r10
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	6c ed       	ldi	r22, 0xDC	; 220
     f72:	74 e0       	ldi	r23, 0x04	; 4
     f74:	d4 da       	rcall	.-2648   	; 0x51e <MATCH_SPACE>
     f76:	89 2b       	or	r24, r25
     f78:	39 f0       	breq	.+14     	; 0xf88 <ir_decodePanasonic+0x11e>
            data = (data << 1) | 1;
     f7a:	cc 0c       	add	r12, r12
     f7c:	dd 1c       	adc	r13, r13
     f7e:	ee 1c       	adc	r14, r14
     f80:	ff 1c       	adc	r15, r15
     f82:	68 94       	set
     f84:	c0 f8       	bld	r12, 0
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <ir_decodePanasonic+0x136>
     f88:	f5 01       	movw	r30, r10
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	60 e9       	ldi	r22, 0x90	; 144
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	c5 da       	rcall	.-2678   	; 0x51e <MATCH_SPACE>
     f94:	89 2b       	or	r24, r25
     f96:	91 f1       	breq	.+100    	; 0xffc <ir_decodePanasonic+0x192>
            data <<= 1;
     f98:	cc 0c       	add	r12, r12
     f9a:	dd 1c       	adc	r13, r13
     f9c:	ee 1c       	adc	r14, r14
     f9e:	ff 1c       	adc	r15, r15
        } else {
            return ERR;
        }
        offset++;
     fa0:	22 96       	adiw	r28, 0x02	; 2
        }
        offset++;
    }
    results->panasonicAddress = (unsigned int)(data);
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
     fa2:	ff ef       	ldi	r31, 0xFF	; 255
     fa4:	6f 1a       	sub	r6, r31
     fa6:	7f 0a       	sbc	r7, r31
     fa8:	80 e2       	ldi	r24, 0x20	; 32
     faa:	68 16       	cp	r6, r24
     fac:	71 04       	cpc	r7, r1
     fae:	44 f2       	brlt	.-112    	; 0xf40 <ir_decodePanasonic+0xd6>
        } else {
            return ERR;
        }
        offset++;
    }
    results->value = (unsigned long)data;
     fb0:	f4 01       	movw	r30, r8
     fb2:	c4 82       	std	Z+4, r12	; 0x04
     fb4:	d5 82       	std	Z+5, r13	; 0x05
     fb6:	e6 82       	std	Z+6, r14	; 0x06
     fb8:	f7 82       	std	Z+7, r15	; 0x07
    
    results->decode_type = PANASONIC;
     fba:	87 e0       	ldi	r24, 0x07	; 7
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
    results->bits = PANASONIC_BITS;
     fc2:	80 e3       	ldi	r24, 0x30	; 48
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	91 87       	std	Z+9, r25	; 0x09
     fc8:	80 87       	std	Z+8, r24	; 0x08
    return DECODED;
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	17 c0       	rjmp	.+46     	; 0x1002 <ir_decodePanasonic+0x198>
    unsigned long data = 0;
    int offset = 1;
    int i = 0;
    
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
        return ERR;
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	cb 01       	movw	r24, r22
     fda:	13 c0       	rjmp	.+38     	; 0x1002 <ir_decodePanasonic+0x198>
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
        return ERR;
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	cb 01       	movw	r24, r22
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <ir_decodePanasonic+0x198>
    offset++;
    
    // decode address
    for (i = 0; i < PANASONIC_BITS_ADR; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
            return ERR;
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	cb 01       	movw	r24, r22
     fea:	0b c0       	rjmp	.+22     	; 0x1002 <ir_decodePanasonic+0x198>
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
        } else {
            return ERR;
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	cb 01       	movw	r24, r22
     ff2:	07 c0       	rjmp	.+14     	; 0x1002 <ir_decodePanasonic+0x198>
    }
    results->panasonicAddress = (unsigned int)(data);
    // decode value
    for (i = 0; i < PANASONIC_BITS_VAL; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
            return ERR;
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	cb 01       	movw	r24, r22
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <ir_decodePanasonic+0x198>
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
        } else {
            return ERR;
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	cb 01       	movw	r24, r22
    results->value = (unsigned long)data;
    
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
    return DECODED;
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	08 95       	ret

00001020 <ir_decodeJVC>:

static long ir_decodeJVC(decode_results *results) {
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	8c 01       	movw	r16, r24
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    103e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
    1042:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
    1046:	82 97       	sbiw	r24, 0x22	; 34
    1048:	71 f5       	brne	.+92     	; 0x10a6 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
    104a:	f8 01       	movw	r30, r16
    104c:	c2 85       	ldd	r28, Z+10	; 0x0a
    104e:	d3 85       	ldd	r29, Z+11	; 0x0b
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	68 e5       	ldi	r22, 0x58	; 88
    1056:	72 e0       	ldi	r23, 0x02	; 2
    1058:	5e da       	rcall	.-2884   	; 0x516 <MATCH_MARK>
static long ir_decodeJVC(decode_results *results) {
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    105a:	89 2b       	or	r24, r25
    105c:	21 f1       	breq	.+72     	; 0x10a6 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
    105e:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <_edata+0xcc>
    1062:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <_edata+0xcd>
    1066:	e1 50       	subi	r30, 0x01	; 1
    1068:	f0 48       	sbci	r31, 0x80	; 128
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	ec 0f       	add	r30, r28
    1070:	fd 1f       	adc	r31, r29
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	68 e5       	ldi	r22, 0x58	; 88
    1078:	72 e0       	ldi	r23, 0x02	; 2
    107a:	4d da       	rcall	.-2918   	; 0x516 <MATCH_MARK>
    int i = 0;
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
    107c:	89 2b       	or	r24, r25
    107e:	99 f0       	breq	.+38     	; 0x10a6 <ir_decodeJVC+0x86>
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
        results->bits = 0;
    1080:	f8 01       	movw	r30, r16
    1082:	11 86       	std	Z+9, r1	; 0x09
    1084:	10 86       	std	Z+8, r1	; 0x08
        results->value = REPEAT;
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9f ef       	ldi	r25, 0xFF	; 255
    108a:	dc 01       	movw	r26, r24
    108c:	84 83       	std	Z+4, r24	; 0x04
    108e:	95 83       	std	Z+5, r25	; 0x05
    1090:	a6 83       	std	Z+6, r26	; 0x06
    1092:	b7 83       	std	Z+7, r27	; 0x07
        results->decode_type = JVC;
    1094:	88 e0       	ldi	r24, 0x08	; 8
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
        return DECODED;
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 c0       	rjmp	.+288    	; 0x11c6 <ir_decodeJVC+0x1a6>
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
    10a6:	f8 01       	movw	r30, r16
    10a8:	c2 84       	ldd	r12, Z+10	; 0x0a
    10aa:	d3 84       	ldd	r13, Z+11	; 0x0b
    10ac:	f6 01       	movw	r30, r12
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	60 e4       	ldi	r22, 0x40	; 64
    10b4:	7f e1       	ldi	r23, 0x1F	; 31
    10b6:	2f da       	rcall	.-2978   	; 0x516 <MATCH_MARK>
    10b8:	89 2b       	or	r24, r25
    10ba:	09 f4       	brne	.+2      	; 0x10be <ir_decodeJVC+0x9e>
    10bc:	6d c0       	rjmp	.+218    	; 0x1198 <ir_decodeJVC+0x178>
        return ERR;
    }
    offset++; 
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
    10be:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_edata+0xcc>
    10c2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_edata+0xcd>
    10c6:	81 97       	sbiw	r24, 0x21	; 33
    10c8:	08 f4       	brcc	.+2      	; 0x10cc <ir_decodeJVC+0xac>
    10ca:	6a c0       	rjmp	.+212    	; 0x11a0 <ir_decodeJVC+0x180>
        return ERR;
    }
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
    10cc:	f6 01       	movw	r30, r12
    10ce:	84 81       	ldd	r24, Z+4	; 0x04
    10d0:	95 81       	ldd	r25, Z+5	; 0x05
    10d2:	60 ea       	ldi	r22, 0xA0	; 160
    10d4:	7f e0       	ldi	r23, 0x0F	; 15
    10d6:	23 da       	rcall	.-3002   	; 0x51e <MATCH_SPACE>
    10d8:	89 2b       	or	r24, r25
    10da:	09 f4       	brne	.+2      	; 0x10de <ir_decodeJVC+0xbe>
    10dc:	65 c0       	rjmp	.+202    	; 0x11a8 <ir_decodeJVC+0x188>
    10de:	c3 e0       	ldi	r28, 0x03	; 3
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
    10e2:	81 2c       	mov	r8, r1
    10e4:	91 2c       	mov	r9, r1
    10e6:	54 01       	movw	r10, r8
    10e8:	61 2c       	mov	r6, r1
    10ea:	71 2c       	mov	r7, r1
    10ec:	34 c0       	rjmp	.+104    	; 0x1156 <ir_decodeJVC+0x136>
        return ERR;
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
    10ee:	fe 01       	movw	r30, r28
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ec 0d       	add	r30, r12
    10f6:	fd 1d       	adc	r31, r13
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	68 e5       	ldi	r22, 0x58	; 88
    10fe:	72 e0       	ldi	r23, 0x02	; 2
    1100:	0a da       	rcall	.-3052   	; 0x516 <MATCH_MARK>
    1102:	89 2b       	or	r24, r25
    1104:	09 f4       	brne	.+2      	; 0x1108 <ir_decodeJVC+0xe8>
    1106:	54 c0       	rjmp	.+168    	; 0x11b0 <ir_decodeJVC+0x190>
            return ERR;
        }
        offset++;
    1108:	7e 01       	movw	r14, r28
    110a:	ff ef       	ldi	r31, 0xFF	; 255
    110c:	ef 1a       	sub	r14, r31
    110e:	ff 0a       	sbc	r15, r31
        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
    1110:	ee 0c       	add	r14, r14
    1112:	ff 1c       	adc	r15, r15
    1114:	ec 0c       	add	r14, r12
    1116:	fd 1c       	adc	r15, r13
    1118:	f7 01       	movw	r30, r14
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	60 e4       	ldi	r22, 0x40	; 64
    1120:	76 e0       	ldi	r23, 0x06	; 6
    1122:	fd d9       	rcall	.-3078   	; 0x51e <MATCH_SPACE>
    1124:	89 2b       	or	r24, r25
    1126:	39 f0       	breq	.+14     	; 0x1136 <ir_decodeJVC+0x116>
            data = (data << 1) | 1;
    1128:	88 0c       	add	r8, r8
    112a:	99 1c       	adc	r9, r9
    112c:	aa 1c       	adc	r10, r10
    112e:	bb 1c       	adc	r11, r11
    1130:	68 94       	set
    1132:	80 f8       	bld	r8, 0
        } 
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
    1134:	0c c0       	rjmp	.+24     	; 0x114e <ir_decodeJVC+0x12e>
    1136:	f7 01       	movw	r30, r14
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	66 e2       	ldi	r22, 0x26	; 38
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	ee d9       	rcall	.-3108   	; 0x51e <MATCH_SPACE>
    1142:	89 2b       	or	r24, r25
    1144:	c9 f1       	breq	.+114    	; 0x11b8 <ir_decodeJVC+0x198>
            data <<= 1;
    1146:	88 0c       	add	r8, r8
    1148:	99 1c       	adc	r9, r9
    114a:	aa 1c       	adc	r10, r10
    114c:	bb 1c       	adc	r11, r11
        } 
        else {
            return ERR;
        }
        offset++;
    114e:	22 96       	adiw	r28, 0x02	; 2
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
    1150:	ff ef       	ldi	r31, 0xFF	; 255
    1152:	6f 1a       	sub	r6, r31
    1154:	7f 0a       	sbc	r7, r31
    1156:	80 e1       	ldi	r24, 0x10	; 16
    1158:	68 16       	cp	r6, r24
    115a:	71 04       	cpc	r7, r1
    115c:	44 f2       	brlt	.-112    	; 0x10ee <ir_decodeJVC+0xce>
            return ERR;
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
    115e:	cc 0f       	add	r28, r28
    1160:	dd 1f       	adc	r29, r29
    1162:	cc 0d       	add	r28, r12
    1164:	dd 1d       	adc	r29, r13
    1166:	88 81       	ld	r24, Y
    1168:	99 81       	ldd	r25, Y+1	; 0x01
    116a:	68 e5       	ldi	r22, 0x58	; 88
    116c:	72 e0       	ldi	r23, 0x02	; 2
    116e:	d3 d9       	rcall	.-3162   	; 0x516 <MATCH_MARK>
    1170:	89 2b       	or	r24, r25
    1172:	31 f1       	breq	.+76     	; 0x11c0 <ir_decodeJVC+0x1a0>
        return ERR;
    }
    // Success
    results->bits = JVC_BITS;
    1174:	80 e1       	ldi	r24, 0x10	; 16
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	f8 01       	movw	r30, r16
    117a:	91 87       	std	Z+9, r25	; 0x09
    117c:	80 87       	std	Z+8, r24	; 0x08
    results->value = data;
    117e:	84 82       	std	Z+4, r8	; 0x04
    1180:	95 82       	std	Z+5, r9	; 0x05
    1182:	a6 82       	std	Z+6, r10	; 0x06
    1184:	b7 82       	std	Z+7, r11	; 0x07
    results->decode_type = JVC;
    1186:	88 e0       	ldi	r24, 0x08	; 8
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    return DECODED;
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	17 c0       	rjmp	.+46     	; 0x11c6 <ir_decodeJVC+0x1a6>
        results->decode_type = JVC;
        return DECODED;
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
        return ERR;
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	cb 01       	movw	r24, r22
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <ir_decodeJVC+0x1a6>
    }
    offset++; 
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
        return ERR;
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	cb 01       	movw	r24, r22
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <ir_decodeJVC+0x1a6>
    }
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	cb 01       	movw	r24, r22
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <ir_decodeJVC+0x1a6>
    }
    offset++;
    for (i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
            return ERR;
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	cb 01       	movw	r24, r22
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <ir_decodeJVC+0x1a6>
        } 
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
            data <<= 1;
        } 
        else {
            return ERR;
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	cb 01       	movw	r24, r22
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <ir_decodeJVC+0x1a6>
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
        return ERR;
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	cb 01       	movw	r24, r22
    // Success
    results->bits = JVC_BITS;
    results->value = data;
    results->decode_type = JVC;
    return DECODED;
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	bf 90       	pop	r11
    11d8:	af 90       	pop	r10
    11da:	9f 90       	pop	r9
    11dc:	8f 90       	pop	r8
    11de:	7f 90       	pop	r7
    11e0:	6f 90       	pop	r6
    11e2:	08 95       	ret

000011e4 <ir_enableIRIn>:
  ir_timerCfgKhz(khz);
}*/

// initialization
void ir_enableIRIn(void) {
  irparams.blinkflag = 0;
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f1 e0       	ldi	r31, 0x01	; 1
    11e8:	11 82       	std	Z+1, r1	; 0x01
  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	80 83       	st	Z, r24
  irparams.rawlen = 0;
    11ee:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_edata+0xcd>
    11f2:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_edata+0xcc>
  // set pin modes
  IR_RECEIVE_DDR &= ~(1<<IR_RECEIVE_PIN);
    11f6:	84 b1       	in	r24, 0x04	; 4
    11f8:	8f 7e       	andi	r24, 0xEF	; 239
    11fa:	84 b9       	out	0x04, r24	; 4
  
  cli();
    11fc:	f8 94       	cli
  // setup pulse clock timer interrupt for Timer
  ir_timerCfgNorm();
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <ir_timerCfgNorm>
  ir_timerRst();
    1202:	0e 94 47 00 	call	0x8e	; 0x8e <ir_timerRst>
  sei();
    1206:	78 94       	sei
    1208:	08 95       	ret

0000120a <ir_blink13>:
}

// enable/disable blinking of pin 13 on IR processing
void ir_blink13(int blinkflag)
{
  irparams.blinkflag = blinkflag;
    120a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
    120e:	08 95       	ret

00001210 <ir_interruptService>:
{
  unsigned char irdata = 0;

  // timer is used for sampling IR signal

    ir_timerRst();
    1210:	0e 94 47 00 	call	0x8e	; 0x8e <ir_timerRst>

    //irdata = (unsigned char)ir_digitalRead(irparams.recvpin);
	irdata = (IR_RECEIVE_PINx & (1<<IR_RECEIVE_PIN))>>IR_RECEIVE_PIN;
    1214:	83 b1       	in	r24, 0x03	; 3
    1216:	80 71       	andi	r24, 0x10	; 16
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	95 95       	asr	r25
    121c:	87 95       	ror	r24
    121e:	95 95       	asr	r25
    1220:	87 95       	ror	r24
    1222:	95 95       	asr	r25
    1224:	87 95       	ror	r24
    1226:	95 95       	asr	r25
    1228:	87 95       	ror	r24

    irparams.timer++; // One more 50us tick
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	22 81       	ldd	r18, Z+2	; 0x02
    1230:	33 81       	ldd	r19, Z+3	; 0x03
    1232:	2f 5f       	subi	r18, 0xFF	; 255
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	33 83       	std	Z+3, r19	; 0x03
    1238:	22 83       	std	Z+2, r18	; 0x02
    if (irparams.rawlen >= RAWBUF) {
    123a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
    123e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
    1242:	24 36       	cpi	r18, 0x64	; 100
    1244:	31 05       	cpc	r19, r1
    1246:	18 f0       	brcs	.+6      	; 0x124e <ir_interruptService+0x3e>
        // Buffer overflow
        irparams.rcvstate = STATE_STOP;
    1248:	95 e0       	ldi	r25, 0x05	; 5
    124a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
    }
    switch(irparams.rcvstate) {
    124e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
    1252:	93 30       	cpi	r25, 0x03	; 3
    1254:	d1 f1       	breq	.+116    	; 0x12ca <ir_interruptService+0xba>
    1256:	18 f4       	brcc	.+6      	; 0x125e <ir_interruptService+0x4e>
    1258:	92 30       	cpi	r25, 0x02	; 2
    125a:	41 f0       	breq	.+16     	; 0x126c <ir_interruptService+0x5c>
    125c:	08 95       	ret
    125e:	94 30       	cpi	r25, 0x04	; 4
    1260:	09 f4       	brne	.+2      	; 0x1264 <ir_interruptService+0x54>
    1262:	53 c0       	rjmp	.+166    	; 0x130a <ir_interruptService+0xfa>
    1264:	95 30       	cpi	r25, 0x05	; 5
    1266:	09 f4       	brne	.+2      	; 0x126a <ir_interruptService+0x5a>
    1268:	7b c0       	rjmp	.+246    	; 0x1360 <ir_interruptService+0x150>
    126a:	08 95       	ret
      case STATE_IDLE: // In the middle of a gap
        if (irdata == MARK) {
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	09 f0       	breq	.+2      	; 0x1272 <ir_interruptService+0x62>
    1270:	7d c0       	rjmp	.+250    	; 0x136c <ir_interruptService+0x15c>
        if (irparams.timer < GAP_TICKS) {
    1272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    1276:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    127a:	84 36       	cpi	r24, 0x64	; 100
    127c:	91 05       	cpc	r25, r1
    127e:	28 f4       	brcc	.+10     	; 0x128a <ir_interruptService+0x7a>
            // Not big enough to be a gap.
            irparams.timer = 0;
    1280:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
    1284:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
    1288:	08 95       	ret
        } 
        else {
            // gap just ended, record duration and start recording transmission
            irparams.rawlen = 0;
    128a:	a0 e0       	ldi	r26, 0x00	; 0
    128c:	b1 e0       	ldi	r27, 0x01	; 1
    128e:	ec ec       	ldi	r30, 0xCC	; 204
    1290:	f1 e0       	ldi	r31, 0x01	; 1
    1292:	11 82       	std	Z+1, r1	; 0x01
    1294:	10 82       	st	Z, r1
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1296:	80 81       	ld	r24, Z
    1298:	91 81       	ldd	r25, Z+1	; 0x01
    129a:	9c 01       	movw	r18, r24
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	20 83       	st	Z, r18
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	2d 91       	ld	r18, X+
    12a8:	3c 91       	ld	r19, X
    12aa:	13 97       	sbiw	r26, 0x03	; 3
    12ac:	fc 01       	movw	r30, r24
    12ae:	32 96       	adiw	r30, 0x02	; 2
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	e0 50       	subi	r30, 0x00	; 0
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	31 83       	std	Z+1, r19	; 0x01
    12ba:	20 83       	st	Z, r18
            irparams.timer = 0;
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	1c 92       	st	X, r1
    12c0:	1e 92       	st	-X, r1
    12c2:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	8c 93       	st	X, r24
    12c8:	08 95       	ret
        }
        }
        break;
      case STATE_MARK: // timing MARK
        if (irdata == SPACE) {   // MARK ended, record time
    12ca:	81 11       	cpse	r24, r1
    12cc:	4f c0       	rjmp	.+158    	; 0x136c <ir_interruptService+0x15c>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b1 e0       	ldi	r27, 0x01	; 1
    12d2:	ec ec       	ldi	r30, 0xCC	; 204
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	9c 01       	movw	r18, r24
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	31 83       	std	Z+1, r19	; 0x01
    12e2:	20 83       	st	Z, r18
    12e4:	12 96       	adiw	r26, 0x02	; 2
    12e6:	2d 91       	ld	r18, X+
    12e8:	3c 91       	ld	r19, X
    12ea:	13 97       	sbiw	r26, 0x03	; 3
    12ec:	fc 01       	movw	r30, r24
    12ee:	32 96       	adiw	r30, 0x02	; 2
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e0 50       	subi	r30, 0x00	; 0
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	31 83       	std	Z+1, r19	; 0x01
    12fa:	20 83       	st	Z, r18
            irparams.timer = 0;
    12fc:	13 96       	adiw	r26, 0x03	; 3
    12fe:	1c 92       	st	X, r1
    1300:	1e 92       	st	-X, r1
    1302:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_SPACE;
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	8c 93       	st	X, r24
    1308:	08 95       	ret
        }
        break;
      case STATE_SPACE: // timing SPACE
        if (irdata == MARK) { // SPACE just ended, record it
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	f1 f4       	brne	.+60     	; 0x134a <ir_interruptService+0x13a>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b1 e0       	ldi	r27, 0x01	; 1
    1312:	ec ec       	ldi	r30, 0xCC	; 204
    1314:	f1 e0       	ldi	r31, 0x01	; 1
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	9c 01       	movw	r18, r24
    131c:	2f 5f       	subi	r18, 0xFF	; 255
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	31 83       	std	Z+1, r19	; 0x01
    1322:	20 83       	st	Z, r18
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	2d 91       	ld	r18, X+
    1328:	3c 91       	ld	r19, X
    132a:	13 97       	sbiw	r26, 0x03	; 3
    132c:	fc 01       	movw	r30, r24
    132e:	32 96       	adiw	r30, 0x02	; 2
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e0 50       	subi	r30, 0x00	; 0
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	31 83       	std	Z+1, r19	; 0x01
    133a:	20 83       	st	Z, r18
            irparams.timer = 0;
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	1c 92       	st	X, r1
    1340:	1e 92       	st	-X, r1
    1342:	12 97       	sbiw	r26, 0x02	; 2
            irparams.rcvstate = STATE_MARK;
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	8c 93       	st	X, r24
    1348:	08 95       	ret
        } 
        else { // SPACE
          if (irparams.timer > GAP_TICKS) {
    134a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    134e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    1352:	85 36       	cpi	r24, 0x65	; 101
    1354:	91 05       	cpc	r25, r1
    1356:	50 f0       	brcs	.+20     	; 0x136c <ir_interruptService+0x15c>
            // big SPACE, indicates gap between codes
            // Mark current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting space width
            irparams.rcvstate = STATE_STOP;
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    135e:	08 95       	ret
          } 
        }
        break;
     case STATE_STOP: // waiting, measuring gap
        if (irdata == MARK) { // reset gap timer
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	21 f4       	brne	.+8      	; 0x136c <ir_interruptService+0x15c>
           irparams.timer = 0;
    1364:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
    1368:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
    136c:	08 95       	ret

0000136e <ir_resume>:
        }
    }*/
}

void ir_resume(void) {
  irparams.rcvstate = STATE_IDLE;
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  irparams.rawlen = 0;
    1374:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_edata+0xcd>
    1378:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_edata+0xcc>
    137c:	08 95       	ret

0000137e <ir_decode>:


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
  results->rawlen = irparams.rawlen;
    1382:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <_edata+0xcc>
    1386:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <_edata+0xcd>
    138a:	fc 01       	movw	r30, r24
    138c:	35 87       	std	Z+13, r19	; 0x0d
    138e:	24 87       	std	Z+12, r18	; 0x0c
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
    1390:	24 e0       	ldi	r18, 0x04	; 4
    1392:	31 e0       	ldi	r19, 0x01	; 1
    1394:	33 87       	std	Z+11, r19	; 0x0b
    1396:	22 87       	std	Z+10, r18	; 0x0a
  if (irparams.rcvstate != STATE_STOP) {
    1398:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
    139c:	25 30       	cpi	r18, 0x05	; 5
    139e:	09 f0       	breq	.+2      	; 0x13a2 <ir_decode+0x24>
    13a0:	45 c0       	rjmp	.+138    	; 0x142c <ir_decode+0xae>
    13a2:	ec 01       	movw	r28, r24
    return ERR;
  }
  if (ir_decodeSigma(results)) {
    13a4:	c0 d8       	rcall	.-3712   	; 0x526 <ir_decodeSigma>
    13a6:	67 2b       	or	r22, r23
    13a8:	68 2b       	or	r22, r24
    13aa:	69 2b       	or	r22, r25
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <ir_decode+0x32>
    13ae:	41 c0       	rjmp	.+130    	; 0x1432 <ir_decode+0xb4>
     return DECODED;
  }
  if (ir_decodeNEC(results)) {
    13b0:	ce 01       	movw	r24, r28
    13b2:	91 d9       	rcall	.-3294   	; 0x6d6 <ir_decodeNEC>
    13b4:	67 2b       	or	r22, r23
    13b6:	68 2b       	or	r22, r24
    13b8:	69 2b       	or	r22, r25
    13ba:	09 f0       	breq	.+2      	; 0x13be <ir_decode+0x40>
    13bc:	3d c0       	rjmp	.+122    	; 0x1438 <ir_decode+0xba>
    return DECODED;
  }
  if (ir_decodeSony(results)) {
    13be:	ce 01       	movw	r24, r28
    13c0:	50 da       	rcall	.-2912   	; 0x862 <ir_decodeSony>
    13c2:	67 2b       	or	r22, r23
    13c4:	68 2b       	or	r22, r24
    13c6:	69 2b       	or	r22, r25
    13c8:	09 f0       	breq	.+2      	; 0x13cc <ir_decode+0x4e>
    13ca:	39 c0       	rjmp	.+114    	; 0x143e <ir_decode+0xc0>
    return DECODED;
  }
  if (ir_decodeSanyo(results)) {
    13cc:	ce 01       	movw	r24, r28
    13ce:	f6 da       	rcall	.-2580   	; 0x9bc <ir_decodeSanyo>
    13d0:	67 2b       	or	r22, r23
    13d2:	68 2b       	or	r22, r24
    13d4:	69 2b       	or	r22, r25
    13d6:	b1 f5       	brne	.+108    	; 0x1444 <ir_decode+0xc6>
    return DECODED;
  }
  if (ir_decodeMitsubishi(results)) {
    13d8:	ce 01       	movw	r24, r28
    13da:	aa db       	rcall	.-2220   	; 0xb30 <ir_decodeMitsubishi>
    13dc:	67 2b       	or	r22, r23
    13de:	68 2b       	or	r22, r24
    13e0:	69 2b       	or	r22, r25
    13e2:	99 f5       	brne	.+102    	; 0x144a <ir_decode+0xcc>
    13e4:	ce 01       	movw	r24, r28
    return DECODED;
  }
  if (ir_decodeRC5(results)) {
    13e6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ir_decodeRC5>
    13ea:	67 2b       	or	r22, r23
    13ec:	68 2b       	or	r22, r24
    13ee:	69 2b       	or	r22, r25
    13f0:	79 f5       	brne	.+94     	; 0x1450 <ir_decode+0xd2>
    return DECODED;
  }
  if (ir_decodeRC6(results)) {
    13f2:	ce 01       	movw	r24, r28
    13f4:	3b dc       	rcall	.-1930   	; 0xc6c <ir_decodeRC6>
    13f6:	67 2b       	or	r22, r23
    13f8:	68 2b       	or	r22, r24
    13fa:	69 2b       	or	r22, r25
    13fc:	61 f5       	brne	.+88     	; 0x1456 <ir_decode+0xd8>
    return DECODED;
  }
  if (ir_decodePanasonic(results)) {
    13fe:	ce 01       	movw	r24, r28
    1400:	34 dd       	rcall	.-1432   	; 0xe6a <ir_decodePanasonic>
    1402:	67 2b       	or	r22, r23
    1404:	68 2b       	or	r22, r24
    1406:	69 2b       	or	r22, r25
    1408:	49 f5       	brne	.+82     	; 0x145c <ir_decode+0xde>
     return DECODED;
  }
  if (ir_decodeJVC(results)) {
    140a:	ce 01       	movw	r24, r28
    140c:	09 de       	rcall	.-1006   	; 0x1020 <ir_decodeJVC>
    140e:	67 2b       	or	r22, r23
    1410:	68 2b       	or	r22, r24
    1412:	69 2b       	or	r22, r25
    1414:	31 f5       	brne	.+76     	; 0x1462 <ir_decode+0xe4>
  }

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    1416:	ce 01       	movw	r24, r28
    1418:	0e 94 9b 00 	call	0x136	; 0x136 <ir_decodeHash>
    141c:	67 2b       	or	r22, r23
    141e:	68 2b       	or	r22, r24
    1420:	69 2b       	or	r22, r25
    1422:	11 f5       	brne	.+68     	; 0x1468 <ir_decode+0xea>
    return DECODED;
  }
  // Throw away and start over
  ir_resume();
    1424:	a4 df       	rcall	.-184    	; 0x136e <ir_resume>
    1426:	80 e0       	ldi	r24, 0x00	; 0
  return ERR;
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	20 c0       	rjmp	.+64     	; 0x146c <ir_decode+0xee>
    142c:	80 e0       	ldi	r24, 0x00	; 0
// Results of decoding are stored in results
int ir_decode(decode_results *results) {
  results->rawlen = irparams.rawlen;
  results->rawbuf = (volatile unsigned int *)&irparams.rawbuf[0];
  if (irparams.rcvstate != STATE_STOP) {
    return ERR;
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	1d c0       	rjmp	.+58     	; 0x146c <ir_decode+0xee>
    1432:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSigma(results)) {
     return DECODED;
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	1a c0       	rjmp	.+52     	; 0x146c <ir_decode+0xee>
    1438:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeNEC(results)) {
    return DECODED;
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	17 c0       	rjmp	.+46     	; 0x146c <ir_decode+0xee>
    143e:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSony(results)) {
    return DECODED;
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	14 c0       	rjmp	.+40     	; 0x146c <ir_decode+0xee>
    1444:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeSanyo(results)) {
    return DECODED;
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	11 c0       	rjmp	.+34     	; 0x146c <ir_decode+0xee>
    144a:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeMitsubishi(results)) {
    return DECODED;
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e c0       	rjmp	.+28     	; 0x146c <ir_decode+0xee>
    1450:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC5(results)) {
    return DECODED;
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0b c0       	rjmp	.+22     	; 0x146c <ir_decode+0xee>
    1456:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeRC6(results)) {
    return DECODED;
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	08 c0       	rjmp	.+16     	; 0x146c <ir_decode+0xee>
    145c:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodePanasonic(results)) {
     return DECODED;
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	05 c0       	rjmp	.+10     	; 0x146c <ir_decode+0xee>
    1462:	81 e0       	ldi	r24, 0x01	; 1
  }
  if (ir_decodeJVC(results)) {
     return DECODED;
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <ir_decode+0xee>
    1468:	81 e0       	ldi	r24, 0x01	; 1

  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (ir_decodeHash(results)) {
    return DECODED;
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	df 91       	pop	r29
  }
  // Throw away and start over
  ir_resume();
  return ERR;
}
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <main>:
#include <avr/interrupt.h>
#include "IRlib/IRremote.h"


int main(void)
{
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	2e 97       	sbiw	r28, 0x0e	; 14
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0x10;
    1486:	84 b1       	in	r24, 0x04	; 4
    1488:	80 61       	ori	r24, 0x10	; 16
    148a:	84 b9       	out	0x04, r24	; 4
	 TCCR0B= 0b00001100; // /256
	 TIMSK0=0b00000010;
	 OCR0A=3; // division par 3
	//sei();*/
	decode_results dec_results;
    ir_enableIRIn();
    148c:	ab de       	rcall	.-682    	; 0x11e4 <ir_enableIRIn>
    ir_blink13(0);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	bb de       	rcall	.-650    	; 0x120a <ir_blink13>
		}
		else
		{
			PORTB &= 0xEF;
		}*/
	    if (ir_decode(&dec_results)) {
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	72 df       	rcall	.-284    	; 0x137e <ir_decode>
    149a:	89 2b       	or	r24, r25
    149c:	d9 f3       	breq	.-10     	; 0x1494 <main+0x22>
		    if (dec_results.decode_type == NEC)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	19 f4       	brne	.+6      	; 0x14ac <main+0x3a>
		    {
			   PORTB ^= 0x80;
    14a6:	85 b1       	in	r24, 0x05	; 5
    14a8:	80 58       	subi	r24, 0x80	; 128
		    }
		    //do something here
		    ir_resume(); // Receive the next value
    14aa:	85 b9       	out	0x05, r24	; 5
    14ac:	60 df       	rcall	.-320    	; 0x136e <ir_resume>
    14ae:	f2 cf       	rjmp	.-28     	; 0x1494 <main+0x22>

000014b0 <__vector_14>:
    }

}

ISR(TIMER0_COMPA_vect)
{
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
	ir_interruptService();
    14d2:	9e de       	rcall	.-708    	; 0x1210 <ir_interruptService>
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__subsf3>:
    14f6:	50 58       	subi	r21, 0x80	; 128

000014f8 <__addsf3>:
    14f8:	bb 27       	eor	r27, r27
    14fa:	aa 27       	eor	r26, r26
    14fc:	0e d0       	rcall	.+28     	; 0x151a <__addsf3x>
    14fe:	75 c1       	rjmp	.+746    	; 0x17ea <__fp_round>
    1500:	66 d1       	rcall	.+716    	; 0x17ce <__fp_pscA>
    1502:	30 f0       	brcs	.+12     	; 0x1510 <__addsf3+0x18>
    1504:	6b d1       	rcall	.+726    	; 0x17dc <__fp_pscB>
    1506:	20 f0       	brcs	.+8      	; 0x1510 <__addsf3+0x18>
    1508:	31 f4       	brne	.+12     	; 0x1516 <__addsf3+0x1e>
    150a:	9f 3f       	cpi	r25, 0xFF	; 255
    150c:	11 f4       	brne	.+4      	; 0x1512 <__addsf3+0x1a>
    150e:	1e f4       	brtc	.+6      	; 0x1516 <__addsf3+0x1e>
    1510:	5b c1       	rjmp	.+694    	; 0x17c8 <__fp_nan>
    1512:	0e f4       	brtc	.+2      	; 0x1516 <__addsf3+0x1e>
    1514:	e0 95       	com	r30
    1516:	e7 fb       	bst	r30, 7
    1518:	51 c1       	rjmp	.+674    	; 0x17bc <__fp_inf>

0000151a <__addsf3x>:
    151a:	e9 2f       	mov	r30, r25
    151c:	77 d1       	rcall	.+750    	; 0x180c <__fp_split3>
    151e:	80 f3       	brcs	.-32     	; 0x1500 <__addsf3+0x8>
    1520:	ba 17       	cp	r27, r26
    1522:	62 07       	cpc	r22, r18
    1524:	73 07       	cpc	r23, r19
    1526:	84 07       	cpc	r24, r20
    1528:	95 07       	cpc	r25, r21
    152a:	18 f0       	brcs	.+6      	; 0x1532 <__addsf3x+0x18>
    152c:	71 f4       	brne	.+28     	; 0x154a <__addsf3x+0x30>
    152e:	9e f5       	brtc	.+102    	; 0x1596 <__addsf3x+0x7c>
    1530:	8f c1       	rjmp	.+798    	; 0x1850 <__fp_zero>
    1532:	0e f4       	brtc	.+2      	; 0x1536 <__addsf3x+0x1c>
    1534:	e0 95       	com	r30
    1536:	0b 2e       	mov	r0, r27
    1538:	ba 2f       	mov	r27, r26
    153a:	a0 2d       	mov	r26, r0
    153c:	0b 01       	movw	r0, r22
    153e:	b9 01       	movw	r22, r18
    1540:	90 01       	movw	r18, r0
    1542:	0c 01       	movw	r0, r24
    1544:	ca 01       	movw	r24, r20
    1546:	a0 01       	movw	r20, r0
    1548:	11 24       	eor	r1, r1
    154a:	ff 27       	eor	r31, r31
    154c:	59 1b       	sub	r21, r25
    154e:	99 f0       	breq	.+38     	; 0x1576 <__addsf3x+0x5c>
    1550:	59 3f       	cpi	r21, 0xF9	; 249
    1552:	50 f4       	brcc	.+20     	; 0x1568 <__addsf3x+0x4e>
    1554:	50 3e       	cpi	r21, 0xE0	; 224
    1556:	68 f1       	brcs	.+90     	; 0x15b2 <__addsf3x+0x98>
    1558:	1a 16       	cp	r1, r26
    155a:	f0 40       	sbci	r31, 0x00	; 0
    155c:	a2 2f       	mov	r26, r18
    155e:	23 2f       	mov	r18, r19
    1560:	34 2f       	mov	r19, r20
    1562:	44 27       	eor	r20, r20
    1564:	58 5f       	subi	r21, 0xF8	; 248
    1566:	f3 cf       	rjmp	.-26     	; 0x154e <__addsf3x+0x34>
    1568:	46 95       	lsr	r20
    156a:	37 95       	ror	r19
    156c:	27 95       	ror	r18
    156e:	a7 95       	ror	r26
    1570:	f0 40       	sbci	r31, 0x00	; 0
    1572:	53 95       	inc	r21
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__addsf3x+0x4e>
    1576:	7e f4       	brtc	.+30     	; 0x1596 <__addsf3x+0x7c>
    1578:	1f 16       	cp	r1, r31
    157a:	ba 0b       	sbc	r27, r26
    157c:	62 0b       	sbc	r22, r18
    157e:	73 0b       	sbc	r23, r19
    1580:	84 0b       	sbc	r24, r20
    1582:	ba f0       	brmi	.+46     	; 0x15b2 <__addsf3x+0x98>
    1584:	91 50       	subi	r25, 0x01	; 1
    1586:	a1 f0       	breq	.+40     	; 0x15b0 <__addsf3x+0x96>
    1588:	ff 0f       	add	r31, r31
    158a:	bb 1f       	adc	r27, r27
    158c:	66 1f       	adc	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	88 1f       	adc	r24, r24
    1592:	c2 f7       	brpl	.-16     	; 0x1584 <__addsf3x+0x6a>
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <__addsf3x+0x98>
    1596:	ba 0f       	add	r27, r26
    1598:	62 1f       	adc	r22, r18
    159a:	73 1f       	adc	r23, r19
    159c:	84 1f       	adc	r24, r20
    159e:	48 f4       	brcc	.+18     	; 0x15b2 <__addsf3x+0x98>
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	b7 95       	ror	r27
    15a8:	f7 95       	ror	r31
    15aa:	9e 3f       	cpi	r25, 0xFE	; 254
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <__addsf3x+0x96>
    15ae:	b3 cf       	rjmp	.-154    	; 0x1516 <__addsf3+0x1e>
    15b0:	93 95       	inc	r25
    15b2:	88 0f       	add	r24, r24
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__addsf3x+0x9e>
    15b6:	99 27       	eor	r25, r25
    15b8:	ee 0f       	add	r30, r30
    15ba:	97 95       	ror	r25
    15bc:	87 95       	ror	r24
    15be:	08 95       	ret

000015c0 <__cmpsf2>:
    15c0:	d9 d0       	rcall	.+434    	; 0x1774 <__fp_cmp>
    15c2:	08 f4       	brcc	.+2      	; 0x15c6 <__cmpsf2+0x6>
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	08 95       	ret

000015c8 <__divsf3>:
    15c8:	0c d0       	rcall	.+24     	; 0x15e2 <__divsf3x>
    15ca:	0f c1       	rjmp	.+542    	; 0x17ea <__fp_round>
    15cc:	07 d1       	rcall	.+526    	; 0x17dc <__fp_pscB>
    15ce:	40 f0       	brcs	.+16     	; 0x15e0 <__divsf3+0x18>
    15d0:	fe d0       	rcall	.+508    	; 0x17ce <__fp_pscA>
    15d2:	30 f0       	brcs	.+12     	; 0x15e0 <__divsf3+0x18>
    15d4:	21 f4       	brne	.+8      	; 0x15de <__divsf3+0x16>
    15d6:	5f 3f       	cpi	r21, 0xFF	; 255
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <__divsf3+0x18>
    15da:	f0 c0       	rjmp	.+480    	; 0x17bc <__fp_inf>
    15dc:	51 11       	cpse	r21, r1
    15de:	39 c1       	rjmp	.+626    	; 0x1852 <__fp_szero>
    15e0:	f3 c0       	rjmp	.+486    	; 0x17c8 <__fp_nan>

000015e2 <__divsf3x>:
    15e2:	14 d1       	rcall	.+552    	; 0x180c <__fp_split3>
    15e4:	98 f3       	brcs	.-26     	; 0x15cc <__divsf3+0x4>

000015e6 <__divsf3_pse>:
    15e6:	99 23       	and	r25, r25
    15e8:	c9 f3       	breq	.-14     	; 0x15dc <__divsf3+0x14>
    15ea:	55 23       	and	r21, r21
    15ec:	b1 f3       	breq	.-20     	; 0x15da <__divsf3+0x12>
    15ee:	95 1b       	sub	r25, r21
    15f0:	55 0b       	sbc	r21, r21
    15f2:	bb 27       	eor	r27, r27
    15f4:	aa 27       	eor	r26, r26
    15f6:	62 17       	cp	r22, r18
    15f8:	73 07       	cpc	r23, r19
    15fa:	84 07       	cpc	r24, r20
    15fc:	38 f0       	brcs	.+14     	; 0x160c <__divsf3_pse+0x26>
    15fe:	9f 5f       	subi	r25, 0xFF	; 255
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	22 0f       	add	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	44 1f       	adc	r20, r20
    1608:	aa 1f       	adc	r26, r26
    160a:	a9 f3       	breq	.-22     	; 0x15f6 <__divsf3_pse+0x10>
    160c:	33 d0       	rcall	.+102    	; 0x1674 <__divsf3_pse+0x8e>
    160e:	0e 2e       	mov	r0, r30
    1610:	3a f0       	brmi	.+14     	; 0x1620 <__divsf3_pse+0x3a>
    1612:	e0 e8       	ldi	r30, 0x80	; 128
    1614:	30 d0       	rcall	.+96     	; 0x1676 <__divsf3_pse+0x90>
    1616:	91 50       	subi	r25, 0x01	; 1
    1618:	50 40       	sbci	r21, 0x00	; 0
    161a:	e6 95       	lsr	r30
    161c:	00 1c       	adc	r0, r0
    161e:	ca f7       	brpl	.-14     	; 0x1612 <__divsf3_pse+0x2c>
    1620:	29 d0       	rcall	.+82     	; 0x1674 <__divsf3_pse+0x8e>
    1622:	fe 2f       	mov	r31, r30
    1624:	27 d0       	rcall	.+78     	; 0x1674 <__divsf3_pse+0x8e>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	bb 1f       	adc	r27, r27
    162e:	26 17       	cp	r18, r22
    1630:	37 07       	cpc	r19, r23
    1632:	48 07       	cpc	r20, r24
    1634:	ab 07       	cpc	r26, r27
    1636:	b0 e8       	ldi	r27, 0x80	; 128
    1638:	09 f0       	breq	.+2      	; 0x163c <__divsf3_pse+0x56>
    163a:	bb 0b       	sbc	r27, r27
    163c:	80 2d       	mov	r24, r0
    163e:	bf 01       	movw	r22, r30
    1640:	ff 27       	eor	r31, r31
    1642:	93 58       	subi	r25, 0x83	; 131
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	2a f0       	brmi	.+10     	; 0x1652 <__divsf3_pse+0x6c>
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	51 05       	cpc	r21, r1
    164c:	68 f0       	brcs	.+26     	; 0x1668 <__divsf3_pse+0x82>
    164e:	b6 c0       	rjmp	.+364    	; 0x17bc <__fp_inf>
    1650:	00 c1       	rjmp	.+512    	; 0x1852 <__fp_szero>
    1652:	5f 3f       	cpi	r21, 0xFF	; 255
    1654:	ec f3       	brlt	.-6      	; 0x1650 <__divsf3_pse+0x6a>
    1656:	98 3e       	cpi	r25, 0xE8	; 232
    1658:	dc f3       	brlt	.-10     	; 0x1650 <__divsf3_pse+0x6a>
    165a:	86 95       	lsr	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	b7 95       	ror	r27
    1662:	f7 95       	ror	r31
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	c9 f7       	brne	.-14     	; 0x165a <__divsf3_pse+0x74>
    1668:	88 0f       	add	r24, r24
    166a:	91 1d       	adc	r25, r1
    166c:	96 95       	lsr	r25
    166e:	87 95       	ror	r24
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret
    1674:	e1 e0       	ldi	r30, 0x01	; 1
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	bb 1f       	adc	r27, r27
    167e:	62 17       	cp	r22, r18
    1680:	73 07       	cpc	r23, r19
    1682:	84 07       	cpc	r24, r20
    1684:	ba 07       	cpc	r27, r26
    1686:	20 f0       	brcs	.+8      	; 0x1690 <__divsf3_pse+0xaa>
    1688:	62 1b       	sub	r22, r18
    168a:	73 0b       	sbc	r23, r19
    168c:	84 0b       	sbc	r24, r20
    168e:	ba 0b       	sbc	r27, r26
    1690:	ee 1f       	adc	r30, r30
    1692:	88 f7       	brcc	.-30     	; 0x1676 <__divsf3_pse+0x90>
    1694:	e0 95       	com	r30
    1696:	08 95       	ret

00001698 <__fixsfsi>:
    1698:	04 d0       	rcall	.+8      	; 0x16a2 <__fixunssfsi>
    169a:	68 94       	set
    169c:	b1 11       	cpse	r27, r1
    169e:	d9 c0       	rjmp	.+434    	; 0x1852 <__fp_szero>
    16a0:	08 95       	ret

000016a2 <__fixunssfsi>:
    16a2:	bc d0       	rcall	.+376    	; 0x181c <__fp_splitA>
    16a4:	88 f0       	brcs	.+34     	; 0x16c8 <__fixunssfsi+0x26>
    16a6:	9f 57       	subi	r25, 0x7F	; 127
    16a8:	90 f0       	brcs	.+36     	; 0x16ce <__fixunssfsi+0x2c>
    16aa:	b9 2f       	mov	r27, r25
    16ac:	99 27       	eor	r25, r25
    16ae:	b7 51       	subi	r27, 0x17	; 23
    16b0:	a0 f0       	brcs	.+40     	; 0x16da <__fixunssfsi+0x38>
    16b2:	d1 f0       	breq	.+52     	; 0x16e8 <__fixunssfsi+0x46>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	1a f0       	brmi	.+6      	; 0x16c4 <__fixunssfsi+0x22>
    16be:	ba 95       	dec	r27
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__fixunssfsi+0x12>
    16c2:	12 c0       	rjmp	.+36     	; 0x16e8 <__fixunssfsi+0x46>
    16c4:	b1 30       	cpi	r27, 0x01	; 1
    16c6:	81 f0       	breq	.+32     	; 0x16e8 <__fixunssfsi+0x46>
    16c8:	c3 d0       	rcall	.+390    	; 0x1850 <__fp_zero>
    16ca:	b1 e0       	ldi	r27, 0x01	; 1
    16cc:	08 95       	ret
    16ce:	c0 c0       	rjmp	.+384    	; 0x1850 <__fp_zero>
    16d0:	67 2f       	mov	r22, r23
    16d2:	78 2f       	mov	r23, r24
    16d4:	88 27       	eor	r24, r24
    16d6:	b8 5f       	subi	r27, 0xF8	; 248
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <__fixunssfsi+0x46>
    16da:	b9 3f       	cpi	r27, 0xF9	; 249
    16dc:	cc f3       	brlt	.-14     	; 0x16d0 <__fixunssfsi+0x2e>
    16de:	86 95       	lsr	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	b3 95       	inc	r27
    16e6:	d9 f7       	brne	.-10     	; 0x16de <__fixunssfsi+0x3c>
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__fixunssfsi+0x56>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	08 95       	ret

000016fa <__floatunsisf>:
    16fa:	e8 94       	clt
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <__floatsisf+0x12>

000016fe <__floatsisf>:
    16fe:	97 fb       	bst	r25, 7
    1700:	3e f4       	brtc	.+14     	; 0x1710 <__floatsisf+0x12>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	99 23       	and	r25, r25
    1712:	a9 f0       	breq	.+42     	; 0x173e <__floatsisf+0x40>
    1714:	f9 2f       	mov	r31, r25
    1716:	96 e9       	ldi	r25, 0x96	; 150
    1718:	bb 27       	eor	r27, r27
    171a:	93 95       	inc	r25
    171c:	f6 95       	lsr	r31
    171e:	87 95       	ror	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f1 11       	cpse	r31, r1
    1728:	f8 cf       	rjmp	.-16     	; 0x171a <__floatsisf+0x1c>
    172a:	fa f4       	brpl	.+62     	; 0x176a <__floatsisf+0x6c>
    172c:	bb 0f       	add	r27, r27
    172e:	11 f4       	brne	.+4      	; 0x1734 <__floatsisf+0x36>
    1730:	60 ff       	sbrs	r22, 0
    1732:	1b c0       	rjmp	.+54     	; 0x176a <__floatsisf+0x6c>
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	16 c0       	rjmp	.+44     	; 0x176a <__floatsisf+0x6c>
    173e:	88 23       	and	r24, r24
    1740:	11 f0       	breq	.+4      	; 0x1746 <__floatsisf+0x48>
    1742:	96 e9       	ldi	r25, 0x96	; 150
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <__floatsisf+0x6a>
    1746:	77 23       	and	r23, r23
    1748:	21 f0       	breq	.+8      	; 0x1752 <__floatsisf+0x54>
    174a:	9e e8       	ldi	r25, 0x8E	; 142
    174c:	87 2f       	mov	r24, r23
    174e:	76 2f       	mov	r23, r22
    1750:	05 c0       	rjmp	.+10     	; 0x175c <__floatsisf+0x5e>
    1752:	66 23       	and	r22, r22
    1754:	71 f0       	breq	.+28     	; 0x1772 <__floatsisf+0x74>
    1756:	96 e8       	ldi	r25, 0x86	; 134
    1758:	86 2f       	mov	r24, r22
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	2a f0       	brmi	.+10     	; 0x176a <__floatsisf+0x6c>
    1760:	9a 95       	dec	r25
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	da f7       	brpl	.-10     	; 0x1760 <__floatsisf+0x62>
    176a:	88 0f       	add	r24, r24
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	97 f9       	bld	r25, 7
    1772:	08 95       	ret

00001774 <__fp_cmp>:
    1774:	99 0f       	add	r25, r25
    1776:	00 08       	sbc	r0, r0
    1778:	55 0f       	add	r21, r21
    177a:	aa 0b       	sbc	r26, r26
    177c:	e0 e8       	ldi	r30, 0x80	; 128
    177e:	fe ef       	ldi	r31, 0xFE	; 254
    1780:	16 16       	cp	r1, r22
    1782:	17 06       	cpc	r1, r23
    1784:	e8 07       	cpc	r30, r24
    1786:	f9 07       	cpc	r31, r25
    1788:	c0 f0       	brcs	.+48     	; 0x17ba <__fp_cmp+0x46>
    178a:	12 16       	cp	r1, r18
    178c:	13 06       	cpc	r1, r19
    178e:	e4 07       	cpc	r30, r20
    1790:	f5 07       	cpc	r31, r21
    1792:	98 f0       	brcs	.+38     	; 0x17ba <__fp_cmp+0x46>
    1794:	62 1b       	sub	r22, r18
    1796:	73 0b       	sbc	r23, r19
    1798:	84 0b       	sbc	r24, r20
    179a:	95 0b       	sbc	r25, r21
    179c:	39 f4       	brne	.+14     	; 0x17ac <__fp_cmp+0x38>
    179e:	0a 26       	eor	r0, r26
    17a0:	61 f0       	breq	.+24     	; 0x17ba <__fp_cmp+0x46>
    17a2:	23 2b       	or	r18, r19
    17a4:	24 2b       	or	r18, r20
    17a6:	25 2b       	or	r18, r21
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <__fp_cmp+0x3e>
    17aa:	08 95       	ret
    17ac:	0a 26       	eor	r0, r26
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <__fp_cmp+0x3e>
    17b0:	a1 40       	sbci	r26, 0x01	; 1
    17b2:	a6 95       	lsr	r26
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	81 1d       	adc	r24, r1
    17b8:	81 1d       	adc	r24, r1
    17ba:	08 95       	ret

000017bc <__fp_inf>:
    17bc:	97 f9       	bld	r25, 7
    17be:	9f 67       	ori	r25, 0x7F	; 127
    17c0:	80 e8       	ldi	r24, 0x80	; 128
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	08 95       	ret

000017c8 <__fp_nan>:
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	80 ec       	ldi	r24, 0xC0	; 192
    17cc:	08 95       	ret

000017ce <__fp_pscA>:
    17ce:	00 24       	eor	r0, r0
    17d0:	0a 94       	dec	r0
    17d2:	16 16       	cp	r1, r22
    17d4:	17 06       	cpc	r1, r23
    17d6:	18 06       	cpc	r1, r24
    17d8:	09 06       	cpc	r0, r25
    17da:	08 95       	ret

000017dc <__fp_pscB>:
    17dc:	00 24       	eor	r0, r0
    17de:	0a 94       	dec	r0
    17e0:	12 16       	cp	r1, r18
    17e2:	13 06       	cpc	r1, r19
    17e4:	14 06       	cpc	r1, r20
    17e6:	05 06       	cpc	r0, r21
    17e8:	08 95       	ret

000017ea <__fp_round>:
    17ea:	09 2e       	mov	r0, r25
    17ec:	03 94       	inc	r0
    17ee:	00 0c       	add	r0, r0
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <__fp_round+0xc>
    17f2:	88 23       	and	r24, r24
    17f4:	52 f0       	brmi	.+20     	; 0x180a <__fp_round+0x20>
    17f6:	bb 0f       	add	r27, r27
    17f8:	40 f4       	brcc	.+16     	; 0x180a <__fp_round+0x20>
    17fa:	bf 2b       	or	r27, r31
    17fc:	11 f4       	brne	.+4      	; 0x1802 <__fp_round+0x18>
    17fe:	60 ff       	sbrs	r22, 0
    1800:	04 c0       	rjmp	.+8      	; 0x180a <__fp_round+0x20>
    1802:	6f 5f       	subi	r22, 0xFF	; 255
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	08 95       	ret

0000180c <__fp_split3>:
    180c:	57 fd       	sbrc	r21, 7
    180e:	90 58       	subi	r25, 0x80	; 128
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	59 f0       	breq	.+22     	; 0x182c <__fp_splitA+0x10>
    1816:	5f 3f       	cpi	r21, 0xFF	; 255
    1818:	71 f0       	breq	.+28     	; 0x1836 <__fp_splitA+0x1a>
    181a:	47 95       	ror	r20

0000181c <__fp_splitA>:
    181c:	88 0f       	add	r24, r24
    181e:	97 fb       	bst	r25, 7
    1820:	99 1f       	adc	r25, r25
    1822:	61 f0       	breq	.+24     	; 0x183c <__fp_splitA+0x20>
    1824:	9f 3f       	cpi	r25, 0xFF	; 255
    1826:	79 f0       	breq	.+30     	; 0x1846 <__fp_splitA+0x2a>
    1828:	87 95       	ror	r24
    182a:	08 95       	ret
    182c:	12 16       	cp	r1, r18
    182e:	13 06       	cpc	r1, r19
    1830:	14 06       	cpc	r1, r20
    1832:	55 1f       	adc	r21, r21
    1834:	f2 cf       	rjmp	.-28     	; 0x181a <__fp_split3+0xe>
    1836:	46 95       	lsr	r20
    1838:	f1 df       	rcall	.-30     	; 0x181c <__fp_splitA>
    183a:	08 c0       	rjmp	.+16     	; 0x184c <__fp_splitA+0x30>
    183c:	16 16       	cp	r1, r22
    183e:	17 06       	cpc	r1, r23
    1840:	18 06       	cpc	r1, r24
    1842:	99 1f       	adc	r25, r25
    1844:	f1 cf       	rjmp	.-30     	; 0x1828 <__fp_splitA+0xc>
    1846:	86 95       	lsr	r24
    1848:	71 05       	cpc	r23, r1
    184a:	61 05       	cpc	r22, r1
    184c:	08 94       	sec
    184e:	08 95       	ret

00001850 <__fp_zero>:
    1850:	e8 94       	clt

00001852 <__fp_szero>:
    1852:	bb 27       	eor	r27, r27
    1854:	66 27       	eor	r22, r22
    1856:	77 27       	eor	r23, r23
    1858:	cb 01       	movw	r24, r22
    185a:	97 f9       	bld	r25, 7
    185c:	08 95       	ret

0000185e <__mulsf3>:
    185e:	0b d0       	rcall	.+22     	; 0x1876 <__mulsf3x>
    1860:	c4 cf       	rjmp	.-120    	; 0x17ea <__fp_round>
    1862:	b5 df       	rcall	.-150    	; 0x17ce <__fp_pscA>
    1864:	28 f0       	brcs	.+10     	; 0x1870 <__mulsf3+0x12>
    1866:	ba df       	rcall	.-140    	; 0x17dc <__fp_pscB>
    1868:	18 f0       	brcs	.+6      	; 0x1870 <__mulsf3+0x12>
    186a:	95 23       	and	r25, r21
    186c:	09 f0       	breq	.+2      	; 0x1870 <__mulsf3+0x12>
    186e:	a6 cf       	rjmp	.-180    	; 0x17bc <__fp_inf>
    1870:	ab cf       	rjmp	.-170    	; 0x17c8 <__fp_nan>
    1872:	11 24       	eor	r1, r1
    1874:	ee cf       	rjmp	.-36     	; 0x1852 <__fp_szero>

00001876 <__mulsf3x>:
    1876:	ca df       	rcall	.-108    	; 0x180c <__fp_split3>
    1878:	a0 f3       	brcs	.-24     	; 0x1862 <__mulsf3+0x4>

0000187a <__mulsf3_pse>:
    187a:	95 9f       	mul	r25, r21
    187c:	d1 f3       	breq	.-12     	; 0x1872 <__mulsf3+0x14>
    187e:	95 0f       	add	r25, r21
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	55 1f       	adc	r21, r21
    1884:	62 9f       	mul	r22, r18
    1886:	f0 01       	movw	r30, r0
    1888:	72 9f       	mul	r23, r18
    188a:	bb 27       	eor	r27, r27
    188c:	f0 0d       	add	r31, r0
    188e:	b1 1d       	adc	r27, r1
    1890:	63 9f       	mul	r22, r19
    1892:	aa 27       	eor	r26, r26
    1894:	f0 0d       	add	r31, r0
    1896:	b1 1d       	adc	r27, r1
    1898:	aa 1f       	adc	r26, r26
    189a:	64 9f       	mul	r22, r20
    189c:	66 27       	eor	r22, r22
    189e:	b0 0d       	add	r27, r0
    18a0:	a1 1d       	adc	r26, r1
    18a2:	66 1f       	adc	r22, r22
    18a4:	82 9f       	mul	r24, r18
    18a6:	22 27       	eor	r18, r18
    18a8:	b0 0d       	add	r27, r0
    18aa:	a1 1d       	adc	r26, r1
    18ac:	62 1f       	adc	r22, r18
    18ae:	73 9f       	mul	r23, r19
    18b0:	b0 0d       	add	r27, r0
    18b2:	a1 1d       	adc	r26, r1
    18b4:	62 1f       	adc	r22, r18
    18b6:	83 9f       	mul	r24, r19
    18b8:	a0 0d       	add	r26, r0
    18ba:	61 1d       	adc	r22, r1
    18bc:	22 1f       	adc	r18, r18
    18be:	74 9f       	mul	r23, r20
    18c0:	33 27       	eor	r19, r19
    18c2:	a0 0d       	add	r26, r0
    18c4:	61 1d       	adc	r22, r1
    18c6:	23 1f       	adc	r18, r19
    18c8:	84 9f       	mul	r24, r20
    18ca:	60 0d       	add	r22, r0
    18cc:	21 1d       	adc	r18, r1
    18ce:	82 2f       	mov	r24, r18
    18d0:	76 2f       	mov	r23, r22
    18d2:	6a 2f       	mov	r22, r26
    18d4:	11 24       	eor	r1, r1
    18d6:	9f 57       	subi	r25, 0x7F	; 127
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	8a f0       	brmi	.+34     	; 0x18fe <__mulsf3_pse+0x84>
    18dc:	e1 f0       	breq	.+56     	; 0x1916 <__mulsf3_pse+0x9c>
    18de:	88 23       	and	r24, r24
    18e0:	4a f0       	brmi	.+18     	; 0x18f4 <__mulsf3_pse+0x7a>
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	bb 1f       	adc	r27, r27
    18e8:	66 1f       	adc	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	91 50       	subi	r25, 0x01	; 1
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	a9 f7       	brne	.-22     	; 0x18de <__mulsf3_pse+0x64>
    18f4:	9e 3f       	cpi	r25, 0xFE	; 254
    18f6:	51 05       	cpc	r21, r1
    18f8:	70 f0       	brcs	.+28     	; 0x1916 <__mulsf3_pse+0x9c>
    18fa:	60 cf       	rjmp	.-320    	; 0x17bc <__fp_inf>
    18fc:	aa cf       	rjmp	.-172    	; 0x1852 <__fp_szero>
    18fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1900:	ec f3       	brlt	.-6      	; 0x18fc <__mulsf3_pse+0x82>
    1902:	98 3e       	cpi	r25, 0xE8	; 232
    1904:	dc f3       	brlt	.-10     	; 0x18fc <__mulsf3_pse+0x82>
    1906:	86 95       	lsr	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	b7 95       	ror	r27
    190e:	f7 95       	ror	r31
    1910:	e7 95       	ror	r30
    1912:	9f 5f       	subi	r25, 0xFF	; 255
    1914:	c1 f7       	brne	.-16     	; 0x1906 <__mulsf3_pse+0x8c>
    1916:	fe 2b       	or	r31, r30
    1918:	88 0f       	add	r24, r24
    191a:	91 1d       	adc	r25, r1
    191c:	96 95       	lsr	r25
    191e:	87 95       	ror	r24
    1920:	97 f9       	bld	r25, 7
    1922:	08 95       	ret

00001924 <__mulsi3>:
    1924:	db 01       	movw	r26, r22
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	0b d0       	rcall	.+22     	; 0x1942 <__muluhisi3>
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	a2 9f       	mul	r26, r18
    1932:	80 0d       	add	r24, r0
    1934:	91 1d       	adc	r25, r1
    1936:	a3 9f       	mul	r26, r19
    1938:	90 0d       	add	r25, r0
    193a:	b2 9f       	mul	r27, r18
    193c:	90 0d       	add	r25, r0
    193e:	11 24       	eor	r1, r1
    1940:	08 95       	ret

00001942 <__muluhisi3>:
    1942:	09 d0       	rcall	.+18     	; 0x1956 <__umulhisi3>
    1944:	a5 9f       	mul	r26, r21
    1946:	90 0d       	add	r25, r0
    1948:	b4 9f       	mul	r27, r20
    194a:	90 0d       	add	r25, r0
    194c:	a4 9f       	mul	r26, r20
    194e:	80 0d       	add	r24, r0
    1950:	91 1d       	adc	r25, r1
    1952:	11 24       	eor	r1, r1
    1954:	08 95       	ret

00001956 <__umulhisi3>:
    1956:	a2 9f       	mul	r26, r18
    1958:	b0 01       	movw	r22, r0
    195a:	b3 9f       	mul	r27, r19
    195c:	c0 01       	movw	r24, r0
    195e:	a3 9f       	mul	r26, r19
    1960:	70 0d       	add	r23, r0
    1962:	81 1d       	adc	r24, r1
    1964:	11 24       	eor	r1, r1
    1966:	91 1d       	adc	r25, r1
    1968:	b2 9f       	mul	r27, r18
    196a:	70 0d       	add	r23, r0
    196c:	81 1d       	adc	r24, r1
    196e:	11 24       	eor	r1, r1
    1970:	91 1d       	adc	r25, r1
    1972:	08 95       	ret

00001974 <_exit>:
    1974:	f8 94       	cli

00001976 <__stop_program>:
    1976:	ff cf       	rjmp	.-2      	; 0x1976 <__stop_program>
